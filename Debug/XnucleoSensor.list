
XnucleoSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080031b0  080031b0  000131b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f0  080031f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031f0  080031f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031f0  080031f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08003204  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08003204  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a601  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001703  00000000  00000000  0002a63d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a8  00000000  00000000  0002bd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  0002c6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028062  00000000  00000000  0002cfc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a7f  00000000  00000000  0005502a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f58c3  00000000  00000000  0005daa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015336c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002688  00000000  00000000  001533e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003198 	.word	0x08003198

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003198 	.word	0x08003198

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fa42 	bl	800068a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f865 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f919 	bl	8000440 <MX_GPIO_Init>
  MX_I2C1_Init();
 800020e:	f000 f8d7 	bl	80003c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buf[2]={0,1};
 8000212:	2300      	movs	r3, #0
 8000214:	713b      	strb	r3, [r7, #4]
 8000216:	2301      	movs	r3, #1
 8000218:	717b      	strb	r3, [r7, #5]
  uint16_t temperature;
  uint8_t temperature_low;
  const uint8_t TMP102_ADDR = 0x95 ;
 800021a:	2395      	movs	r3, #149	; 0x95
 800021c:	73fb      	strb	r3, [r7, #15]
  float temp;

  //HAL_I2C_IsDeviceReady(hi2c, DevAddress, Trials, Timeout)
  //hi2c1->Instance->CR1;

  ret = HAL_I2C_GetState(&hi2c1);
 800021e:	482b      	ldr	r0, [pc, #172]	; (80002cc <main+0xd0>)
 8000220:	f001 f89d 	bl	800135e <HAL_I2C_GetState>
 8000224:	4603      	mov	r3, r0
 8000226:	73bb      	strb	r3, [r7, #14]

  ret = HAL_I2C_IsDeviceReady(&hi2c1, TMP102_ADDR, 3, 3000);
 8000228:	7bfb      	ldrb	r3, [r7, #15]
 800022a:	b299      	uxth	r1, r3
 800022c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000230:	2203      	movs	r2, #3
 8000232:	4826      	ldr	r0, [pc, #152]	; (80002cc <main+0xd0>)
 8000234:	f000 ff8c 	bl	8001150 <HAL_I2C_IsDeviceReady>
 8000238:	4603      	mov	r3, r0
 800023a:	73bb      	strb	r3, [r7, #14]

	buf[0] = 0x0; // hi bit
 800023c:	2300      	movs	r3, #0
 800023e:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, 3000);
 8000240:	7bfb      	ldrb	r3, [r7, #15]
 8000242:	b299      	uxth	r1, r3
 8000244:	1d3a      	adds	r2, r7, #4
 8000246:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	2301      	movs	r3, #1
 800024e:	481f      	ldr	r0, [pc, #124]	; (80002cc <main+0xd0>)
 8000250:	f000 fd94 	bl	8000d7c <HAL_I2C_Master_Transmit>
 8000254:	4603      	mov	r3, r0
 8000256:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, (uint8_t*)&temperature, 1, 3000);
 8000258:	7bfb      	ldrb	r3, [r7, #15]
 800025a:	b299      	uxth	r1, r3
 800025c:	1cba      	adds	r2, r7, #2
 800025e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	2301      	movs	r3, #1
 8000266:	4819      	ldr	r0, [pc, #100]	; (80002cc <main+0xd0>)
 8000268:	f000 fe7c 	bl	8000f64 <HAL_I2C_Master_Receive>
 800026c:	4603      	mov	r3, r0
 800026e:	73bb      	strb	r3, [r7, #14]

	buf[0] = 0x2; // lo bit
 8000270:	2302      	movs	r3, #2
 8000272:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, 3000);
 8000274:	7bfb      	ldrb	r3, [r7, #15]
 8000276:	b299      	uxth	r1, r3
 8000278:	1d3a      	adds	r2, r7, #4
 800027a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2301      	movs	r3, #1
 8000282:	4812      	ldr	r0, [pc, #72]	; (80002cc <main+0xd0>)
 8000284:	f000 fd7a 	bl	8000d7c <HAL_I2C_Master_Transmit>
 8000288:	4603      	mov	r3, r0
 800028a:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, &temperature_low, 1, 3000);
 800028c:	7bfb      	ldrb	r3, [r7, #15]
 800028e:	b299      	uxth	r1, r3
 8000290:	1c7a      	adds	r2, r7, #1
 8000292:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	2301      	movs	r3, #1
 800029a:	480c      	ldr	r0, [pc, #48]	; (80002cc <main+0xd0>)
 800029c:	f000 fe62 	bl	8000f64 <HAL_I2C_Master_Receive>
 80002a0:	4603      	mov	r3, r0
 80002a2:	73bb      	strb	r3, [r7, #14]

	temperature  = (temperature << 8) + temperature_low;
 80002a4:	887b      	ldrh	r3, [r7, #2]
 80002a6:	021b      	lsls	r3, r3, #8
 80002a8:	b29a      	uxth	r2, r3
 80002aa:	787b      	ldrb	r3, [r7, #1]
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	4413      	add	r3, r2
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	807b      	strh	r3, [r7, #2]
	temp = ((float)temperature) / 256.0f;
 80002b4:	887b      	ldrh	r3, [r7, #2]
 80002b6:	ee07 3a90 	vmov	s15, r3
 80002ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80002be:	eddf 6a04 	vldr	s13, [pc, #16]	; 80002d0 <main+0xd4>
 80002c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002c6:	edc7 7a02 	vstr	s15, [r7, #8]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ca:	e7fe      	b.n	80002ca <main+0xce>
 80002cc:	20000028 	.word	0x20000028
 80002d0:	43800000 	.word	0x43800000

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b0bc      	sub	sp, #240	; 0xf0
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80002de:	2244      	movs	r2, #68	; 0x44
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 ff50 	bl	8003188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2294      	movs	r2, #148	; 0x94
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 ff42 	bl	8003188 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000304:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000308:	f001 fad0 	bl	80018ac <HAL_PWREx_ControlVoltageScaling>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000312:	f000 f8c5 	bl	80004a0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000316:	2302      	movs	r3, #2
 8000318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000324:	2340      	movs	r3, #64	; 0x40
 8000326:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032a:	2302      	movs	r3, #2
 800032c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000330:	2302      	movs	r3, #2
 8000332:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000336:	2302      	movs	r3, #2
 8000338:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 20;
 800033c:	2314      	movs	r3, #20
 800033e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000342:	2302      	movs	r3, #2
 8000344:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000348:	2302      	movs	r3, #2
 800034a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800034e:	2302      	movs	r3, #2
 8000350:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000354:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000358:	4618      	mov	r0, r3
 800035a:	f001 fb4b 	bl	80019f4 <HAL_RCC_OscConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000364:	f000 f89c 	bl	80004a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000368:	230f      	movs	r3, #15
 800036a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036e:	2303      	movs	r3, #3
 8000370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000386:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800038a:	2103      	movs	r1, #3
 800038c:	4618      	mov	r0, r3
 800038e:	f001 ff57 	bl	8002240 <HAL_RCC_ClockConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000398:	f000 f882 	bl	80004a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800039c:	2340      	movs	r3, #64	; 0x40
 800039e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 f9c2 	bl	8002730 <HAL_RCCEx_PeriphCLKConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80003b2:	f000 f875 	bl	80004a0 <Error_Handler>
  }
}
 80003b6:	bf00      	nop
 80003b8:	37f0      	adds	r7, #240	; 0xf0
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_I2C1_Init+0x74>)
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <MX_I2C1_Init+0x78>)
 80003c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_I2C1_Init+0x74>)
 80003cc:	4a1b      	ldr	r2, [pc, #108]	; (800043c <MX_I2C1_Init+0x7c>)
 80003ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_I2C1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <MX_I2C1_Init+0x74>)
 80003d8:	2201      	movs	r2, #1
 80003da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <MX_I2C1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_I2C1_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <MX_I2C1_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_I2C1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_I2C1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003fa:	480e      	ldr	r0, [pc, #56]	; (8000434 <MX_I2C1_Init+0x74>)
 80003fc:	f000 fc2e 	bl	8000c5c <HAL_I2C_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000406:	f000 f84b 	bl	80004a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800040a:	2100      	movs	r1, #0
 800040c:	4809      	ldr	r0, [pc, #36]	; (8000434 <MX_I2C1_Init+0x74>)
 800040e:	f001 f995 	bl	800173c <HAL_I2CEx_ConfigAnalogFilter>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000418:	f000 f842 	bl	80004a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800041c:	2100      	movs	r1, #0
 800041e:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_I2C1_Init+0x74>)
 8000420:	f001 f9d7 	bl	80017d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800042a:	f000 f839 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000028 	.word	0x20000028
 8000438:	40005400 	.word	0x40005400
 800043c:	10909cec 	.word	0x10909cec

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000446:	4b15      	ldr	r3, [pc, #84]	; (800049c <MX_GPIO_Init+0x5c>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <MX_GPIO_Init+0x5c>)
 800044c:	f043 0304 	orr.w	r3, r3, #4
 8000450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <MX_GPIO_Init+0x5c>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	f003 0304 	and.w	r3, r3, #4
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_GPIO_Init+0x5c>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <MX_GPIO_Init+0x5c>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_GPIO_Init+0x5c>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_GPIO_Init+0x5c>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	4a08      	ldr	r2, [pc, #32]	; (800049c <MX_GPIO_Init+0x5c>)
 800047c:	f043 0302 	orr.w	r3, r3, #2
 8000480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_GPIO_Init+0x5c>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000486:	f003 0302 	and.w	r3, r3, #2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <Error_Handler+0x6>

080004a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <HAL_MspInit+0x44>)
 80004b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b2:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <HAL_MspInit+0x44>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6613      	str	r3, [r2, #96]	; 0x60
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <HAL_MspInit+0x44>)
 80004bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <HAL_MspInit+0x44>)
 80004c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_MspInit+0x44>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d0:	6593      	str	r3, [r2, #88]	; 0x58
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_MspInit+0x44>)
 80004d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a17      	ldr	r2, [pc, #92]	; (800056c <HAL_I2C_MspInit+0x7c>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d128      	bne.n	8000564 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <HAL_I2C_MspInit+0x80>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a16      	ldr	r2, [pc, #88]	; (8000570 <HAL_I2C_MspInit+0x80>)
 8000518:	f043 0302 	orr.w	r3, r3, #2
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <HAL_I2C_MspInit+0x80>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800052a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800052e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000530:	2312      	movs	r3, #18
 8000532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000534:	2301      	movs	r3, #1
 8000536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000538:	2303      	movs	r3, #3
 800053a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800053c:	2304      	movs	r3, #4
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4619      	mov	r1, r3
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <HAL_I2C_MspInit+0x84>)
 8000548:	f000 f9f6 	bl	8000938 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <HAL_I2C_MspInit+0x80>)
 800054e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_I2C_MspInit+0x80>)
 8000552:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000556:	6593      	str	r3, [r2, #88]	; 0x58
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_I2C_MspInit+0x80>)
 800055a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000564:	bf00      	nop
 8000566:	3728      	adds	r7, #40	; 0x28
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40005400 	.word	0x40005400
 8000570:	40021000 	.word	0x40021000
 8000574:	48000400 	.word	0x48000400

08000578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800057c:	e7fe      	b.n	800057c <NMI_Handler+0x4>

0800057e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <MemManage_Handler+0x4>

0800058a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <BusFault_Handler+0x4>

08000590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <UsageFault_Handler+0x4>

08000596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c4:	f000 f8b4 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}

080005cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <SystemInit+0x64>)
 80005d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005d6:	4a16      	ldr	r2, [pc, #88]	; (8000630 <SystemInit+0x64>)
 80005d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <SystemInit+0x68>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a13      	ldr	r2, [pc, #76]	; (8000634 <SystemInit+0x68>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <SystemInit+0x68>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <SystemInit+0x68>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <SystemInit+0x68>)
 80005f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80005fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000600:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <SystemInit+0x68>)
 8000604:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000608:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <SystemInit+0x68>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a09      	ldr	r2, [pc, #36]	; (8000634 <SystemInit+0x68>)
 8000610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000614:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <SystemInit+0x68>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <SystemInit+0x64>)
 800061e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000622:	609a      	str	r2, [r3, #8]
#endif
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00
 8000634:	40021000 	.word	0x40021000

08000638 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000670 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800063c:	f7ff ffc6 	bl	80005cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000640:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000642:	e003      	b.n	800064c <LoopCopyDataInit>

08000644 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000646:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000648:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800064a:	3104      	adds	r1, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <LoopForever+0xa>)
	ldr	r3, =_edata
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000650:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000652:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000654:	d3f6      	bcc.n	8000644 <CopyDataInit>
	ldr	r2, =_sbss
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000658:	e002      	b.n	8000660 <LoopFillZerobss>

0800065a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800065a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800065c:	f842 3b04 	str.w	r3, [r2], #4

08000660 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <LoopForever+0x16>)
	cmp	r2, r3
 8000662:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000664:	d3f9      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000666:	f002 fd6b 	bl	8003140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800066a:	f7ff fdc7 	bl	80001fc <main>

0800066e <LoopForever>:

LoopForever:
    b LoopForever
 800066e:	e7fe      	b.n	800066e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000670:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000674:	080031f8 	.word	0x080031f8
	ldr	r0, =_sdata
 8000678:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800067c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000680:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000684:	20000078 	.word	0x20000078

08000688 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC1_IRQHandler>

0800068a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000690:	2300      	movs	r3, #0
 8000692:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000694:	2003      	movs	r0, #3
 8000696:	f000 f91b 	bl	80008d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800069a:	2000      	movs	r0, #0
 800069c:	f000 f80e 	bl	80006bc <HAL_InitTick>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	71fb      	strb	r3, [r7, #7]
 80006aa:	e001      	b.n	80006b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006ac:	f7ff fefc 	bl	80004a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006b0:	79fb      	ldrb	r3, [r7, #7]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <HAL_InitTick+0x68>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d022      	beq.n	8000716 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_InitTick+0x6c>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <HAL_InitTick+0x68>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80006e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f91a 	bl	800091e <HAL_SYSTICK_Config>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d10f      	bne.n	8000710 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d809      	bhi.n	800070a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f6:	2200      	movs	r2, #0
 80006f8:	6879      	ldr	r1, [r7, #4]
 80006fa:	f04f 30ff 	mov.w	r0, #4294967295
 80006fe:	f000 f8f2 	bl	80008e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <HAL_InitTick+0x70>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	e007      	b.n	800071a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	e004      	b.n	800071a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000710:	2301      	movs	r3, #1
 8000712:	73fb      	strb	r3, [r7, #15]
 8000714:	e001      	b.n	800071a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000008 	.word	0x20000008
 8000728:	20000000 	.word	0x20000000
 800072c:	20000004 	.word	0x20000004

08000730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x1c>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_IncTick+0x20>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4413      	add	r3, r2
 800073e:	4a03      	ldr	r2, [pc, #12]	; (800074c <HAL_IncTick+0x1c>)
 8000740:	6013      	str	r3, [r2, #0]
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	20000074 	.word	0x20000074
 8000750:	20000008 	.word	0x20000008

08000754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <HAL_GetTick+0x14>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000074 	.word	0x20000074

0800076c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	60d3      	str	r3, [r2, #12]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <__NVIC_GetPriorityGrouping+0x18>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	f003 0307 	and.w	r3, r3, #7
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	; (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	; (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0112      	lsls	r2, r2, #4
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f1c3 0307 	rsb	r3, r3, #7
 800083e:	2b04      	cmp	r3, #4
 8000840:	bf28      	it	cs
 8000842:	2304      	movcs	r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3304      	adds	r3, #4
 800084a:	2b06      	cmp	r3, #6
 800084c:	d902      	bls.n	8000854 <NVIC_EncodePriority+0x30>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3b03      	subs	r3, #3
 8000852:	e000      	b.n	8000856 <NVIC_EncodePriority+0x32>
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43da      	mvns	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	401a      	ands	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43d9      	mvns	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	4313      	orrs	r3, r2
         );
}
 800087e:	4618      	mov	r0, r3
 8000880:	3724      	adds	r7, #36	; 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800089c:	d301      	bcc.n	80008a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089e:	2301      	movs	r3, #1
 80008a0:	e00f      	b.n	80008c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <SysTick_Config+0x40>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008aa:	210f      	movs	r1, #15
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f7ff ff8e 	bl	80007d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <SysTick_Config+0x40>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ba:	4b04      	ldr	r3, [pc, #16]	; (80008cc <SysTick_Config+0x40>)
 80008bc:	2207      	movs	r2, #7
 80008be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	e000e010 	.word	0xe000e010

080008d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff ff47 	bl	800076c <__NVIC_SetPriorityGrouping>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b086      	sub	sp, #24
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
 80008f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008f8:	f7ff ff5c 	bl	80007b4 <__NVIC_GetPriorityGrouping>
 80008fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	68b9      	ldr	r1, [r7, #8]
 8000902:	6978      	ldr	r0, [r7, #20]
 8000904:	f7ff ff8e 	bl	8000824 <NVIC_EncodePriority>
 8000908:	4602      	mov	r2, r0
 800090a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff5d 	bl	80007d0 <__NVIC_SetPriority>
}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ffb0 	bl	800088c <SysTick_Config>
 800092c:	4603      	mov	r3, r0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000946:	e166      	b.n	8000c16 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	2101      	movs	r1, #1
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	f000 8158 	beq.w	8000c10 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d00b      	beq.n	8000980 <HAL_GPIO_Init+0x48>
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d007      	beq.n	8000980 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000974:	2b11      	cmp	r3, #17
 8000976:	d003      	beq.n	8000980 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2b12      	cmp	r3, #18
 800097e:	d130      	bne.n	80009e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	2203      	movs	r2, #3
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	68da      	ldr	r2, [r3, #12]
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009b6:	2201      	movs	r2, #1
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	091b      	lsrs	r3, r3, #4
 80009cc:	f003 0201 	and.w	r2, r3, #1
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	2203      	movs	r2, #3
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d003      	beq.n	8000a22 <HAL_GPIO_Init+0xea>
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2b12      	cmp	r3, #18
 8000a20:	d123      	bne.n	8000a6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	08da      	lsrs	r2, r3, #3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3208      	adds	r2, #8
 8000a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	220f      	movs	r2, #15
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	691a      	ldr	r2, [r3, #16]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	08da      	lsrs	r2, r3, #3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3208      	adds	r2, #8
 8000a64:	6939      	ldr	r1, [r7, #16]
 8000a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2203      	movs	r2, #3
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 0203 	and.w	r2, r3, #3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 80b2 	beq.w	8000c10 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aac:	4b61      	ldr	r3, [pc, #388]	; (8000c34 <HAL_GPIO_Init+0x2fc>)
 8000aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab0:	4a60      	ldr	r2, [pc, #384]	; (8000c34 <HAL_GPIO_Init+0x2fc>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ab8:	4b5e      	ldr	r3, [pc, #376]	; (8000c34 <HAL_GPIO_Init+0x2fc>)
 8000aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac4:	4a5c      	ldr	r2, [pc, #368]	; (8000c38 <HAL_GPIO_Init+0x300>)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	3302      	adds	r3, #2
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	220f      	movs	r2, #15
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aee:	d02b      	beq.n	8000b48 <HAL_GPIO_Init+0x210>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a52      	ldr	r2, [pc, #328]	; (8000c3c <HAL_GPIO_Init+0x304>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d025      	beq.n	8000b44 <HAL_GPIO_Init+0x20c>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a51      	ldr	r2, [pc, #324]	; (8000c40 <HAL_GPIO_Init+0x308>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d01f      	beq.n	8000b40 <HAL_GPIO_Init+0x208>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a50      	ldr	r2, [pc, #320]	; (8000c44 <HAL_GPIO_Init+0x30c>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d019      	beq.n	8000b3c <HAL_GPIO_Init+0x204>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a4f      	ldr	r2, [pc, #316]	; (8000c48 <HAL_GPIO_Init+0x310>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d013      	beq.n	8000b38 <HAL_GPIO_Init+0x200>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a4e      	ldr	r2, [pc, #312]	; (8000c4c <HAL_GPIO_Init+0x314>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d00d      	beq.n	8000b34 <HAL_GPIO_Init+0x1fc>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a4d      	ldr	r2, [pc, #308]	; (8000c50 <HAL_GPIO_Init+0x318>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d007      	beq.n	8000b30 <HAL_GPIO_Init+0x1f8>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a4c      	ldr	r2, [pc, #304]	; (8000c54 <HAL_GPIO_Init+0x31c>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d101      	bne.n	8000b2c <HAL_GPIO_Init+0x1f4>
 8000b28:	2307      	movs	r3, #7
 8000b2a:	e00e      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	e00c      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b30:	2306      	movs	r3, #6
 8000b32:	e00a      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b34:	2305      	movs	r3, #5
 8000b36:	e008      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b38:	2304      	movs	r3, #4
 8000b3a:	e006      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e004      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e002      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	f002 0203 	and.w	r2, r2, #3
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	4093      	lsls	r3, r2
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b5a:	4937      	ldr	r1, [pc, #220]	; (8000c38 <HAL_GPIO_Init+0x300>)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	3302      	adds	r3, #2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b68:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b8c:	4a32      	ldr	r2, [pc, #200]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b92:	4b31      	ldr	r3, [pc, #196]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bb6:	4a28      	ldr	r2, [pc, #160]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bbc:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000be0:	4a1d      	ldr	r2, [pc, #116]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c0a:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	3301      	adds	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f47f ae91 	bne.w	8000948 <HAL_GPIO_Init+0x10>
  }
}
 8000c26:	bf00      	nop
 8000c28:	371c      	adds	r7, #28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48000800 	.word	0x48000800
 8000c44:	48000c00 	.word	0x48000c00
 8000c48:	48001000 	.word	0x48001000
 8000c4c:	48001400 	.word	0x48001400
 8000c50:	48001800 	.word	0x48001800
 8000c54:	48001c00 	.word	0x48001c00
 8000c58:	40010400 	.word	0x40010400

08000c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e081      	b.n	8000d72 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d106      	bne.n	8000c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fc34 	bl	80004f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2224      	movs	r2, #36	; 0x24
 8000c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f022 0201 	bic.w	r2, r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d107      	bne.n	8000cd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	e006      	b.n	8000ce4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ce2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d104      	bne.n	8000cf6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cf4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	6812      	ldr	r2, [r2, #0]
 8000d00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	691a      	ldr	r2, [r3, #16]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	ea42 0103 	orr.w	r1, r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	021a      	lsls	r2, r3, #8
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	430a      	orrs	r2, r1
 8000d32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69d9      	ldr	r1, [r3, #28]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a1a      	ldr	r2, [r3, #32]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	430a      	orrs	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 0201 	orr.w	r2, r2, #1
 8000d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	461a      	mov	r2, r3
 8000d88:	460b      	mov	r3, r1
 8000d8a:	817b      	strh	r3, [r7, #10]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b20      	cmp	r3, #32
 8000d9a:	f040 80da 	bne.w	8000f52 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d101      	bne.n	8000dac <HAL_I2C_Master_Transmit+0x30>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e0d3      	b.n	8000f54 <HAL_I2C_Master_Transmit+0x1d8>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2201      	movs	r2, #1
 8000db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000db4:	f7ff fcce 	bl	8000754 <HAL_GetTick>
 8000db8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2319      	movs	r3, #25
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f000 fafb 	bl	80013c2 <I2C_WaitOnFlagUntilTimeout>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e0be      	b.n	8000f54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2221      	movs	r2, #33	; 0x21
 8000dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2210      	movs	r2, #16
 8000de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2200      	movs	r2, #0
 8000dea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	893a      	ldrh	r2, [r7, #8]
 8000df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	2bff      	cmp	r3, #255	; 0xff
 8000e06:	d90e      	bls.n	8000e26 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	22ff      	movs	r2, #255	; 0xff
 8000e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	8979      	ldrh	r1, [r7, #10]
 8000e16:	4b51      	ldr	r3, [pc, #324]	; (8000f5c <HAL_I2C_Master_Transmit+0x1e0>)
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	f000 fc5e 	bl	80016e0 <I2C_TransferConfig>
 8000e24:	e06c      	b.n	8000f00 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	8979      	ldrh	r1, [r7, #10]
 8000e38:	4b48      	ldr	r3, [pc, #288]	; (8000f5c <HAL_I2C_Master_Transmit+0x1e0>)
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f000 fc4d 	bl	80016e0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000e46:	e05b      	b.n	8000f00 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	6a39      	ldr	r1, [r7, #32]
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f000 faf8 	bl	8001442 <I2C_WaitOnTXISFlagUntilTimeout>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e07b      	b.n	8000f54 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	781a      	ldrb	r2, [r3, #0]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e84:	3b01      	subs	r3, #1
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d034      	beq.n	8000f00 <HAL_I2C_Master_Transmit+0x184>
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d130      	bne.n	8000f00 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2180      	movs	r1, #128	; 0x80
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f000 fa8a 	bl	80013c2 <I2C_WaitOnFlagUntilTimeout>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e04d      	b.n	8000f54 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	2bff      	cmp	r3, #255	; 0xff
 8000ec0:	d90e      	bls.n	8000ee0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	22ff      	movs	r2, #255	; 0xff
 8000ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	8979      	ldrh	r1, [r7, #10]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f000 fc01 	bl	80016e0 <I2C_TransferConfig>
 8000ede:	e00f      	b.n	8000f00 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	8979      	ldrh	r1, [r7, #10]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 fbf0 	bl	80016e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d19e      	bne.n	8000e48 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	6a39      	ldr	r1, [r7, #32]
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f000 fad7 	bl	80014c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e01a      	b.n	8000f54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2220      	movs	r2, #32
 8000f24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6859      	ldr	r1, [r3, #4]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_I2C_Master_Transmit+0x1e4>)
 8000f32:	400b      	ands	r3, r1
 8000f34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2220      	movs	r2, #32
 8000f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8000f52:	2302      	movs	r3, #2
  }
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	80002000 	.word	0x80002000
 8000f60:	fe00e800 	.word	0xfe00e800

08000f64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	460b      	mov	r3, r1
 8000f72:	817b      	strh	r3, [r7, #10]
 8000f74:	4613      	mov	r3, r2
 8000f76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b20      	cmp	r3, #32
 8000f82:	f040 80db 	bne.w	800113c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d101      	bne.n	8000f94 <HAL_I2C_Master_Receive+0x30>
 8000f90:	2302      	movs	r3, #2
 8000f92:	e0d4      	b.n	800113e <HAL_I2C_Master_Receive+0x1da>
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f9c:	f7ff fbda 	bl	8000754 <HAL_GetTick>
 8000fa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2319      	movs	r3, #25
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f000 fa07 	bl	80013c2 <I2C_WaitOnFlagUntilTimeout>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e0bf      	b.n	800113e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2222      	movs	r2, #34	; 0x22
 8000fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2210      	movs	r2, #16
 8000fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	893a      	ldrh	r2, [r7, #8]
 8000fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2bff      	cmp	r3, #255	; 0xff
 8000fee:	d90e      	bls.n	800100e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	22ff      	movs	r2, #255	; 0xff
 8000ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	8979      	ldrh	r1, [r7, #10]
 8000ffe:	4b52      	ldr	r3, [pc, #328]	; (8001148 <HAL_I2C_Master_Receive+0x1e4>)
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f000 fb6a 	bl	80016e0 <I2C_TransferConfig>
 800100c:	e06d      	b.n	80010ea <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001012:	b29a      	uxth	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800101c:	b2da      	uxtb	r2, r3
 800101e:	8979      	ldrh	r1, [r7, #10]
 8001020:	4b49      	ldr	r3, [pc, #292]	; (8001148 <HAL_I2C_Master_Receive+0x1e4>)
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f000 fb59 	bl	80016e0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800102e:	e05c      	b.n	80010ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	6a39      	ldr	r1, [r7, #32]
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f000 fa81 	bl	800153c <I2C_WaitOnRXNEFlagUntilTimeout>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e07c      	b.n	800113e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001060:	3b01      	subs	r3, #1
 8001062:	b29a      	uxth	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800106c:	b29b      	uxth	r3, r3
 800106e:	3b01      	subs	r3, #1
 8001070:	b29a      	uxth	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800107a:	b29b      	uxth	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d034      	beq.n	80010ea <HAL_I2C_Master_Receive+0x186>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001084:	2b00      	cmp	r3, #0
 8001086:	d130      	bne.n	80010ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	6a3b      	ldr	r3, [r7, #32]
 800108e:	2200      	movs	r2, #0
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 f995 	bl	80013c2 <I2C_WaitOnFlagUntilTimeout>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e04d      	b.n	800113e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	2bff      	cmp	r3, #255	; 0xff
 80010aa:	d90e      	bls.n	80010ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	22ff      	movs	r2, #255	; 0xff
 80010b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	8979      	ldrh	r1, [r7, #10]
 80010ba:	2300      	movs	r3, #0
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f000 fb0c 	bl	80016e0 <I2C_TransferConfig>
 80010c8:	e00f      	b.n	80010ea <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	8979      	ldrh	r1, [r7, #10]
 80010dc:	2300      	movs	r3, #0
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 fafb 	bl	80016e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d19d      	bne.n	8001030 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	6a39      	ldr	r1, [r7, #32]
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 f9e2 	bl	80014c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e01a      	b.n	800113e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2220      	movs	r2, #32
 800110e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6859      	ldr	r1, [r3, #4]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_I2C_Master_Receive+0x1e8>)
 800111c:	400b      	ands	r3, r1
 800111e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2220      	movs	r2, #32
 8001124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	e000      	b.n	800113e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800113c:	2302      	movs	r3, #2
  }
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	80002400 	.word	0x80002400
 800114c:	fe00e800 	.word	0xfe00e800

08001150 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af02      	add	r7, sp, #8
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	460b      	mov	r3, r1
 800115e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b20      	cmp	r3, #32
 800116e:	f040 80f1 	bne.w	8001354 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800117c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001180:	d101      	bne.n	8001186 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001182:	2302      	movs	r3, #2
 8001184:	e0e7      	b.n	8001356 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800118c:	2b01      	cmp	r3, #1
 800118e:	d101      	bne.n	8001194 <HAL_I2C_IsDeviceReady+0x44>
 8001190:	2302      	movs	r3, #2
 8001192:	e0e0      	b.n	8001356 <HAL_I2C_IsDeviceReady+0x206>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2224      	movs	r2, #36	; 0x24
 80011a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d107      	bne.n	80011c2 <HAL_I2C_IsDeviceReady+0x72>
 80011b2:	897b      	ldrh	r3, [r7, #10]
 80011b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011c0:	e004      	b.n	80011cc <HAL_I2C_IsDeviceReady+0x7c>
 80011c2:	897b      	ldrh	r3, [r7, #10]
 80011c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011c8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80011d2:	f7ff fabf 	bl	8000754 <HAL_GetTick>
 80011d6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f003 0320 	and.w	r3, r3, #32
 80011e2:	2b20      	cmp	r3, #32
 80011e4:	bf0c      	ite	eq
 80011e6:	2301      	moveq	r3, #1
 80011e8:	2300      	movne	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0310 	and.w	r3, r3, #16
 80011f8:	2b10      	cmp	r3, #16
 80011fa:	bf0c      	ite	eq
 80011fc:	2301      	moveq	r3, #1
 80011fe:	2300      	movne	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001204:	e034      	b.n	8001270 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120c:	d01a      	beq.n	8001244 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800120e:	f7ff faa1 	bl	8000754 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d302      	bcc.n	8001224 <HAL_I2C_IsDeviceReady+0xd4>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10f      	bne.n	8001244 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2220      	movs	r2, #32
 8001228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001230:	f043 0220 	orr.w	r2, r3, #32
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e088      	b.n	8001356 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f003 0320 	and.w	r3, r3, #32
 800124e:	2b20      	cmp	r3, #32
 8001250:	bf0c      	ite	eq
 8001252:	2301      	moveq	r3, #1
 8001254:	2300      	movne	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b10      	cmp	r3, #16
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001270:	7ffb      	ldrb	r3, [r7, #31]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d102      	bne.n	800127c <HAL_I2C_IsDeviceReady+0x12c>
 8001276:	7fbb      	ldrb	r3, [r7, #30]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0c4      	beq.n	8001206 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b10      	cmp	r3, #16
 8001288:	d01a      	beq.n	80012c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2200      	movs	r2, #0
 8001292:	2120      	movs	r1, #32
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f000 f894 	bl	80013c2 <I2C_WaitOnFlagUntilTimeout>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e058      	b.n	8001356 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2220      	movs	r2, #32
 80012aa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2220      	movs	r2, #32
 80012b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	e04a      	b.n	8001356 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	2120      	movs	r1, #32
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f879 	bl	80013c2 <I2C_WaitOnFlagUntilTimeout>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e03d      	b.n	8001356 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2210      	movs	r2, #16
 80012e0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2220      	movs	r2, #32
 80012e8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d118      	bne.n	8001324 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001300:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	2200      	movs	r2, #0
 800130a:	2120      	movs	r1, #32
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f000 f858 	bl	80013c2 <I2C_WaitOnFlagUntilTimeout>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e01c      	b.n	8001356 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2220      	movs	r2, #32
 8001322:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	429a      	cmp	r2, r3
 8001330:	f63f af3b 	bhi.w	80011aa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2220      	movs	r2, #32
 8001338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001340:	f043 0220 	orr.w	r2, r3, #32
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001354:	2302      	movs	r3, #2
  }
}
 8001356:	4618      	mov	r0, r3
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800136c:	b2db      	uxtb	r3, r3
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b02      	cmp	r3, #2
 800138e:	d103      	bne.n	8001398 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2200      	movs	r2, #0
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d007      	beq.n	80013b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	699a      	ldr	r2, [r3, #24]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0201 	orr.w	r2, r2, #1
 80013b4:	619a      	str	r2, [r3, #24]
  }
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4613      	mov	r3, r2
 80013d0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013d2:	e022      	b.n	800141a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013da:	d01e      	beq.n	800141a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013dc:	f7ff f9ba 	bl	8000754 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d302      	bcc.n	80013f2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d113      	bne.n	800141a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f043 0220 	orr.w	r2, r3, #32
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2220      	movs	r2, #32
 8001402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e00f      	b.n	800143a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	699a      	ldr	r2, [r3, #24]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4013      	ands	r3, r2
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	429a      	cmp	r2, r3
 8001428:	bf0c      	ite	eq
 800142a:	2301      	moveq	r3, #1
 800142c:	2300      	movne	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	429a      	cmp	r2, r3
 8001436:	d0cd      	beq.n	80013d4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800144e:	e02c      	b.n	80014aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 f8dd 	bl	8001614 <I2C_IsAcknowledgeFailed>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e02a      	b.n	80014ba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146a:	d01e      	beq.n	80014aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800146c:	f7ff f972 	bl	8000754 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	429a      	cmp	r2, r3
 800147a:	d302      	bcc.n	8001482 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d113      	bne.n	80014aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f043 0220 	orr.w	r2, r3, #32
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2220      	movs	r2, #32
 8001492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e007      	b.n	80014ba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d1cb      	bne.n	8001450 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014ce:	e028      	b.n	8001522 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	68b9      	ldr	r1, [r7, #8]
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 f89d 	bl	8001614 <I2C_IsAcknowledgeFailed>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e026      	b.n	8001532 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014e4:	f7ff f936 	bl	8000754 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d302      	bcc.n	80014fa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d113      	bne.n	8001522 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f043 0220 	orr.w	r2, r3, #32
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2220      	movs	r2, #32
 800150a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e007      	b.n	8001532 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0320 	and.w	r3, r3, #32
 800152c:	2b20      	cmp	r3, #32
 800152e:	d1cf      	bne.n	80014d0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001548:	e055      	b.n	80015f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 f860 	bl	8001614 <I2C_IsAcknowledgeFailed>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e053      	b.n	8001606 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	2b20      	cmp	r3, #32
 800156a:	d129      	bne.n	80015c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b04      	cmp	r3, #4
 8001578:	d105      	bne.n	8001586 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e03f      	b.n	8001606 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2220      	movs	r2, #32
 800158c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800159a:	400b      	ands	r3, r1
 800159c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2220      	movs	r2, #32
 80015a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e022      	b.n	8001606 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015c0:	f7ff f8c8 	bl	8000754 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d302      	bcc.n	80015d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10f      	bne.n	80015f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f043 0220 	orr.w	r2, r3, #32
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2220      	movs	r2, #32
 80015e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e007      	b.n	8001606 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b04      	cmp	r3, #4
 8001602:	d1a2      	bne.n	800154a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	fe00e800 	.word	0xfe00e800

08001614 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b10      	cmp	r3, #16
 800162c:	d151      	bne.n	80016d2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800162e:	e022      	b.n	8001676 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001636:	d01e      	beq.n	8001676 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001638:	f7ff f88c 	bl	8000754 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	429a      	cmp	r2, r3
 8001646:	d302      	bcc.n	800164e <I2C_IsAcknowledgeFailed+0x3a>
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d113      	bne.n	8001676 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f043 0220 	orr.w	r2, r3, #32
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2220      	movs	r2, #32
 800165e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e02e      	b.n	80016d4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	2b20      	cmp	r3, #32
 8001682:	d1d5      	bne.n	8001630 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2210      	movs	r2, #16
 800168a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2220      	movs	r2, #32
 8001692:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f7ff fe70 	bl	800137a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <I2C_IsAcknowledgeFailed+0xc8>)
 80016a6:	400b      	ands	r3, r1
 80016a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f043 0204 	orr.w	r2, r3, #4
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2220      	movs	r2, #32
 80016ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	fe00e800 	.word	0xfe00e800

080016e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	817b      	strh	r3, [r7, #10]
 80016ee:	4613      	mov	r3, r2
 80016f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	0d5b      	lsrs	r3, r3, #21
 80016fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <I2C_TransferConfig+0x58>)
 8001702:	430b      	orrs	r3, r1
 8001704:	43db      	mvns	r3, r3
 8001706:	ea02 0103 	and.w	r1, r2, r3
 800170a:	897b      	ldrh	r3, [r7, #10]
 800170c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001710:	7a7b      	ldrb	r3, [r7, #9]
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	431a      	orrs	r2, r3
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	431a      	orrs	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	03ff63ff 	.word	0x03ff63ff

0800173c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b20      	cmp	r3, #32
 8001750:	d138      	bne.n	80017c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800175c:	2302      	movs	r3, #2
 800175e:	e032      	b.n	80017c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2224      	movs	r2, #36	; 0x24
 800176c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800178e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2220      	movs	r2, #32
 80017b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e000      	b.n	80017c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017c4:	2302      	movs	r3, #2
  }
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b20      	cmp	r3, #32
 80017e6:	d139      	bne.n	800185c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d101      	bne.n	80017f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e033      	b.n	800185e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2224      	movs	r2, #36	; 0x24
 8001802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0201 	bic.w	r2, r2, #1
 8001814:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001824:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2220      	movs	r2, #32
 800184c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	e000      	b.n	800185e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800185c:	2302      	movs	r3, #2
  }
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001870:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800187c:	d102      	bne.n	8001884 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800187e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001882:	e00b      	b.n	800189c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001892:	d102      	bne.n	800189a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001898:	e000      	b.n	800189c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800189a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40007000 	.word	0x40007000

080018ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d141      	bne.n	800193e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ba:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c6:	d131      	bne.n	800192c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018c8:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ce:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d8:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018e0:	4a41      	ldr	r2, [pc, #260]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80018e8:	4b40      	ldr	r3, [pc, #256]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2232      	movs	r2, #50	; 0x32
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	4a3f      	ldr	r2, [pc, #252]	; (80019f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	0c9b      	lsrs	r3, r3, #18
 80018fa:	3301      	adds	r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018fe:	e002      	b.n	8001906 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3b01      	subs	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001906:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001912:	d102      	bne.n	800191a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f2      	bne.n	8001900 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800191a:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001926:	d158      	bne.n	80019da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e057      	b.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800192c:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001932:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001938:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800193c:	e04d      	b.n	80019da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001944:	d141      	bne.n	80019ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001946:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800194e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001952:	d131      	bne.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800195a:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001960:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800196c:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001972:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2232      	movs	r2, #50	; 0x32
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	0c9b      	lsrs	r3, r3, #18
 8001986:	3301      	adds	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800198a:	e002      	b.n	8001992 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3b01      	subs	r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800199e:	d102      	bne.n	80019a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f2      	bne.n	800198c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b2:	d112      	bne.n	80019da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e011      	b.n	80019dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019c8:	e007      	b.n	80019da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019d2:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	40007000 	.word	0x40007000
 80019ec:	20000000 	.word	0x20000000
 80019f0:	431bde83 	.word	0x431bde83

080019f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f000 bc16 	b.w	8002234 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a08:	4ba0      	ldr	r3, [pc, #640]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a12:	4b9e      	ldr	r3, [pc, #632]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80e4 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d007      	beq.n	8001a40 <HAL_RCC_OscConfig+0x4c>
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	f040 808b 	bne.w	8001b4e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	f040 8087 	bne.w	8001b4e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a40:	4b92      	ldr	r3, [pc, #584]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_OscConfig+0x64>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e3ed      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1a      	ldr	r2, [r3, #32]
 8001a5c:	4b8b      	ldr	r3, [pc, #556]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <HAL_RCC_OscConfig+0x7e>
 8001a68:	4b88      	ldr	r3, [pc, #544]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a70:	e005      	b.n	8001a7e <HAL_RCC_OscConfig+0x8a>
 8001a72:	4b86      	ldr	r3, [pc, #536]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d223      	bcs.n	8001aca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 fd90 	bl	80025ac <RCC_SetFlashLatencyFromMSIRange>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e3ce      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a96:	4b7d      	ldr	r3, [pc, #500]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a7c      	ldr	r2, [pc, #496]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b7a      	ldr	r3, [pc, #488]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4977      	ldr	r1, [pc, #476]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab4:	4b75      	ldr	r3, [pc, #468]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	4972      	ldr	r1, [pc, #456]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
 8001ac8:	e025      	b.n	8001b16 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aca:	4b70      	ldr	r3, [pc, #448]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a6f      	ldr	r2, [pc, #444]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	496a      	ldr	r1, [pc, #424]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ae8:	4b68      	ldr	r3, [pc, #416]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	4965      	ldr	r1, [pc, #404]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fd50 	bl	80025ac <RCC_SetFlashLatencyFromMSIRange>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e38e      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b16:	f000 fcbf 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	4b5b      	ldr	r3, [pc, #364]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	4a5a      	ldr	r2, [pc, #360]	; (8001c90 <HAL_RCC_OscConfig+0x29c>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b32:	4a58      	ldr	r2, [pc, #352]	; (8001c94 <HAL_RCC_OscConfig+0x2a0>)
 8001b34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b36:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <HAL_RCC_OscConfig+0x2a4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fdbe 	bl	80006bc <HAL_InitTick>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d052      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	e372      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d032      	beq.n	8001bbc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b56:	4b4d      	ldr	r3, [pc, #308]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a4c      	ldr	r2, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b62:	f7fe fdf7 	bl	8000754 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b6a:	f7fe fdf3 	bl	8000754 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e35b      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b88:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a3f      	ldr	r2, [pc, #252]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	493a      	ldr	r1, [pc, #232]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba6:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	4935      	ldr	r1, [pc, #212]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
 8001bba:	e01a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bbc:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001bc2:	f023 0301 	bic.w	r3, r3, #1
 8001bc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bc8:	f7fe fdc4 	bl	8000754 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd0:	f7fe fdc0 	bl	8000754 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e328      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x1dc>
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d073      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_OscConfig+0x21c>
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2b0c      	cmp	r3, #12
 8001c08:	d10e      	bne.n	8001c28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d10b      	bne.n	8001c28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d063      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d15f      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e305      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d106      	bne.n	8001c40 <HAL_RCC_OscConfig+0x24c>
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e01d      	b.n	8001c7c <HAL_RCC_OscConfig+0x288>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x270>
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0x288>
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_RCC_OscConfig+0x298>)
 8001c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01b      	beq.n	8001cbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7fe fd66 	bl	8000754 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8a:	e010      	b.n	8001cae <HAL_RCC_OscConfig+0x2ba>
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	080031b0 	.word	0x080031b0
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7fe fd5a 	bl	8000754 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e2c2      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cae:	4baf      	ldr	r3, [pc, #700]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x2a8>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7fe fd4a 	bl	8000754 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7fe fd46 	bl	8000754 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e2ae      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd6:	4ba5      	ldr	r3, [pc, #660]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x2d0>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d060      	beq.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_OscConfig+0x310>
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d119      	bne.n	8001d32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d116      	bne.n	8001d32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d04:	4b99      	ldr	r3, [pc, #612]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_OscConfig+0x328>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e28b      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b93      	ldr	r3, [pc, #588]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	061b      	lsls	r3, r3, #24
 8001d2a:	4990      	ldr	r1, [pc, #576]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d30:	e040      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d023      	beq.n	8001d82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3a:	4b8c      	ldr	r3, [pc, #560]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a8b      	ldr	r2, [pc, #556]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7fe fd05 	bl	8000754 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7fe fd01 	bl	8000754 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e269      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d60:	4b82      	ldr	r3, [pc, #520]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b7f      	ldr	r3, [pc, #508]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	497c      	ldr	r1, [pc, #496]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
 8001d80:	e018      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	4b7a      	ldr	r3, [pc, #488]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a79      	ldr	r2, [pc, #484]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7fe fce1 	bl	8000754 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d96:	f7fe fcdd 	bl	8000754 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e245      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da8:	4b70      	ldr	r3, [pc, #448]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d03c      	beq.n	8001e3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01c      	beq.n	8001e02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc8:	4b68      	ldr	r3, [pc, #416]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dce:	4a67      	ldr	r2, [pc, #412]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7fe fcbc 	bl	8000754 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de0:	f7fe fcb8 	bl	8000754 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e220      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001df2:	4b5e      	ldr	r3, [pc, #376]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ef      	beq.n	8001de0 <HAL_RCC_OscConfig+0x3ec>
 8001e00:	e01b      	b.n	8001e3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e02:	4b5a      	ldr	r3, [pc, #360]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e08:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7fe fc9f 	bl	8000754 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1a:	f7fe fc9b 	bl	8000754 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e203      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e2c:	4b4f      	ldr	r3, [pc, #316]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1ef      	bne.n	8001e1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80a6 	beq.w	8001f94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e4c:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	4b44      	ldr	r3, [pc, #272]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	4a43      	ldr	r2, [pc, #268]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e62:	6593      	str	r3, [r2, #88]	; 0x58
 8001e64:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e74:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <HAL_RCC_OscConfig+0x57c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d118      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e80:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <HAL_RCC_OscConfig+0x57c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a3a      	ldr	r2, [pc, #232]	; (8001f70 <HAL_RCC_OscConfig+0x57c>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8c:	f7fe fc62 	bl	8000754 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e94:	f7fe fc5e 	bl	8000754 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1c6      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <HAL_RCC_OscConfig+0x57c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_OscConfig+0x4d8>
 8001eba:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	4a2a      	ldr	r2, [pc, #168]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eca:	e024      	b.n	8001f16 <HAL_RCC_OscConfig+0x522>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d110      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x502>
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	4a24      	ldr	r2, [pc, #144]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eea:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef4:	e00f      	b.n	8001f16 <HAL_RCC_OscConfig+0x522>
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001f0e:	f023 0304 	bic.w	r3, r3, #4
 8001f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d016      	beq.n	8001f4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7fe fc19 	bl	8000754 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe fc15 	bl	8000754 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e17b      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_OscConfig+0x578>)
 8001f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0ed      	beq.n	8001f26 <HAL_RCC_OscConfig+0x532>
 8001f4a:	e01a      	b.n	8001f82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7fe fc02 	bl	8000754 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f52:	e00f      	b.n	8001f74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7fe fbfe 	bl	8000754 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d906      	bls.n	8001f74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e164      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f74:	4ba8      	ldr	r3, [pc, #672]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1e8      	bne.n	8001f54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f82:	7ffb      	ldrb	r3, [r7, #31]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f88:	4ba3      	ldr	r3, [pc, #652]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	4aa2      	ldr	r2, [pc, #648]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8001f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d03c      	beq.n	800201a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01c      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fa8:	4b9b      	ldr	r3, [pc, #620]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8001faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fae:	4a9a      	ldr	r2, [pc, #616]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb8:	f7fe fbcc 	bl	8000754 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fc0:	f7fe fbc8 	bl	8000754 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e130      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fd2:	4b91      	ldr	r3, [pc, #580]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8001fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ef      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x5cc>
 8001fe0:	e01b      	b.n	800201a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fe2:	4b8d      	ldr	r3, [pc, #564]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8001fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fe8:	4a8b      	ldr	r2, [pc, #556]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff2:	f7fe fbaf 	bl	8000754 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ffa:	f7fe fbab 	bl	8000754 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e113      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800200c:	4b82      	ldr	r3, [pc, #520]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 800200e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1ef      	bne.n	8001ffa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8107 	beq.w	8002232 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	2b02      	cmp	r3, #2
 800202a:	f040 80cb 	bne.w	80021c4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800202e:	4b7a      	ldr	r3, [pc, #488]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 0203 	and.w	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	429a      	cmp	r2, r3
 8002040:	d12c      	bne.n	800209c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	3b01      	subs	r3, #1
 800204e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002050:	429a      	cmp	r2, r3
 8002052:	d123      	bne.n	800209c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d11b      	bne.n	800209c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d113      	bne.n	800209c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	085b      	lsrs	r3, r3, #1
 8002080:	3b01      	subs	r3, #1
 8002082:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d109      	bne.n	800209c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	3b01      	subs	r3, #1
 8002096:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d06d      	beq.n	8002178 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b0c      	cmp	r3, #12
 80020a0:	d068      	beq.n	8002174 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020a2:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020ae:	4b5a      	ldr	r3, [pc, #360]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e0ba      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020be:	4b56      	ldr	r3, [pc, #344]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a55      	ldr	r2, [pc, #340]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80020c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020ca:	f7fe fb43 	bl	8000754 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d2:	f7fe fb3f 	bl	8000754 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0a7      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e4:	4b4c      	ldr	r3, [pc, #304]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f0:	4b49      	ldr	r3, [pc, #292]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	4b49      	ldr	r3, [pc, #292]	; (800221c <HAL_RCC_OscConfig+0x828>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002100:	3a01      	subs	r2, #1
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	4311      	orrs	r1, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800210a:	0212      	lsls	r2, r2, #8
 800210c:	4311      	orrs	r1, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002112:	0852      	lsrs	r2, r2, #1
 8002114:	3a01      	subs	r2, #1
 8002116:	0552      	lsls	r2, r2, #21
 8002118:	4311      	orrs	r1, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800211e:	0852      	lsrs	r2, r2, #1
 8002120:	3a01      	subs	r2, #1
 8002122:	0652      	lsls	r2, r2, #25
 8002124:	4311      	orrs	r1, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800212a:	06d2      	lsls	r2, r2, #27
 800212c:	430a      	orrs	r2, r1
 800212e:	493a      	ldr	r1, [pc, #232]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8002130:	4313      	orrs	r3, r2
 8002132:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002134:	4b38      	ldr	r3, [pc, #224]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a37      	ldr	r2, [pc, #220]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 800213a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800213e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002140:	4b35      	ldr	r3, [pc, #212]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a34      	ldr	r2, [pc, #208]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8002146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800214c:	f7fe fb02 	bl	8000754 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7fe fafe 	bl	8000754 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e066      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002172:	e05e      	b.n	8002232 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e05d      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002178:	4b27      	ldr	r3, [pc, #156]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d156      	bne.n	8002232 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002184:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a23      	ldr	r2, [pc, #140]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002190:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a20      	ldr	r2, [pc, #128]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800219c:	f7fe fada 	bl	8000754 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe fad6 	bl	8000754 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e03e      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x7b0>
 80021c2:	e036      	b.n	8002232 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d031      	beq.n	800222e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80021d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	4a0c      	ldr	r2, [pc, #48]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80021e8:	f023 0303 	bic.w	r3, r3, #3
 80021ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	4a09      	ldr	r2, [pc, #36]	; (8002218 <HAL_RCC_OscConfig+0x824>)
 80021f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7fe faa9 	bl	8000754 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002204:	e00c      	b.n	8002220 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe faa5 	bl	8000754 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d905      	bls.n	8002220 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e00d      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
 8002218:	40021000 	.word	0x40021000
 800221c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_OscConfig+0x848>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ec      	bne.n	8002206 <HAL_RCC_OscConfig+0x812>
 800222c:	e001      	b.n	8002232 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000

08002240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e10f      	b.n	8002478 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002258:	4b89      	ldr	r3, [pc, #548]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d910      	bls.n	8002288 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b86      	ldr	r3, [pc, #536]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 020f 	bic.w	r2, r3, #15
 800226e:	4984      	ldr	r1, [pc, #528]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b82      	ldr	r3, [pc, #520]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0f7      	b.n	8002478 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8089 	beq.w	80023a8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b03      	cmp	r3, #3
 800229c:	d133      	bne.n	8002306 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229e:	4b79      	ldr	r3, [pc, #484]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0e4      	b.n	8002478 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80022ae:	f000 f9d7 	bl	8002660 <RCC_GetSysClockFreqFromPLLSource>
 80022b2:	4602      	mov	r2, r0
 80022b4:	4b74      	ldr	r3, [pc, #464]	; (8002488 <HAL_RCC_ClockConfig+0x248>)
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d955      	bls.n	8002366 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80022ba:	4b72      	ldr	r3, [pc, #456]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10a      	bne.n	80022dc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022c6:	4b6f      	ldr	r3, [pc, #444]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ce:	4a6d      	ldr	r2, [pc, #436]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80022d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e044      	b.n	8002366 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d03e      	beq.n	8002366 <HAL_RCC_ClockConfig+0x126>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d13a      	bne.n	8002366 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022f0:	4b64      	ldr	r3, [pc, #400]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022f8:	4a62      	ldr	r2, [pc, #392]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80022fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022fe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e02f      	b.n	8002366 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230e:	4b5d      	ldr	r3, [pc, #372]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d115      	bne.n	8002346 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0ac      	b.n	8002478 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d107      	bne.n	8002336 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002326:	4b57      	ldr	r3, [pc, #348]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e0a0      	b.n	8002478 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002336:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e098      	b.n	8002478 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002346:	f000 f8a7 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 800234a:	4602      	mov	r2, r0
 800234c:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <HAL_RCC_ClockConfig+0x248>)
 800234e:	429a      	cmp	r2, r3
 8002350:	d909      	bls.n	8002366 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002352:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800235a:	4a4a      	ldr	r2, [pc, #296]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 800235c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002360:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f023 0203 	bic.w	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4944      	ldr	r1, [pc, #272]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002374:	4313      	orrs	r3, r2
 8002376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002378:	f7fe f9ec 	bl	8000754 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	e00a      	b.n	8002396 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002380:	f7fe f9e8 	bl	8000754 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e070      	b.n	8002478 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 020c 	and.w	r2, r3, #12
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d1eb      	bne.n	8002380 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b4:	4b33      	ldr	r3, [pc, #204]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4930      	ldr	r1, [pc, #192]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
 80023c6:	e008      	b.n	80023da <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b80      	cmp	r3, #128	; 0x80
 80023cc:	d105      	bne.n	80023da <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023ce:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	4a2c      	ldr	r2, [pc, #176]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 80023d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d210      	bcs.n	800240a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 020f 	bic.w	r2, r3, #15
 80023f0:	4923      	ldr	r1, [pc, #140]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <HAL_RCC_ClockConfig+0x240>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e036      	b.n	8002478 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	4918      	ldr	r1, [pc, #96]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4910      	ldr	r1, [pc, #64]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002448:	f000 f826 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 800244c:	4601      	mov	r1, r0
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <HAL_RCC_ClockConfig+0x244>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	4a0c      	ldr	r2, [pc, #48]	; (800248c <HAL_RCC_ClockConfig+0x24c>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	fa21 f303 	lsr.w	r3, r1, r3
 8002464:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <HAL_RCC_ClockConfig+0x250>)
 8002466:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_RCC_ClockConfig+0x254>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f925 	bl	80006bc <HAL_InitTick>
 8002472:	4603      	mov	r3, r0
 8002474:	73fb      	strb	r3, [r7, #15]

  return status;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40022000 	.word	0x40022000
 8002484:	40021000 	.word	0x40021000
 8002488:	04c4b400 	.word	0x04c4b400
 800248c:	080031b0 	.word	0x080031b0
 8002490:	20000000 	.word	0x20000000
 8002494:	20000004 	.word	0x20000004

08002498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a6:	4b3d      	ldr	r3, [pc, #244]	; (800259c <HAL_RCC_GetSysClockFreq+0x104>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b0:	4b3a      	ldr	r3, [pc, #232]	; (800259c <HAL_RCC_GetSysClockFreq+0x104>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x34>
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	d121      	bne.n	800250a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d11e      	bne.n	800250a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024cc:	4b33      	ldr	r3, [pc, #204]	; (800259c <HAL_RCC_GetSysClockFreq+0x104>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024d8:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCC_GetSysClockFreq+0x104>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e005      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024e8:	4b2c      	ldr	r3, [pc, #176]	; (800259c <HAL_RCC_GetSysClockFreq+0x104>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024f4:	4a2a      	ldr	r2, [pc, #168]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10d      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d102      	bne.n	8002516 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	e004      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d101      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800251c:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800251e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d133      	bne.n	800258e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_RCC_GetSysClockFreq+0x104>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d002      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0xa4>
 8002536:	2b03      	cmp	r3, #3
 8002538:	d003      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0xaa>
 800253a:	e005      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800253e:	617b      	str	r3, [r7, #20]
      break;
 8002540:	e005      	b.n	800254e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002544:	617b      	str	r3, [r7, #20]
      break;
 8002546:	e002      	b.n	800254e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	617b      	str	r3, [r7, #20]
      break;
 800254c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800254e:	4b13      	ldr	r3, [pc, #76]	; (800259c <HAL_RCC_GetSysClockFreq+0x104>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	3301      	adds	r3, #1
 800255a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <HAL_RCC_GetSysClockFreq+0x104>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	fb02 f203 	mul.w	r2, r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002572:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCC_GetSysClockFreq+0x104>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0e5b      	lsrs	r3, r3, #25
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	3301      	adds	r3, #1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800258e:	69bb      	ldr	r3, [r7, #24]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3724      	adds	r7, #36	; 0x24
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	40021000 	.word	0x40021000
 80025a0:	080031c0 	.word	0x080031c0
 80025a4:	00f42400 	.word	0x00f42400
 80025a8:	007a1200 	.word	0x007a1200

080025ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025c4:	f7ff f952 	bl	800186c <HAL_PWREx_GetVoltageRange>
 80025c8:	6178      	str	r0, [r7, #20]
 80025ca:	e014      	b.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025cc:	4b22      	ldr	r3, [pc, #136]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	4a21      	ldr	r2, [pc, #132]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d6:	6593      	str	r3, [r2, #88]	; 0x58
 80025d8:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025e4:	f7ff f942 	bl	800186c <HAL_PWREx_GetVoltageRange>
 80025e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025fc:	d10b      	bne.n	8002616 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b80      	cmp	r3, #128	; 0x80
 8002602:	d913      	bls.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2ba0      	cmp	r3, #160	; 0xa0
 8002608:	d902      	bls.n	8002610 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800260a:	2302      	movs	r3, #2
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	e00d      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002610:	2301      	movs	r3, #1
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	e00a      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b7f      	cmp	r3, #127	; 0x7f
 800261a:	d902      	bls.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800261c:	2302      	movs	r3, #2
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e004      	b.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b70      	cmp	r3, #112	; 0x70
 8002626:	d101      	bne.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002628:	2301      	movs	r3, #1
 800262a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 020f 	bic.w	r2, r3, #15
 8002634:	4909      	ldr	r1, [pc, #36]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800263c:	4b07      	ldr	r3, [pc, #28]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	40022000 	.word	0x40022000

08002660 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800266a:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d118      	bne.n	80026a8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002676:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002682:	4b27      	ldr	r3, [pc, #156]	; (8002720 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	e005      	b.n	800269e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800269e:	4a21      	ldr	r2, [pc, #132]	; (8002724 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d002      	beq.n	80026be <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d003      	beq.n	80026c4 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80026bc:	e005      	b.n	80026ca <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80026c0:	613b      	str	r3, [r7, #16]
    break;
 80026c2:	e005      	b.n	80026d0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80026c6:	613b      	str	r3, [r7, #16]
    break;
 80026c8:	e002      	b.n	80026d0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	613b      	str	r3, [r7, #16]
    break;
 80026ce:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026d0:	4b13      	ldr	r3, [pc, #76]	; (8002720 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3301      	adds	r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	fb02 f203 	mul.w	r2, r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	0e5b      	lsrs	r3, r3, #25
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	3301      	adds	r3, #1
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002710:	683b      	ldr	r3, [r7, #0]
}
 8002712:	4618      	mov	r0, r3
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	080031c0 	.word	0x080031c0
 8002728:	00f42400 	.word	0x00f42400
 800272c:	007a1200 	.word	0x007a1200

08002730 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002738:	2300      	movs	r3, #0
 800273a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800273c:	2300      	movs	r3, #0
 800273e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002748:	2b00      	cmp	r3, #0
 800274a:	d03d      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d00b      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d804      	bhi.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00e      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800275c:	2b20      	cmp	r3, #32
 800275e:	d015      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002760:	e01d      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002762:	2b60      	cmp	r3, #96	; 0x60
 8002764:	d01e      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002766:	2b80      	cmp	r3, #128	; 0x80
 8002768:	d01c      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800276a:	e018      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800276c:	4b86      	ldr	r3, [pc, #536]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a85      	ldr	r2, [pc, #532]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002776:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002778:	e015      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fafd 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002786:	4603      	mov	r3, r0
 8002788:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800278a:	e00c      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3320      	adds	r3, #32
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fbe4 	bl	8002f60 <RCCEx_PLLSAI2_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800279c:	e003      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	74fb      	strb	r3, [r7, #19]
      break;
 80027a2:	e000      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80027a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10b      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ac:	4b76      	ldr	r3, [pc, #472]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027b2:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ba:	4973      	ldr	r1, [pc, #460]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80027c2:	e001      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d042      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027dc:	d00f      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0xce>
 80027de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e2:	d805      	bhi.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d011      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80027e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ec:	d017      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xee>
 80027ee:	e01f      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80027f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027f4:	d01f      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fa:	d01c      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027fc:	e018      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027fe:	4b62      	ldr	r3, [pc, #392]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	4a61      	ldr	r2, [pc, #388]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002808:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800280a:	e015      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fab4 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800281c:	e00c      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3320      	adds	r3, #32
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fb9b 	bl	8002f60 <RCCEx_PLLSAI2_Config>
 800282a:	4603      	mov	r3, r0
 800282c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800282e:	e003      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	74fb      	strb	r3, [r7, #19]
      break;
 8002834:	e000      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8002836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002838:	7cfb      	ldrb	r3, [r7, #19]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10b      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800283e:	4b52      	ldr	r3, [pc, #328]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002840:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	494e      	ldr	r1, [pc, #312]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002854:	e001      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 809f 	beq.w	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002868:	2300      	movs	r3, #0
 800286a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800286c:	4b46      	ldr	r3, [pc, #280]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800287c:	2300      	movs	r3, #0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00d      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	4b41      	ldr	r3, [pc, #260]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	4a40      	ldr	r2, [pc, #256]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6593      	str	r3, [r2, #88]	; 0x58
 800288e:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a3a      	ldr	r2, [pc, #232]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028aa:	f7fd ff53 	bl	8000754 <HAL_GetTick>
 80028ae:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028b0:	e009      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b2:	f7fd ff4f 	bl	8000754 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d902      	bls.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	74fb      	strb	r3, [r7, #19]
        break;
 80028c4:	e005      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028c6:	4b31      	ldr	r3, [pc, #196]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0ef      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80028d2:	7cfb      	ldrb	r3, [r7, #19]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d15b      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028d8:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01f      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d019      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002900:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002908:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800290a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002918:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800291a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002922:	4a19      	ldr	r2, [pc, #100]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d016      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fd ff0e 	bl	8000754 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293a:	e00b      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fd ff0a 	bl	8000754 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d902      	bls.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	74fb      	strb	r3, [r7, #19]
            break;
 8002952:	e006      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0ec      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8002962:	7cfb      	ldrb	r3, [r7, #19]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10c      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002968:	4b07      	ldr	r3, [pc, #28]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002978:	4903      	ldr	r1, [pc, #12]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002980:	e008      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	74bb      	strb	r3, [r7, #18]
 8002986:	e005      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002988:	40021000 	.word	0x40021000
 800298c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002990:	7cfb      	ldrb	r3, [r7, #19]
 8002992:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002994:	7c7b      	ldrb	r3, [r7, #17]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d105      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299a:	4ba0      	ldr	r3, [pc, #640]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299e:	4a9f      	ldr	r2, [pc, #636]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029b2:	4b9a      	ldr	r3, [pc, #616]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f023 0203 	bic.w	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c0:	4996      	ldr	r1, [pc, #600]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029d4:	4b91      	ldr	r3, [pc, #580]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f023 020c 	bic.w	r2, r3, #12
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	498e      	ldr	r1, [pc, #568]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029f6:	4b89      	ldr	r3, [pc, #548]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	4985      	ldr	r1, [pc, #532]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a18:	4b80      	ldr	r3, [pc, #512]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a26:	497d      	ldr	r1, [pc, #500]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a3a:	4b78      	ldr	r3, [pc, #480]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a48:	4974      	ldr	r1, [pc, #464]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a5c:	4b6f      	ldr	r3, [pc, #444]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	496c      	ldr	r1, [pc, #432]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a7e:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a8c:	4963      	ldr	r1, [pc, #396]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aa0:	4b5e      	ldr	r3, [pc, #376]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aae:	495b      	ldr	r1, [pc, #364]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ac2:	4b56      	ldr	r3, [pc, #344]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	4952      	ldr	r1, [pc, #328]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ae4:	4b4d      	ldr	r3, [pc, #308]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af2:	494a      	ldr	r1, [pc, #296]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b06:	4b45      	ldr	r3, [pc, #276]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	4941      	ldr	r1, [pc, #260]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b28:	4b3c      	ldr	r3, [pc, #240]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	4939      	ldr	r1, [pc, #228]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d028      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b4a:	4b34      	ldr	r3, [pc, #208]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b58:	4930      	ldr	r1, [pc, #192]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b68:	d106      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b6a:	4b2c      	ldr	r3, [pc, #176]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	4a2b      	ldr	r2, [pc, #172]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b74:	60d3      	str	r3, [r2, #12]
 8002b76:	e011      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2101      	movs	r1, #1
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 f8f9 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b92:	7cfb      	ldrb	r3, [r7, #19]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
 8002b9a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d04d      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb0:	d108      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002bb2:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bbe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002bc2:	e012      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bca:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bd0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be2:	490e      	ldr	r1, [pc, #56]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bfe:	60d3      	str	r3, [r2, #12]
 8002c00:	e020      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c0a:	d109      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4a02      	ldr	r2, [pc, #8]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c16:	60d3      	str	r3, [r2, #12]
 8002c18:	e014      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 f8a5 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d028      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c50:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c5e:	4947      	ldr	r1, [pc, #284]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c6e:	d106      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c70:	4b42      	ldr	r3, [pc, #264]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a41      	ldr	r2, [pc, #260]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c7a:	60d3      	str	r3, [r2, #12]
 8002c7c:	e011      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c86:	d10c      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f876 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c98:	7cfb      	ldrb	r3, [r7, #19]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8002c9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ca0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01e      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cae:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cbe:	492f      	ldr	r1, [pc, #188]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ccc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 f851 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ce2:	7cfb      	ldrb	r3, [r7, #19]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8002ce8:	7cfb      	ldrb	r3, [r7, #19]
 8002cea:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cf8:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cfe:	f023 0204 	bic.w	r2, r3, #4
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d08:	491c      	ldr	r1, [pc, #112]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d22:	f023 0218 	bic.w	r2, r3, #24
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	4913      	ldr	r1, [pc, #76]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d017      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d50:	490a      	ldr	r1, [pc, #40]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d62:	d105      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d70:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000

08002d80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d8e:	4b70      	ldr	r3, [pc, #448]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00e      	beq.n	8002db8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d9a:	4b6d      	ldr	r3, [pc, #436]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0203 	and.w	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d103      	bne.n	8002db2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
       ||
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d13f      	bne.n	8002e32 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
 8002db6:	e03c      	b.n	8002e32 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d00c      	beq.n	8002dda <RCCEx_PLLSAI1_Config+0x5a>
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d013      	beq.n	8002dec <RCCEx_PLLSAI1_Config+0x6c>
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d120      	bne.n	8002e0a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dc8:	4b61      	ldr	r3, [pc, #388]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d11d      	bne.n	8002e10 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd8:	e01a      	b.n	8002e10 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dda:	4b5d      	ldr	r3, [pc, #372]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dea:	e013      	b.n	8002e14 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dec:	4b58      	ldr	r3, [pc, #352]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10f      	bne.n	8002e18 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002df8:	4b55      	ldr	r3, [pc, #340]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e08:	e006      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0e:	e004      	b.n	8002e1a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002e10:	bf00      	nop
 8002e12:	e002      	b.n	8002e1a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002e14:	bf00      	nop
 8002e16:	e000      	b.n	8002e1a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002e18:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d108      	bne.n	8002e32 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002e20:	4b4b      	ldr	r3, [pc, #300]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f023 0203 	bic.w	r2, r3, #3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4948      	ldr	r1, [pc, #288]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f040 8086 	bne.w	8002f46 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e3a:	4b45      	ldr	r3, [pc, #276]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a44      	ldr	r2, [pc, #272]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e46:	f7fd fc85 	bl	8000754 <HAL_GetTick>
 8002e4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e4c:	e009      	b.n	8002e62 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e4e:	f7fd fc81 	bl	8000754 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d902      	bls.n	8002e62 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	73fb      	strb	r3, [r7, #15]
        break;
 8002e60:	e005      	b.n	8002e6e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e62:	4b3b      	ldr	r3, [pc, #236]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1ef      	bne.n	8002e4e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d168      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d113      	bne.n	8002ea2 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e7a:	4b35      	ldr	r3, [pc, #212]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	4b35      	ldr	r3, [pc, #212]	; (8002f54 <RCCEx_PLLSAI1_Config+0x1d4>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6892      	ldr	r2, [r2, #8]
 8002e86:	0211      	lsls	r1, r2, #8
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	68d2      	ldr	r2, [r2, #12]
 8002e8c:	06d2      	lsls	r2, r2, #27
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6852      	ldr	r2, [r2, #4]
 8002e94:	3a01      	subs	r2, #1
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	492d      	ldr	r1, [pc, #180]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	610b      	str	r3, [r1, #16]
 8002ea0:	e02d      	b.n	8002efe <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d115      	bne.n	8002ed4 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ea8:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6892      	ldr	r2, [r2, #8]
 8002eb4:	0211      	lsls	r1, r2, #8
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6912      	ldr	r2, [r2, #16]
 8002eba:	0852      	lsrs	r2, r2, #1
 8002ebc:	3a01      	subs	r2, #1
 8002ebe:	0552      	lsls	r2, r2, #21
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6852      	ldr	r2, [r2, #4]
 8002ec6:	3a01      	subs	r2, #1
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	4920      	ldr	r1, [pc, #128]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	610b      	str	r3, [r1, #16]
 8002ed2:	e014      	b.n	8002efe <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6892      	ldr	r2, [r2, #8]
 8002ee0:	0211      	lsls	r1, r2, #8
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6952      	ldr	r2, [r2, #20]
 8002ee6:	0852      	lsrs	r2, r2, #1
 8002ee8:	3a01      	subs	r2, #1
 8002eea:	0652      	lsls	r2, r2, #25
 8002eec:	4311      	orrs	r1, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6852      	ldr	r2, [r2, #4]
 8002ef2:	3a01      	subs	r2, #1
 8002ef4:	0112      	lsls	r2, r2, #4
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	4915      	ldr	r1, [pc, #84]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002efe:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0a:	f7fd fc23 	bl	8000754 <HAL_GetTick>
 8002f0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f10:	e009      	b.n	8002f26 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f12:	f7fd fc1f 	bl	8000754 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d902      	bls.n	8002f26 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	73fb      	strb	r3, [r7, #15]
          break;
 8002f24:	e005      	b.n	8002f32 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0ef      	beq.n	8002f12 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4903      	ldr	r1, [pc, #12]	; (8002f50 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	07ff800f 	.word	0x07ff800f
 8002f58:	ff9f800f 	.word	0xff9f800f
 8002f5c:	f9ff800f 	.word	0xf9ff800f

08002f60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f6e:	4b70      	ldr	r3, [pc, #448]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00e      	beq.n	8002f98 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0203 	and.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d103      	bne.n	8002f92 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d13f      	bne.n	8003012 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	e03c      	b.n	8003012 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d00c      	beq.n	8002fba <RCCEx_PLLSAI2_Config+0x5a>
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d013      	beq.n	8002fcc <RCCEx_PLLSAI2_Config+0x6c>
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d120      	bne.n	8002fea <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fa8:	4b61      	ldr	r3, [pc, #388]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11d      	bne.n	8002ff0 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb8:	e01a      	b.n	8002ff0 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fba:	4b5d      	ldr	r3, [pc, #372]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d116      	bne.n	8002ff4 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fca:	e013      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fcc:	4b58      	ldr	r3, [pc, #352]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10f      	bne.n	8002ff8 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fd8:	4b55      	ldr	r3, [pc, #340]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fe8:	e006      	b.n	8002ff8 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
      break;
 8002fee:	e004      	b.n	8002ffa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002ff0:	bf00      	nop
 8002ff2:	e002      	b.n	8002ffa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002ff4:	bf00      	nop
 8002ff6:	e000      	b.n	8002ffa <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002ff8:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d108      	bne.n	8003012 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003000:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f023 0203 	bic.w	r2, r3, #3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4948      	ldr	r1, [pc, #288]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 800300e:	4313      	orrs	r3, r2
 8003010:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f040 8086 	bne.w	8003126 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800301a:	4b45      	ldr	r3, [pc, #276]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a44      	ldr	r2, [pc, #272]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003026:	f7fd fb95 	bl	8000754 <HAL_GetTick>
 800302a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800302c:	e009      	b.n	8003042 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800302e:	f7fd fb91 	bl	8000754 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d902      	bls.n	8003042 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	73fb      	strb	r3, [r7, #15]
        break;
 8003040:	e005      	b.n	800304e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003042:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1ef      	bne.n	800302e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d168      	bne.n	8003126 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d113      	bne.n	8003082 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800305a:	4b35      	ldr	r3, [pc, #212]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	4b35      	ldr	r3, [pc, #212]	; (8003134 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003060:	4013      	ands	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6892      	ldr	r2, [r2, #8]
 8003066:	0211      	lsls	r1, r2, #8
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68d2      	ldr	r2, [r2, #12]
 800306c:	06d2      	lsls	r2, r2, #27
 800306e:	4311      	orrs	r1, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6852      	ldr	r2, [r2, #4]
 8003074:	3a01      	subs	r2, #1
 8003076:	0112      	lsls	r2, r2, #4
 8003078:	430a      	orrs	r2, r1
 800307a:	492d      	ldr	r1, [pc, #180]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 800307c:	4313      	orrs	r3, r2
 800307e:	614b      	str	r3, [r1, #20]
 8003080:	e02d      	b.n	80030de <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d115      	bne.n	80030b4 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003088:	4b29      	ldr	r3, [pc, #164]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	4b2a      	ldr	r3, [pc, #168]	; (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 800308e:	4013      	ands	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6892      	ldr	r2, [r2, #8]
 8003094:	0211      	lsls	r1, r2, #8
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6912      	ldr	r2, [r2, #16]
 800309a:	0852      	lsrs	r2, r2, #1
 800309c:	3a01      	subs	r2, #1
 800309e:	0552      	lsls	r2, r2, #21
 80030a0:	4311      	orrs	r1, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6852      	ldr	r2, [r2, #4]
 80030a6:	3a01      	subs	r2, #1
 80030a8:	0112      	lsls	r2, r2, #4
 80030aa:	430a      	orrs	r2, r1
 80030ac:	4920      	ldr	r1, [pc, #128]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	614b      	str	r3, [r1, #20]
 80030b2:	e014      	b.n	80030de <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030b4:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	4b20      	ldr	r3, [pc, #128]	; (800313c <RCCEx_PLLSAI2_Config+0x1dc>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6892      	ldr	r2, [r2, #8]
 80030c0:	0211      	lsls	r1, r2, #8
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6952      	ldr	r2, [r2, #20]
 80030c6:	0852      	lsrs	r2, r2, #1
 80030c8:	3a01      	subs	r2, #1
 80030ca:	0652      	lsls	r2, r2, #25
 80030cc:	4311      	orrs	r1, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6852      	ldr	r2, [r2, #4]
 80030d2:	3a01      	subs	r2, #1
 80030d4:	0112      	lsls	r2, r2, #4
 80030d6:	430a      	orrs	r2, r1
 80030d8:	4915      	ldr	r1, [pc, #84]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030de:	4b14      	ldr	r3, [pc, #80]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a13      	ldr	r2, [pc, #76]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ea:	f7fd fb33 	bl	8000754 <HAL_GetTick>
 80030ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030f0:	e009      	b.n	8003106 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030f2:	f7fd fb2f 	bl	8000754 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d902      	bls.n	8003106 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	73fb      	strb	r3, [r7, #15]
          break;
 8003104:	e005      	b.n	8003112 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0ef      	beq.n	80030f2 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	4903      	ldr	r1, [pc, #12]	; (8003130 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003122:	4313      	orrs	r3, r2
 8003124:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	07ff800f 	.word	0x07ff800f
 8003138:	ff9f800f 	.word	0xff9f800f
 800313c:	f9ff800f 	.word	0xf9ff800f

08003140 <__libc_init_array>:
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	4e0d      	ldr	r6, [pc, #52]	; (8003178 <__libc_init_array+0x38>)
 8003144:	4c0d      	ldr	r4, [pc, #52]	; (800317c <__libc_init_array+0x3c>)
 8003146:	1ba4      	subs	r4, r4, r6
 8003148:	10a4      	asrs	r4, r4, #2
 800314a:	2500      	movs	r5, #0
 800314c:	42a5      	cmp	r5, r4
 800314e:	d109      	bne.n	8003164 <__libc_init_array+0x24>
 8003150:	4e0b      	ldr	r6, [pc, #44]	; (8003180 <__libc_init_array+0x40>)
 8003152:	4c0c      	ldr	r4, [pc, #48]	; (8003184 <__libc_init_array+0x44>)
 8003154:	f000 f820 	bl	8003198 <_init>
 8003158:	1ba4      	subs	r4, r4, r6
 800315a:	10a4      	asrs	r4, r4, #2
 800315c:	2500      	movs	r5, #0
 800315e:	42a5      	cmp	r5, r4
 8003160:	d105      	bne.n	800316e <__libc_init_array+0x2e>
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003168:	4798      	blx	r3
 800316a:	3501      	adds	r5, #1
 800316c:	e7ee      	b.n	800314c <__libc_init_array+0xc>
 800316e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003172:	4798      	blx	r3
 8003174:	3501      	adds	r5, #1
 8003176:	e7f2      	b.n	800315e <__libc_init_array+0x1e>
 8003178:	080031f0 	.word	0x080031f0
 800317c:	080031f0 	.word	0x080031f0
 8003180:	080031f0 	.word	0x080031f0
 8003184:	080031f4 	.word	0x080031f4

08003188 <memset>:
 8003188:	4402      	add	r2, r0
 800318a:	4603      	mov	r3, r0
 800318c:	4293      	cmp	r3, r2
 800318e:	d100      	bne.n	8003192 <memset+0xa>
 8003190:	4770      	bx	lr
 8003192:	f803 1b01 	strb.w	r1, [r3], #1
 8003196:	e7f9      	b.n	800318c <memset+0x4>

08003198 <_init>:
 8003198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319a:	bf00      	nop
 800319c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319e:	bc08      	pop	{r3}
 80031a0:	469e      	mov	lr, r3
 80031a2:	4770      	bx	lr

080031a4 <_fini>:
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a6:	bf00      	nop
 80031a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031aa:	bc08      	pop	{r3}
 80031ac:	469e      	mov	lr, r3
 80031ae:	4770      	bx	lr
