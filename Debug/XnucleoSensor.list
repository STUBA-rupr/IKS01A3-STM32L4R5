
XnucleoSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035e4  080035e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080035e4  080035e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035e4  080035e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e8  080035e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080035f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080035f8  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a656  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000171f  00000000  00000000  0002a692  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a8  00000000  00000000  0002bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  0002c760  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028062  00000000  00000000  0002d040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a8c  00000000  00000000  000550a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f58ec  00000000  00000000  0005db2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015341a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002688  00000000  00000000  00153498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800358c 	.word	0x0800358c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800358c 	.word	0x0800358c

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b08e      	sub	sp, #56	; 0x38
 8000200:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fac2 	bl	800078a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f8e5 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f999 	bl	8000540 <MX_GPIO_Init>
  MX_I2C1_Init();
 800020e:	f000 f957 	bl	80004c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buf[2]={0,1};
 8000212:	2300      	movs	r3, #0
 8000214:	723b      	strb	r3, [r7, #8]
 8000216:	2301      	movs	r3, #1
 8000218:	727b      	strb	r3, [r7, #9]
  uint16_t temperature, humidity;
  uint8_t temperature_low;
  const uint8_t TMP102_ADDR = 0x95 ;
 800021a:	2395      	movs	r3, #149	; 0x95
 800021c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t err;

  //HAL_I2C_IsDeviceReady(hi2c, DevAddress, Trials, Timeout)
  //hi2c1->Instance->CR1;

  ret = HAL_I2C_GetState(&hi2c1);
 8000220:	486a      	ldr	r0, [pc, #424]	; (80003cc <main+0x1d0>)
 8000222:	f001 fa36 	bl	8001692 <HAL_I2C_GetState>
 8000226:	4603      	mov	r3, r0
 8000228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if(HAL_I2C_IsDeviceReady(&hi2c1, TMP102_ADDR, 3, 3000)!=HAL_OK)
 800022c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000230:	b299      	uxth	r1, r3
 8000232:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000236:	2203      	movs	r2, #3
 8000238:	4864      	ldr	r0, [pc, #400]	; (80003cc <main+0x1d0>)
 800023a:	f001 f923 	bl	8001484 <HAL_I2C_IsDeviceReady>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d003      	beq.n	800024c <main+0x50>
  {
	  err = HAL_I2C_GetError(&hi2c1);
 8000244:	4861      	ldr	r0, [pc, #388]	; (80003cc <main+0x1d0>)
 8000246:	f001 fa32 	bl	80016ae <HAL_I2C_GetError>
 800024a:	6238      	str	r0, [r7, #32]
  }

	// temperature
	buf[0] = 0x0; // hi bit
 800024c:	2300      	movs	r3, #0
 800024e:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, 3000);
 8000250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000254:	b299      	uxth	r1, r3
 8000256:	f107 0208 	add.w	r2, r7, #8
 800025a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2301      	movs	r3, #1
 8000262:	485a      	ldr	r0, [pc, #360]	; (80003cc <main+0x1d0>)
 8000264:	f000 fe0a 	bl	8000e7c <HAL_I2C_Master_Transmit>
 8000268:	4603      	mov	r3, r0
 800026a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, (uint8_t*)&temperature, 1, 3000);
 800026e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000272:	b299      	uxth	r1, r3
 8000274:	1dba      	adds	r2, r7, #6
 8000276:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2301      	movs	r3, #1
 800027e:	4853      	ldr	r0, [pc, #332]	; (80003cc <main+0x1d0>)
 8000280:	f000 fef0 	bl	8001064 <HAL_I2C_Master_Receive>
 8000284:	4603      	mov	r3, r0
 8000286:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	buf[0] = 0x2; // lo bit
 800028a:	2302      	movs	r3, #2
 800028c:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, 3000);
 800028e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000292:	b299      	uxth	r1, r3
 8000294:	f107 0208 	add.w	r2, r7, #8
 8000298:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2301      	movs	r3, #1
 80002a0:	484a      	ldr	r0, [pc, #296]	; (80003cc <main+0x1d0>)
 80002a2:	f000 fdeb 	bl	8000e7c <HAL_I2C_Master_Transmit>
 80002a6:	4603      	mov	r3, r0
 80002a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, &temperature_low, 1, 3000);
 80002ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80002b0:	b299      	uxth	r1, r3
 80002b2:	1d7a      	adds	r2, r7, #5
 80002b4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2301      	movs	r3, #1
 80002bc:	4843      	ldr	r0, [pc, #268]	; (80003cc <main+0x1d0>)
 80002be:	f000 fed1 	bl	8001064 <HAL_I2C_Master_Receive>
 80002c2:	4603      	mov	r3, r0
 80002c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	temperature  = (temperature << 8) + temperature_low;
 80002c8:	88fb      	ldrh	r3, [r7, #6]
 80002ca:	021b      	lsls	r3, r3, #8
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	797b      	ldrb	r3, [r7, #5]
 80002d0:	b29b      	uxth	r3, r3
 80002d2:	4413      	add	r3, r2
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	80fb      	strh	r3, [r7, #6]
	temp = ((float)temperature) / 256.0f;
 80002d8:	88fb      	ldrh	r3, [r7, #6]
 80002da:	ee07 3a90 	vmov	s15, r3
 80002de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80002e2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80003d0 <main+0x1d4>
 80002e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002ea:	edc7 7a07 	vstr	s15, [r7, #28]

	// humidity
	ret = HAL_I2C_Mem_Read(&hi2c1, 0xBF, 0xB6, I2C_MEMADD_SIZE_8BIT, buf, 2, 3000);
 80002ee:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002f2:	9302      	str	r3, [sp, #8]
 80002f4:	2302      	movs	r3, #2
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	f107 0308 	add.w	r3, r7, #8
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	2301      	movs	r3, #1
 8000300:	22b6      	movs	r2, #182	; 0xb6
 8000302:	21bf      	movs	r1, #191	; 0xbf
 8000304:	4831      	ldr	r0, [pc, #196]	; (80003cc <main+0x1d0>)
 8000306:	f000 ffa3 	bl	8001250 <HAL_I2C_Mem_Read>
 800030a:	4603      	mov	r3, r0
 800030c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	humm_x0 = ((buf[1] * 256) + buf[0]) * 1.0f;
 8000310:	7a7b      	ldrb	r3, [r7, #9]
 8000312:	021b      	lsls	r3, r3, #8
 8000314:	7a3a      	ldrb	r2, [r7, #8]
 8000316:	4413      	add	r3, r2
 8000318:	ee07 3a90 	vmov	s15, r3
 800031c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000320:	edc7 7a06 	vstr	s15, [r7, #24]

	ret = HAL_I2C_Mem_Read(&hi2c1, 0xBF, 0xB0, I2C_MEMADD_SIZE_8BIT, buf, 1, 3000);
 8000324:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000328:	9302      	str	r3, [sp, #8]
 800032a:	2301      	movs	r3, #1
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	f107 0308 	add.w	r3, r7, #8
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	2301      	movs	r3, #1
 8000336:	22b0      	movs	r2, #176	; 0xb0
 8000338:	21bf      	movs	r1, #191	; 0xbf
 800033a:	4824      	ldr	r0, [pc, #144]	; (80003cc <main+0x1d0>)
 800033c:	f000 ff88 	bl	8001250 <HAL_I2C_Mem_Read>
 8000340:	4603      	mov	r3, r0
 8000342:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	humm_y0 = buf[0] / 2.0f;
 8000346:	7a3b      	ldrb	r3, [r7, #8]
 8000348:	ee07 3a90 	vmov	s15, r3
 800034c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000350:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000358:	edc7 7a05 	vstr	s15, [r7, #20]

	ret = HAL_I2C_Mem_Read(&hi2c1, 0xBF, 0x3A, I2C_MEMADD_SIZE_8BIT, buf, 2, 3000);
 800035c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000360:	9302      	str	r3, [sp, #8]
 8000362:	2302      	movs	r3, #2
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2301      	movs	r3, #1
 800036e:	223a      	movs	r2, #58	; 0x3a
 8000370:	21bf      	movs	r1, #191	; 0xbf
 8000372:	4816      	ldr	r0, [pc, #88]	; (80003cc <main+0x1d0>)
 8000374:	f000 ff6c 	bl	8001250 <HAL_I2C_Mem_Read>
 8000378:	4603      	mov	r3, r0
 800037a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	humm_x1 = ((buf[1] * 256) + buf[0]) * 1.0f;
 800037e:	7a7b      	ldrb	r3, [r7, #9]
 8000380:	021b      	lsls	r3, r3, #8
 8000382:	7a3a      	ldrb	r2, [r7, #8]
 8000384:	4413      	add	r3, r2
 8000386:	ee07 3a90 	vmov	s15, r3
 800038a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800038e:	edc7 7a04 	vstr	s15, [r7, #16]

	ret = HAL_I2C_Mem_Read(&hi2c1, 0xBF, 0x31, I2C_MEMADD_SIZE_8BIT, buf, 1, 3000);
 8000392:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000396:	9302      	str	r3, [sp, #8]
 8000398:	2301      	movs	r3, #1
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	f107 0308 	add.w	r3, r7, #8
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	2301      	movs	r3, #1
 80003a4:	2231      	movs	r2, #49	; 0x31
 80003a6:	21bf      	movs	r1, #191	; 0xbf
 80003a8:	4808      	ldr	r0, [pc, #32]	; (80003cc <main+0x1d0>)
 80003aa:	f000 ff51 	bl	8001250 <HAL_I2C_Mem_Read>
 80003ae:	4603      	mov	r3, r0
 80003b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	humm_y1 = buf[0] / 2.0f;
 80003b4:	7a3b      	ldrb	r3, [r7, #8]
 80003b6:	ee07 3a90 	vmov	s15, r3
 80003ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80003be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80003c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80003c6:	edc7 7a03 	vstr	s15, [r7, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003ca:	e7fe      	b.n	80003ca <main+0x1ce>
 80003cc:	20000028 	.word	0x20000028
 80003d0:	43800000 	.word	0x43800000

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b0bc      	sub	sp, #240	; 0xf0
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80003de:	2244      	movs	r2, #68	; 0x44
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f003 f8ca 	bl	800357c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2294      	movs	r2, #148	; 0x94
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f003 f8bc 	bl	800357c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000404:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000408:	f001 fc4a 	bl	8001ca0 <HAL_PWREx_ControlVoltageScaling>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000412:	f000 f8c5 	bl	80005a0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000416:	2302      	movs	r3, #2
 8000418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000424:	2340      	movs	r3, #64	; 0x40
 8000426:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042a:	2302      	movs	r3, #2
 800042c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000430:	2302      	movs	r3, #2
 8000432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000436:	2302      	movs	r3, #2
 8000438:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 20;
 800043c:	2314      	movs	r3, #20
 800043e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000442:	2302      	movs	r3, #2
 8000444:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000448:	2302      	movs	r3, #2
 800044a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800044e:	2302      	movs	r3, #2
 8000450:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000458:	4618      	mov	r0, r3
 800045a:	f001 fcc5 	bl	8001de8 <HAL_RCC_OscConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000464:	f000 f89c 	bl	80005a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000468:	230f      	movs	r3, #15
 800046a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046e:	2303      	movs	r3, #3
 8000470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000486:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800048a:	2103      	movs	r1, #3
 800048c:	4618      	mov	r0, r3
 800048e:	f002 f8d1 	bl	8002634 <HAL_RCC_ClockConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000498:	f000 f882 	bl	80005a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800049c:	2340      	movs	r3, #64	; 0x40
 800049e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4618      	mov	r0, r3
 80004a8:	f002 fb3c 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80004b2:	f000 f875 	bl	80005a0 <Error_Handler>
  }
}
 80004b6:	bf00      	nop
 80004b8:	37f0      	adds	r7, #240	; 0xf0
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <MX_I2C1_Init+0x74>)
 80004c6:	4a1c      	ldr	r2, [pc, #112]	; (8000538 <MX_I2C1_Init+0x78>)
 80004c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80004ca:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <MX_I2C1_Init+0x74>)
 80004cc:	4a1b      	ldr	r2, [pc, #108]	; (800053c <MX_I2C1_Init+0x7c>)
 80004ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004d0:	4b18      	ldr	r3, [pc, #96]	; (8000534 <MX_I2C1_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004d6:	4b17      	ldr	r3, [pc, #92]	; (8000534 <MX_I2C1_Init+0x74>)
 80004d8:	2201      	movs	r2, #1
 80004da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <MX_I2C1_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004e2:	4b14      	ldr	r3, [pc, #80]	; (8000534 <MX_I2C1_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <MX_I2C1_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ee:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_I2C1_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_I2C1_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004fa:	480e      	ldr	r0, [pc, #56]	; (8000534 <MX_I2C1_Init+0x74>)
 80004fc:	f000 fc2e 	bl	8000d5c <HAL_I2C_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000506:	f000 f84b 	bl	80005a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800050a:	2100      	movs	r1, #0
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <MX_I2C1_Init+0x74>)
 800050e:	f001 fb0f 	bl	8001b30 <HAL_I2CEx_ConfigAnalogFilter>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000518:	f000 f842 	bl	80005a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800051c:	2100      	movs	r1, #0
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <MX_I2C1_Init+0x74>)
 8000520:	f001 fb51 	bl	8001bc6 <HAL_I2CEx_ConfigDigitalFilter>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800052a:	f000 f839 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000028 	.word	0x20000028
 8000538:	40005400 	.word	0x40005400
 800053c:	10909cec 	.word	0x10909cec

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_GPIO_Init+0x5c>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a14      	ldr	r2, [pc, #80]	; (800059c <MX_GPIO_Init+0x5c>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_GPIO_Init+0x5c>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_GPIO_Init+0x5c>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <MX_GPIO_Init+0x5c>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_GPIO_Init+0x5c>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_GPIO_Init+0x5c>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <MX_GPIO_Init+0x5c>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_GPIO_Init+0x5c>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <Error_Handler+0x6>

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_MspInit+0x44>)
 80005b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_MspInit+0x44>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6613      	str	r3, [r2, #96]	; 0x60
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_MspInit+0x44>)
 80005bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_MspInit+0x44>)
 80005c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <HAL_MspInit+0x44>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	6593      	str	r3, [r2, #88]	; 0x58
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_MspInit+0x44>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000

080005f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a17      	ldr	r2, [pc, #92]	; (800066c <HAL_I2C_MspInit+0x7c>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d128      	bne.n	8000664 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_I2C_MspInit+0x80>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a16      	ldr	r2, [pc, #88]	; (8000670 <HAL_I2C_MspInit+0x80>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <HAL_I2C_MspInit+0x80>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800062a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800062e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000630:	2312      	movs	r3, #18
 8000632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000638:	2303      	movs	r3, #3
 800063a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800063c:	2304      	movs	r3, #4
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	480b      	ldr	r0, [pc, #44]	; (8000674 <HAL_I2C_MspInit+0x84>)
 8000648:	f000 f9f6 	bl	8000a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_I2C_MspInit+0x80>)
 800064e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_I2C_MspInit+0x80>)
 8000652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000656:	6593      	str	r3, [r2, #88]	; 0x58
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_I2C_MspInit+0x80>)
 800065a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	; 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40005400 	.word	0x40005400
 8000670:	40021000 	.word	0x40021000
 8000674:	48000400 	.word	0x48000400

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800067c:	e7fe      	b.n	800067c <NMI_Handler+0x4>

0800067e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <HardFault_Handler+0x4>

08000684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <MemManage_Handler+0x4>

0800068a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <BusFault_Handler+0x4>

08000690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <UsageFault_Handler+0x4>

08000696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c4:	f000 f8b4 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <SystemInit+0x64>)
 80006d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <SystemInit+0x64>)
 80006d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <SystemInit+0x68>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a13      	ldr	r2, [pc, #76]	; (8000734 <SystemInit+0x68>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <SystemInit+0x68>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <SystemInit+0x68>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <SystemInit+0x68>)
 80006f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80006fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000700:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <SystemInit+0x68>)
 8000704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000708:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <SystemInit+0x68>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a09      	ldr	r2, [pc, #36]	; (8000734 <SystemInit+0x68>)
 8000710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000714:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <SystemInit+0x68>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <SystemInit+0x64>)
 800071e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000722:	609a      	str	r2, [r3, #8]
#endif
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	40021000 	.word	0x40021000

08000738 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000770 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800073c:	f7ff ffc6 	bl	80006cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000740:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000742:	e003      	b.n	800074c <LoopCopyDataInit>

08000744 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000746:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000748:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800074a:	3104      	adds	r1, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800074c:	480a      	ldr	r0, [pc, #40]	; (8000778 <LoopForever+0xa>)
	ldr	r3, =_edata
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000750:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000752:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000754:	d3f6      	bcc.n	8000744 <CopyDataInit>
	ldr	r2, =_sbss
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000758:	e002      	b.n	8000760 <LoopFillZerobss>

0800075a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800075a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800075c:	f842 3b04 	str.w	r3, [r2], #4

08000760 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <LoopForever+0x16>)
	cmp	r2, r3
 8000762:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000764:	d3f9      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000766:	f002 fee5 	bl	8003534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800076a:	f7ff fd47 	bl	80001fc <main>

0800076e <LoopForever>:

LoopForever:
    b LoopForever
 800076e:	e7fe      	b.n	800076e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000770:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000774:	080035ec 	.word	0x080035ec
	ldr	r0, =_sdata
 8000778:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800077c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000780:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000784:	20000078 	.word	0x20000078

08000788 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_IRQHandler>

0800078a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 f91b 	bl	80009d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f80e 	bl	80007bc <HAL_InitTick>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	71fb      	strb	r3, [r7, #7]
 80007aa:	e001      	b.n	80007b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007ac:	f7ff fefc 	bl	80005a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007c4:	2300      	movs	r3, #0
 80007c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <HAL_InitTick+0x68>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d022      	beq.n	8000816 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_InitTick+0x6c>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <HAL_InitTick+0x68>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80007e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f91a 	bl	8000a1e <HAL_SYSTICK_Config>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d10f      	bne.n	8000810 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b0f      	cmp	r3, #15
 80007f4:	d809      	bhi.n	800080a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f6:	2200      	movs	r2, #0
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	f04f 30ff 	mov.w	r0, #4294967295
 80007fe:	f000 f8f2 	bl	80009e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_InitTick+0x70>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	e007      	b.n	800081a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
 800080e:	e004      	b.n	800081a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000810:	2301      	movs	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	e001      	b.n	800081a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800081a:	7bfb      	ldrb	r3, [r7, #15]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000008 	.word	0x20000008
 8000828:	20000000 	.word	0x20000000
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x1c>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_IncTick+0x20>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4413      	add	r3, r2
 800083e:	4a03      	ldr	r2, [pc, #12]	; (800084c <HAL_IncTick+0x1c>)
 8000840:	6013      	str	r3, [r2, #0]
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	20000074 	.word	0x20000074
 8000850:	20000008 	.word	0x20000008

08000854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <HAL_GetTick+0x14>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000074 	.word	0x20000074

0800086c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	60d3      	str	r3, [r2, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <__NVIC_GetPriorityGrouping+0x18>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	f003 0307 	and.w	r3, r3, #7
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f1c3 0307 	rsb	r3, r3, #7
 800093e:	2b04      	cmp	r3, #4
 8000940:	bf28      	it	cs
 8000942:	2304      	movcs	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3304      	adds	r3, #4
 800094a:	2b06      	cmp	r3, #6
 800094c:	d902      	bls.n	8000954 <NVIC_EncodePriority+0x30>
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3b03      	subs	r3, #3
 8000952:	e000      	b.n	8000956 <NVIC_EncodePriority+0x32>
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	43d9      	mvns	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4313      	orrs	r3, r2
         );
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	; 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800099c:	d301      	bcc.n	80009a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099e:	2301      	movs	r3, #1
 80009a0:	e00f      	b.n	80009c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <SysTick_Config+0x40>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009aa:	210f      	movs	r1, #15
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f7ff ff8e 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <SysTick_Config+0x40>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <SysTick_Config+0x40>)
 80009bc:	2207      	movs	r2, #7
 80009be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	e000e010 	.word	0xe000e010

080009d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff47 	bl	800086c <__NVIC_SetPriorityGrouping>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
 80009f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009f8:	f7ff ff5c 	bl	80008b4 <__NVIC_GetPriorityGrouping>
 80009fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	6978      	ldr	r0, [r7, #20]
 8000a04:	f7ff ff8e 	bl	8000924 <NVIC_EncodePriority>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff5d 	bl	80008d0 <__NVIC_SetPriority>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ffb0 	bl	800098c <SysTick_Config>
 8000a2c:	4603      	mov	r3, r0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b087      	sub	sp, #28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a46:	e166      	b.n	8000d16 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	fa01 f303 	lsl.w	r3, r1, r3
 8000a54:	4013      	ands	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f000 8158 	beq.w	8000d10 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d00b      	beq.n	8000a80 <HAL_GPIO_Init+0x48>
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d007      	beq.n	8000a80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a74:	2b11      	cmp	r3, #17
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	2b12      	cmp	r3, #18
 8000a7e:	d130      	bne.n	8000ae2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	f003 0201 	and.w	r2, r3, #1
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2203      	movs	r2, #3
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_Init+0xea>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2b12      	cmp	r3, #18
 8000b20:	d123      	bne.n	8000b6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	08da      	lsrs	r2, r3, #3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3208      	adds	r2, #8
 8000b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	220f      	movs	r2, #15
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	691a      	ldr	r2, [r3, #16]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f003 0307 	and.w	r3, r3, #7
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	08da      	lsrs	r2, r3, #3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3208      	adds	r2, #8
 8000b64:	6939      	ldr	r1, [r7, #16]
 8000b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	2203      	movs	r2, #3
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f003 0203 	and.w	r2, r3, #3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 80b2 	beq.w	8000d10 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bac:	4b61      	ldr	r3, [pc, #388]	; (8000d34 <HAL_GPIO_Init+0x2fc>)
 8000bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb0:	4a60      	ldr	r2, [pc, #384]	; (8000d34 <HAL_GPIO_Init+0x2fc>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6613      	str	r3, [r2, #96]	; 0x60
 8000bb8:	4b5e      	ldr	r3, [pc, #376]	; (8000d34 <HAL_GPIO_Init+0x2fc>)
 8000bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bc4:	4a5c      	ldr	r2, [pc, #368]	; (8000d38 <HAL_GPIO_Init+0x300>)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	089b      	lsrs	r3, r3, #2
 8000bca:	3302      	adds	r3, #2
 8000bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	220f      	movs	r2, #15
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bee:	d02b      	beq.n	8000c48 <HAL_GPIO_Init+0x210>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a52      	ldr	r2, [pc, #328]	; (8000d3c <HAL_GPIO_Init+0x304>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d025      	beq.n	8000c44 <HAL_GPIO_Init+0x20c>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a51      	ldr	r2, [pc, #324]	; (8000d40 <HAL_GPIO_Init+0x308>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d01f      	beq.n	8000c40 <HAL_GPIO_Init+0x208>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a50      	ldr	r2, [pc, #320]	; (8000d44 <HAL_GPIO_Init+0x30c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d019      	beq.n	8000c3c <HAL_GPIO_Init+0x204>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a4f      	ldr	r2, [pc, #316]	; (8000d48 <HAL_GPIO_Init+0x310>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d013      	beq.n	8000c38 <HAL_GPIO_Init+0x200>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	; (8000d4c <HAL_GPIO_Init+0x314>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d00d      	beq.n	8000c34 <HAL_GPIO_Init+0x1fc>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a4d      	ldr	r2, [pc, #308]	; (8000d50 <HAL_GPIO_Init+0x318>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d007      	beq.n	8000c30 <HAL_GPIO_Init+0x1f8>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a4c      	ldr	r2, [pc, #304]	; (8000d54 <HAL_GPIO_Init+0x31c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d101      	bne.n	8000c2c <HAL_GPIO_Init+0x1f4>
 8000c28:	2307      	movs	r3, #7
 8000c2a:	e00e      	b.n	8000c4a <HAL_GPIO_Init+0x212>
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	e00c      	b.n	8000c4a <HAL_GPIO_Init+0x212>
 8000c30:	2306      	movs	r3, #6
 8000c32:	e00a      	b.n	8000c4a <HAL_GPIO_Init+0x212>
 8000c34:	2305      	movs	r3, #5
 8000c36:	e008      	b.n	8000c4a <HAL_GPIO_Init+0x212>
 8000c38:	2304      	movs	r3, #4
 8000c3a:	e006      	b.n	8000c4a <HAL_GPIO_Init+0x212>
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e004      	b.n	8000c4a <HAL_GPIO_Init+0x212>
 8000c40:	2302      	movs	r3, #2
 8000c42:	e002      	b.n	8000c4a <HAL_GPIO_Init+0x212>
 8000c44:	2301      	movs	r3, #1
 8000c46:	e000      	b.n	8000c4a <HAL_GPIO_Init+0x212>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	f002 0203 	and.w	r2, r2, #3
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	4093      	lsls	r3, r2
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c5a:	4937      	ldr	r1, [pc, #220]	; (8000d38 <HAL_GPIO_Init+0x300>)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c68:	4b3b      	ldr	r3, [pc, #236]	; (8000d58 <HAL_GPIO_Init+0x320>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c8c:	4a32      	ldr	r2, [pc, #200]	; (8000d58 <HAL_GPIO_Init+0x320>)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000c92:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <HAL_GPIO_Init+0x320>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cb6:	4a28      	ldr	r2, [pc, #160]	; (8000d58 <HAL_GPIO_Init+0x320>)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cbc:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <HAL_GPIO_Init+0x320>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ce0:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <HAL_GPIO_Init+0x320>)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_GPIO_Init+0x320>)
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <HAL_GPIO_Init+0x320>)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f47f ae91 	bne.w	8000a48 <HAL_GPIO_Init+0x10>
  }
}
 8000d26:	bf00      	nop
 8000d28:	371c      	adds	r7, #28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010000 	.word	0x40010000
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	48000800 	.word	0x48000800
 8000d44:	48000c00 	.word	0x48000c00
 8000d48:	48001000 	.word	0x48001000
 8000d4c:	48001400 	.word	0x48001400
 8000d50:	48001800 	.word	0x48001800
 8000d54:	48001c00 	.word	0x48001c00
 8000d58:	40010400 	.word	0x40010400

08000d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e081      	b.n	8000e72 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d106      	bne.n	8000d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fc34 	bl	80005f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2224      	movs	r2, #36	; 0x24
 8000d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 0201 	bic.w	r2, r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000dac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d107      	bne.n	8000dd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	e006      	b.n	8000de4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000de2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d104      	bne.n	8000df6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000df4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	ea42 0103 	orr.w	r1, r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	021a      	lsls	r2, r3, #8
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69d9      	ldr	r1, [r3, #28]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a1a      	ldr	r2, [r3, #32]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 0201 	orr.w	r2, r2, #1
 8000e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	461a      	mov	r2, r3
 8000e88:	460b      	mov	r3, r1
 8000e8a:	817b      	strh	r3, [r7, #10]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b20      	cmp	r3, #32
 8000e9a:	f040 80da 	bne.w	8001052 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d101      	bne.n	8000eac <HAL_I2C_Master_Transmit+0x30>
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	e0d3      	b.n	8001054 <HAL_I2C_Master_Transmit+0x1d8>
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000eb4:	f7ff fcce 	bl	8000854 <HAL_GetTick>
 8000eb8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2319      	movs	r3, #25
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f000 fc76 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e0be      	b.n	8001054 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2221      	movs	r2, #33	; 0x21
 8000eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	893a      	ldrh	r2, [r7, #8]
 8000ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2200      	movs	r2, #0
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	2bff      	cmp	r3, #255	; 0xff
 8000f06:	d90e      	bls.n	8000f26 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	22ff      	movs	r2, #255	; 0xff
 8000f0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	8979      	ldrh	r1, [r7, #10]
 8000f16:	4b51      	ldr	r3, [pc, #324]	; (800105c <HAL_I2C_Master_Transmit+0x1e0>)
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f000 fdd8 	bl	8001ad4 <I2C_TransferConfig>
 8000f24:	e06c      	b.n	8001000 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	8979      	ldrh	r1, [r7, #10]
 8000f38:	4b48      	ldr	r3, [pc, #288]	; (800105c <HAL_I2C_Master_Transmit+0x1e0>)
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 fdc7 	bl	8001ad4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000f46:	e05b      	b.n	8001000 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	6a39      	ldr	r1, [r7, #32]
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 fc73 	bl	8001838 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e07b      	b.n	8001054 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f84:	3b01      	subs	r3, #1
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d034      	beq.n	8001000 <HAL_I2C_Master_Transmit+0x184>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d130      	bne.n	8001000 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f000 fc05 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e04d      	b.n	8001054 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	2bff      	cmp	r3, #255	; 0xff
 8000fc0:	d90e      	bls.n	8000fe0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	22ff      	movs	r2, #255	; 0xff
 8000fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	8979      	ldrh	r1, [r7, #10]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f000 fd7b 	bl	8001ad4 <I2C_TransferConfig>
 8000fde:	e00f      	b.n	8001000 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	8979      	ldrh	r1, [r7, #10]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 fd6a 	bl	8001ad4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001004:	b29b      	uxth	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d19e      	bne.n	8000f48 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	6a39      	ldr	r1, [r7, #32]
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f000 fc52 	bl	80018b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e01a      	b.n	8001054 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2220      	movs	r2, #32
 8001024:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6859      	ldr	r1, [r3, #4]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_I2C_Master_Transmit+0x1e4>)
 8001032:	400b      	ands	r3, r1
 8001034:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2220      	movs	r2, #32
 800103a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001052:	2302      	movs	r3, #2
  }
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	80002000 	.word	0x80002000
 8001060:	fe00e800 	.word	0xfe00e800

08001064 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	461a      	mov	r2, r3
 8001070:	460b      	mov	r3, r1
 8001072:	817b      	strh	r3, [r7, #10]
 8001074:	4613      	mov	r3, r2
 8001076:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b20      	cmp	r3, #32
 8001082:	f040 80db 	bne.w	800123c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <HAL_I2C_Master_Receive+0x30>
 8001090:	2302      	movs	r3, #2
 8001092:	e0d4      	b.n	800123e <HAL_I2C_Master_Receive+0x1da>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800109c:	f7ff fbda 	bl	8000854 <HAL_GetTick>
 80010a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2319      	movs	r3, #25
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 fb82 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e0bf      	b.n	800123e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2222      	movs	r2, #34	; 0x22
 80010c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2210      	movs	r2, #16
 80010ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	893a      	ldrh	r2, [r7, #8]
 80010de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	2bff      	cmp	r3, #255	; 0xff
 80010ee:	d90e      	bls.n	800110e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	22ff      	movs	r2, #255	; 0xff
 80010f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	8979      	ldrh	r1, [r7, #10]
 80010fe:	4b52      	ldr	r3, [pc, #328]	; (8001248 <HAL_I2C_Master_Receive+0x1e4>)
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 fce4 	bl	8001ad4 <I2C_TransferConfig>
 800110c:	e06d      	b.n	80011ea <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001112:	b29a      	uxth	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800111c:	b2da      	uxtb	r2, r3
 800111e:	8979      	ldrh	r1, [r7, #10]
 8001120:	4b49      	ldr	r3, [pc, #292]	; (8001248 <HAL_I2C_Master_Receive+0x1e4>)
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f000 fcd3 	bl	8001ad4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800112e:	e05c      	b.n	80011ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	6a39      	ldr	r1, [r7, #32]
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 fbfb 	bl	8001930 <I2C_WaitOnRXNEFlagUntilTimeout>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e07c      	b.n	800123e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001160:	3b01      	subs	r3, #1
 8001162:	b29a      	uxth	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800116c:	b29b      	uxth	r3, r3
 800116e:	3b01      	subs	r3, #1
 8001170:	b29a      	uxth	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800117a:	b29b      	uxth	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d034      	beq.n	80011ea <HAL_I2C_Master_Receive+0x186>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001184:	2b00      	cmp	r3, #0
 8001186:	d130      	bne.n	80011ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	2200      	movs	r2, #0
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 fb10 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e04d      	b.n	800123e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	2bff      	cmp	r3, #255	; 0xff
 80011aa:	d90e      	bls.n	80011ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	22ff      	movs	r2, #255	; 0xff
 80011b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	8979      	ldrh	r1, [r7, #10]
 80011ba:	2300      	movs	r3, #0
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f000 fc86 	bl	8001ad4 <I2C_TransferConfig>
 80011c8:	e00f      	b.n	80011ea <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	8979      	ldrh	r1, [r7, #10]
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 fc75 	bl	8001ad4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d19d      	bne.n	8001130 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	6a39      	ldr	r1, [r7, #32]
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 fb5d 	bl	80018b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e01a      	b.n	800123e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2220      	movs	r2, #32
 800120e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6859      	ldr	r1, [r3, #4]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_I2C_Master_Receive+0x1e8>)
 800121c:	400b      	ands	r3, r1
 800121e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2220      	movs	r2, #32
 8001224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	e000      	b.n	800123e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800123c:	2302      	movs	r3, #2
  }
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	80002400 	.word	0x80002400
 800124c:	fe00e800 	.word	0xfe00e800

08001250 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af02      	add	r7, sp, #8
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	4608      	mov	r0, r1
 800125a:	4611      	mov	r1, r2
 800125c:	461a      	mov	r2, r3
 800125e:	4603      	mov	r3, r0
 8001260:	817b      	strh	r3, [r7, #10]
 8001262:	460b      	mov	r3, r1
 8001264:	813b      	strh	r3, [r7, #8]
 8001266:	4613      	mov	r3, r2
 8001268:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b20      	cmp	r3, #32
 8001274:	f040 80fd 	bne.w	8001472 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <HAL_I2C_Mem_Read+0x34>
 800127e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001280:	2b00      	cmp	r3, #0
 8001282:	d105      	bne.n	8001290 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800128a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0f1      	b.n	8001474 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <HAL_I2C_Mem_Read+0x4e>
 800129a:	2302      	movs	r3, #2
 800129c:	e0ea      	b.n	8001474 <HAL_I2C_Mem_Read+0x224>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012a6:	f7ff fad5 	bl	8000854 <HAL_GetTick>
 80012aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2319      	movs	r3, #25
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f000 fa7d 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0d5      	b.n	8001474 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2222      	movs	r2, #34	; 0x22
 80012cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6a3a      	ldr	r2, [r7, #32]
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012f0:	88f8      	ldrh	r0, [r7, #6]
 80012f2:	893a      	ldrh	r2, [r7, #8]
 80012f4:	8979      	ldrh	r1, [r7, #10]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	4603      	mov	r3, r0
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f000 f9e1 	bl	80016c8 <I2C_RequestMemoryRead>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0ad      	b.n	8001474 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131c:	b29b      	uxth	r3, r3
 800131e:	2bff      	cmp	r3, #255	; 0xff
 8001320:	d90e      	bls.n	8001340 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	22ff      	movs	r2, #255	; 0xff
 8001326:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132c:	b2da      	uxtb	r2, r3
 800132e:	8979      	ldrh	r1, [r7, #10]
 8001330:	4b52      	ldr	r3, [pc, #328]	; (800147c <HAL_I2C_Mem_Read+0x22c>)
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f000 fbcb 	bl	8001ad4 <I2C_TransferConfig>
 800133e:	e00f      	b.n	8001360 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001344:	b29a      	uxth	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134e:	b2da      	uxtb	r2, r3
 8001350:	8979      	ldrh	r1, [r7, #10]
 8001352:	4b4a      	ldr	r3, [pc, #296]	; (800147c <HAL_I2C_Mem_Read+0x22c>)
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 fbba 	bl	8001ad4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	2200      	movs	r2, #0
 8001368:	2104      	movs	r1, #4
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 fa24 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e07c      	b.n	8001474 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001396:	3b01      	subs	r3, #1
 8001398:	b29a      	uxth	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3b01      	subs	r3, #1
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d034      	beq.n	8001420 <HAL_I2C_Mem_Read+0x1d0>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d130      	bne.n	8001420 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c4:	2200      	movs	r2, #0
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f000 f9f5 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e04d      	b.n	8001474 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013dc:	b29b      	uxth	r3, r3
 80013de:	2bff      	cmp	r3, #255	; 0xff
 80013e0:	d90e      	bls.n	8001400 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	22ff      	movs	r2, #255	; 0xff
 80013e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	8979      	ldrh	r1, [r7, #10]
 80013f0:	2300      	movs	r3, #0
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f000 fb6b 	bl	8001ad4 <I2C_TransferConfig>
 80013fe:	e00f      	b.n	8001420 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001404:	b29a      	uxth	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140e:	b2da      	uxtb	r2, r3
 8001410:	8979      	ldrh	r1, [r7, #10]
 8001412:	2300      	movs	r3, #0
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 fb5a 	bl	8001ad4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001424:	b29b      	uxth	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d19a      	bne.n	8001360 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 fa42 	bl	80018b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e01a      	b.n	8001474 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2220      	movs	r2, #32
 8001444:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_I2C_Mem_Read+0x230>)
 8001452:	400b      	ands	r3, r1
 8001454:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2220      	movs	r2, #32
 800145a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001472:	2302      	movs	r3, #2
  }
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	80002400 	.word	0x80002400
 8001480:	fe00e800 	.word	0xfe00e800

08001484 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af02      	add	r7, sp, #8
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	460b      	mov	r3, r1
 8001492:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b20      	cmp	r3, #32
 80014a2:	f040 80f1 	bne.w	8001688 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014b4:	d101      	bne.n	80014ba <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80014b6:	2302      	movs	r3, #2
 80014b8:	e0e7      	b.n	800168a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_I2C_IsDeviceReady+0x44>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e0e0      	b.n	800168a <HAL_I2C_IsDeviceReady+0x206>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2224      	movs	r2, #36	; 0x24
 80014d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d107      	bne.n	80014f6 <HAL_I2C_IsDeviceReady+0x72>
 80014e6:	897b      	ldrh	r3, [r7, #10]
 80014e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014f4:	e004      	b.n	8001500 <HAL_I2C_IsDeviceReady+0x7c>
 80014f6:	897b      	ldrh	r3, [r7, #10]
 80014f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014fc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001506:	f7ff f9a5 	bl	8000854 <HAL_GetTick>
 800150a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	2b20      	cmp	r3, #32
 8001518:	bf0c      	ite	eq
 800151a:	2301      	moveq	r3, #1
 800151c:	2300      	movne	r3, #0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	2b10      	cmp	r3, #16
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001538:	e034      	b.n	80015a4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001540:	d01a      	beq.n	8001578 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001542:	f7ff f987 	bl	8000854 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d302      	bcc.n	8001558 <HAL_I2C_IsDeviceReady+0xd4>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10f      	bne.n	8001578 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2220      	movs	r2, #32
 800155c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	f043 0220 	orr.w	r2, r3, #32
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e088      	b.n	800168a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	2b20      	cmp	r3, #32
 8001584:	bf0c      	ite	eq
 8001586:	2301      	moveq	r3, #1
 8001588:	2300      	movne	r3, #0
 800158a:	b2db      	uxtb	r3, r3
 800158c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0310 	and.w	r3, r3, #16
 8001598:	2b10      	cmp	r3, #16
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80015a4:	7ffb      	ldrb	r3, [r7, #31]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <HAL_I2C_IsDeviceReady+0x12c>
 80015aa:	7fbb      	ldrb	r3, [r7, #30]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0c4      	beq.n	800153a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b10      	cmp	r3, #16
 80015bc:	d01a      	beq.n	80015f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2200      	movs	r2, #0
 80015c6:	2120      	movs	r1, #32
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 f8f5 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e058      	b.n	800168a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2220      	movs	r2, #32
 80015de:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2220      	movs	r2, #32
 80015e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e04a      	b.n	800168a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	2120      	movs	r1, #32
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f8da 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e03d      	b.n	800168a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2210      	movs	r2, #16
 8001614:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2220      	movs	r2, #32
 800161c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	429a      	cmp	r2, r3
 8001624:	d118      	bne.n	8001658 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001634:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2200      	movs	r2, #0
 800163e:	2120      	movs	r1, #32
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 f8b9 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e01c      	b.n	800168a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2220      	movs	r2, #32
 8001656:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3301      	adds	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	f63f af3b 	bhi.w	80014de <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2220      	movs	r2, #32
 800166c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f043 0220 	orr.w	r2, r3, #32
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001688:	2302      	movs	r3, #2
  }
}
 800168a:	4618      	mov	r0, r3
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016a0:	b2db      	uxtb	r3, r3
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	4608      	mov	r0, r1
 80016d2:	4611      	mov	r1, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	817b      	strh	r3, [r7, #10]
 80016da:	460b      	mov	r3, r1
 80016dc:	813b      	strh	r3, [r7, #8]
 80016de:	4613      	mov	r3, r2
 80016e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	8979      	ldrh	r1, [r7, #10]
 80016e8:	4b20      	ldr	r3, [pc, #128]	; (800176c <I2C_RequestMemoryRead+0xa4>)
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2300      	movs	r3, #0
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f9f0 	bl	8001ad4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	69b9      	ldr	r1, [r7, #24]
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f000 f89d 	bl	8001838 <I2C_WaitOnTXISFlagUntilTimeout>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e02c      	b.n	8001762 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d105      	bne.n	800171a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800170e:	893b      	ldrh	r3, [r7, #8]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
 8001718:	e015      	b.n	8001746 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800171a:	893b      	ldrh	r3, [r7, #8]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	b29b      	uxth	r3, r3
 8001720:	b2da      	uxtb	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f883 	bl	8001838 <I2C_WaitOnTXISFlagUntilTimeout>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e012      	b.n	8001762 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800173c:	893b      	ldrh	r3, [r7, #8]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	2200      	movs	r2, #0
 800174e:	2140      	movs	r1, #64	; 0x40
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 f831 	bl	80017b8 <I2C_WaitOnFlagUntilTimeout>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	80002000 	.word	0x80002000

08001770 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b02      	cmp	r3, #2
 8001784:	d103      	bne.n	800178e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2200      	movs	r2, #0
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b01      	cmp	r3, #1
 800179a:	d007      	beq.n	80017ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	699a      	ldr	r2, [r3, #24]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	619a      	str	r2, [r3, #24]
  }
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017c8:	e022      	b.n	8001810 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d0:	d01e      	beq.n	8001810 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017d2:	f7ff f83f 	bl	8000854 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d302      	bcc.n	80017e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d113      	bne.n	8001810 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	f043 0220 	orr.w	r2, r3, #32
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e00f      	b.n	8001830 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	4013      	ands	r3, r2
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	429a      	cmp	r2, r3
 800181e:	bf0c      	ite	eq
 8001820:	2301      	moveq	r3, #1
 8001822:	2300      	movne	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	461a      	mov	r2, r3
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	429a      	cmp	r2, r3
 800182c:	d0cd      	beq.n	80017ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001844:	e02c      	b.n	80018a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 f8dc 	bl	8001a08 <I2C_IsAcknowledgeFailed>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e02a      	b.n	80018b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d01e      	beq.n	80018a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001862:	f7fe fff7 	bl	8000854 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	429a      	cmp	r2, r3
 8001870:	d302      	bcc.n	8001878 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d113      	bne.n	80018a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	f043 0220 	orr.w	r2, r3, #32
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2220      	movs	r2, #32
 8001888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e007      	b.n	80018b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d1cb      	bne.n	8001846 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018c4:	e028      	b.n	8001918 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 f89c 	bl	8001a08 <I2C_IsAcknowledgeFailed>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e026      	b.n	8001928 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018da:	f7fe ffbb 	bl	8000854 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d302      	bcc.n	80018f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d113      	bne.n	8001918 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	f043 0220 	orr.w	r2, r3, #32
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2220      	movs	r2, #32
 8001900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e007      	b.n	8001928 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	2b20      	cmp	r3, #32
 8001924:	d1cf      	bne.n	80018c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800193c:	e055      	b.n	80019ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f860 	bl	8001a08 <I2C_IsAcknowledgeFailed>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e053      	b.n	80019fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	2b20      	cmp	r3, #32
 800195e:	d129      	bne.n	80019b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b04      	cmp	r3, #4
 800196c:	d105      	bne.n	800197a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e03f      	b.n	80019fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2220      	movs	r2, #32
 8001980:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800198e:	400b      	ands	r3, r1
 8001990:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e022      	b.n	80019fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b4:	f7fe ff4e 	bl	8000854 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d302      	bcc.n	80019ca <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10f      	bne.n	80019ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f043 0220 	orr.w	r2, r3, #32
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2220      	movs	r2, #32
 80019da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e007      	b.n	80019fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d1a2      	bne.n	800193e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	fe00e800 	.word	0xfe00e800

08001a08 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b10      	cmp	r3, #16
 8001a20:	d151      	bne.n	8001ac6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a22:	e022      	b.n	8001a6a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2a:	d01e      	beq.n	8001a6a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a2c:	f7fe ff12 	bl	8000854 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d302      	bcc.n	8001a42 <I2C_IsAcknowledgeFailed+0x3a>
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d113      	bne.n	8001a6a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f043 0220 	orr.w	r2, r3, #32
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2220      	movs	r2, #32
 8001a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e02e      	b.n	8001ac8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	d1d5      	bne.n	8001a24 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2220      	movs	r2, #32
 8001a86:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fe71 	bl	8001770 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <I2C_IsAcknowledgeFailed+0xc8>)
 8001a9a:	400b      	ands	r3, r1
 8001a9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f043 0204 	orr.w	r2, r3, #4
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2220      	movs	r2, #32
 8001aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	fe00e800 	.word	0xfe00e800

08001ad4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	817b      	strh	r3, [r7, #10]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	0d5b      	lsrs	r3, r3, #21
 8001af0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <I2C_TransferConfig+0x58>)
 8001af6:	430b      	orrs	r3, r1
 8001af8:	43db      	mvns	r3, r3
 8001afa:	ea02 0103 	and.w	r1, r2, r3
 8001afe:	897b      	ldrh	r3, [r7, #10]
 8001b00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b04:	7a7b      	ldrb	r3, [r7, #9]
 8001b06:	041b      	lsls	r3, r3, #16
 8001b08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	03ff63ff 	.word	0x03ff63ff

08001b30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	d138      	bne.n	8001bb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e032      	b.n	8001bba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2224      	movs	r2, #36	; 0x24
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6819      	ldr	r1, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e000      	b.n	8001bba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bb8:	2302      	movs	r3, #2
  }
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b085      	sub	sp, #20
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d139      	bne.n	8001c50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e033      	b.n	8001c52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2224      	movs	r2, #36	; 0x24
 8001bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e000      	b.n	8001c52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
  }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c70:	d102      	bne.n	8001c78 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c76:	e00b      	b.n	8001c90 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c86:	d102      	bne.n	8001c8e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c8c:	e000      	b.n	8001c90 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001c8e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40007000 	.word	0x40007000

08001ca0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d141      	bne.n	8001d32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cae:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cba:	d131      	bne.n	8001d20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cbc:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cc2:	4a46      	ldr	r2, [pc, #280]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ccc:	4b43      	ldr	r3, [pc, #268]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cd4:	4a41      	ldr	r2, [pc, #260]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001cdc:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2232      	movs	r2, #50	; 0x32
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	4a3f      	ldr	r2, [pc, #252]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	0c9b      	lsrs	r3, r3, #18
 8001cee:	3301      	adds	r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cf2:	e002      	b.n	8001cfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cfa:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d06:	d102      	bne.n	8001d0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f2      	bne.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1a:	d158      	bne.n	8001dce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e057      	b.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d20:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d26:	4a2d      	ldr	r2, [pc, #180]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d30:	e04d      	b.n	8001dce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d38:	d141      	bne.n	8001dbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d46:	d131      	bne.n	8001dac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d48:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d4e:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d60:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2232      	movs	r2, #50	; 0x32
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	0c9b      	lsrs	r3, r3, #18
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d7e:	e002      	b.n	8001d86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d92:	d102      	bne.n	8001d9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f2      	bne.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da6:	d112      	bne.n	8001dce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e011      	b.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001dbc:	e007      	b.n	8001dce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dcc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	20000000 	.word	0x20000000
 8001de4:	431bde83 	.word	0x431bde83

08001de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f000 bc16 	b.w	8002628 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfc:	4ba0      	ldr	r3, [pc, #640]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e06:	4b9e      	ldr	r3, [pc, #632]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80e4 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_RCC_OscConfig+0x4c>
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	f040 808b 	bne.w	8001f42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	f040 8087 	bne.w	8001f42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e34:	4b92      	ldr	r3, [pc, #584]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_OscConfig+0x64>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e3ed      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1a      	ldr	r2, [r3, #32]
 8001e50:	4b8b      	ldr	r3, [pc, #556]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <HAL_RCC_OscConfig+0x7e>
 8001e5c:	4b88      	ldr	r3, [pc, #544]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e64:	e005      	b.n	8001e72 <HAL_RCC_OscConfig+0x8a>
 8001e66:	4b86      	ldr	r3, [pc, #536]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d223      	bcs.n	8001ebe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fd90 	bl	80029a0 <RCC_SetFlashLatencyFromMSIRange>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e3ce      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e8a:	4b7d      	ldr	r3, [pc, #500]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a7c      	ldr	r2, [pc, #496]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b7a      	ldr	r3, [pc, #488]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4977      	ldr	r1, [pc, #476]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ea8:	4b75      	ldr	r3, [pc, #468]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	4972      	ldr	r1, [pc, #456]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
 8001ebc:	e025      	b.n	8001f0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ebe:	4b70      	ldr	r3, [pc, #448]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a6f      	ldr	r2, [pc, #444]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001ec4:	f043 0308 	orr.w	r3, r3, #8
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b6d      	ldr	r3, [pc, #436]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	496a      	ldr	r1, [pc, #424]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001edc:	4b68      	ldr	r3, [pc, #416]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	4965      	ldr	r1, [pc, #404]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d109      	bne.n	8001f0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fd50 	bl	80029a0 <RCC_SetFlashLatencyFromMSIRange>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e38e      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f0a:	f000 fcbf 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8001f0e:	4601      	mov	r1, r0
 8001f10:	4b5b      	ldr	r3, [pc, #364]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4a5a      	ldr	r2, [pc, #360]	; (8002084 <HAL_RCC_OscConfig+0x29c>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	fa21 f303 	lsr.w	r3, r1, r3
 8001f26:	4a58      	ldr	r2, [pc, #352]	; (8002088 <HAL_RCC_OscConfig+0x2a0>)
 8001f28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f2a:	4b58      	ldr	r3, [pc, #352]	; (800208c <HAL_RCC_OscConfig+0x2a4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fc44 	bl	80007bc <HAL_InitTick>
 8001f34:	4603      	mov	r3, r0
 8001f36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d052      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	e372      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d032      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f4a:	4b4d      	ldr	r3, [pc, #308]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a4c      	ldr	r2, [pc, #304]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f56:	f7fe fc7d 	bl	8000854 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f5e:	f7fe fc79 	bl	8000854 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e35b      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f70:	4b43      	ldr	r3, [pc, #268]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7c:	4b40      	ldr	r3, [pc, #256]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a3f      	ldr	r2, [pc, #252]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	493a      	ldr	r1, [pc, #232]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9a:	4b39      	ldr	r3, [pc, #228]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	4935      	ldr	r1, [pc, #212]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
 8001fae:	e01a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a32      	ldr	r2, [pc, #200]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fbc:	f7fe fc4a 	bl	8000854 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc4:	f7fe fc46 	bl	8000854 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e328      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x1dc>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d073      	beq.n	80020da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_OscConfig+0x21c>
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d10e      	bne.n	800201c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d10b      	bne.n	800201c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d063      	beq.n	80020d8 <HAL_RCC_OscConfig+0x2f0>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d15f      	bne.n	80020d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e305      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002024:	d106      	bne.n	8002034 <HAL_RCC_OscConfig+0x24c>
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a15      	ldr	r2, [pc, #84]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e01d      	b.n	8002070 <HAL_RCC_OscConfig+0x288>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x270>
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8002044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e00b      	b.n	8002070 <HAL_RCC_OscConfig+0x288>
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a08      	ldr	r2, [pc, #32]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 800205e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a05      	ldr	r2, [pc, #20]	; (8002080 <HAL_RCC_OscConfig+0x298>)
 800206a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01b      	beq.n	80020b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7fe fbec 	bl	8000854 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800207e:	e010      	b.n	80020a2 <HAL_RCC_OscConfig+0x2ba>
 8002080:	40021000 	.word	0x40021000
 8002084:	080035a4 	.word	0x080035a4
 8002088:	20000000 	.word	0x20000000
 800208c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7fe fbe0 	bl	8000854 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e2c2      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a2:	4baf      	ldr	r3, [pc, #700]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x2a8>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe fbd0 	bl	8000854 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7fe fbcc 	bl	8000854 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e2ae      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ca:	4ba5      	ldr	r3, [pc, #660]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2d0>
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d060      	beq.n	80021a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_OscConfig+0x310>
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d119      	bne.n	8002126 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d116      	bne.n	8002126 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f8:	4b99      	ldr	r3, [pc, #612]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_OscConfig+0x328>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e28b      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b93      	ldr	r3, [pc, #588]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	4990      	ldr	r1, [pc, #576]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002124:	e040      	b.n	80021a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d023      	beq.n	8002176 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212e:	4b8c      	ldr	r3, [pc, #560]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a8b      	ldr	r2, [pc, #556]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7fe fb8b 	bl	8000854 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002142:	f7fe fb87 	bl	8000854 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e269      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002154:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002160:	4b7f      	ldr	r3, [pc, #508]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	061b      	lsls	r3, r3, #24
 800216e:	497c      	ldr	r1, [pc, #496]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
 8002174:	e018      	b.n	80021a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002176:	4b7a      	ldr	r3, [pc, #488]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a79      	ldr	r2, [pc, #484]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 800217c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7fe fb67 	bl	8000854 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218a:	f7fe fb63 	bl	8000854 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e245      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800219c:	4b70      	ldr	r3, [pc, #448]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f0      	bne.n	800218a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d03c      	beq.n	800222e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021bc:	4b68      	ldr	r3, [pc, #416]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80021be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c2:	4a67      	ldr	r2, [pc, #412]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7fe fb42 	bl	8000854 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d4:	f7fe fb3e 	bl	8000854 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e220      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e6:	4b5e      	ldr	r3, [pc, #376]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80021e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ef      	beq.n	80021d4 <HAL_RCC_OscConfig+0x3ec>
 80021f4:	e01b      	b.n	800222e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f6:	4b5a      	ldr	r3, [pc, #360]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80021f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fc:	4a58      	ldr	r2, [pc, #352]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002206:	f7fe fb25 	bl	8000854 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220e:	f7fe fb21 	bl	8000854 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e203      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002220:	4b4f      	ldr	r3, [pc, #316]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1ef      	bne.n	800220e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80a6 	beq.w	8002388 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002240:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b44      	ldr	r3, [pc, #272]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	4a43      	ldr	r2, [pc, #268]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	6593      	str	r3, [r2, #88]	; 0x58
 8002258:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002264:	2301      	movs	r3, #1
 8002266:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002268:	4b3e      	ldr	r3, [pc, #248]	; (8002364 <HAL_RCC_OscConfig+0x57c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d118      	bne.n	80022a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002274:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <HAL_RCC_OscConfig+0x57c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a3a      	ldr	r2, [pc, #232]	; (8002364 <HAL_RCC_OscConfig+0x57c>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002280:	f7fe fae8 	bl	8000854 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002288:	f7fe fae4 	bl	8000854 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e1c6      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229a:	4b32      	ldr	r3, [pc, #200]	; (8002364 <HAL_RCC_OscConfig+0x57c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4d8>
 80022ae:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	4a2a      	ldr	r2, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022be:	e024      	b.n	800230a <HAL_RCC_OscConfig+0x522>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b05      	cmp	r3, #5
 80022c6:	d110      	bne.n	80022ea <HAL_RCC_OscConfig+0x502>
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	4a24      	ldr	r2, [pc, #144]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	4a20      	ldr	r2, [pc, #128]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e8:	e00f      	b.n	800230a <HAL_RCC_OscConfig+0x522>
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002302:	f023 0304 	bic.w	r3, r3, #4
 8002306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d016      	beq.n	8002340 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002312:	f7fe fa9f 	bl	8000854 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe fa9b 	bl	8000854 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	; 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e17b      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_OscConfig+0x578>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0ed      	beq.n	800231a <HAL_RCC_OscConfig+0x532>
 800233e:	e01a      	b.n	8002376 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002340:	f7fe fa88 	bl	8000854 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002346:	e00f      	b.n	8002368 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7fe fa84 	bl	8000854 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d906      	bls.n	8002368 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e164      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002368:	4ba8      	ldr	r3, [pc, #672]	; (800260c <HAL_RCC_OscConfig+0x824>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1e8      	bne.n	8002348 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002376:	7ffb      	ldrb	r3, [r7, #31]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237c:	4ba3      	ldr	r3, [pc, #652]	; (800260c <HAL_RCC_OscConfig+0x824>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	4aa2      	ldr	r2, [pc, #648]	; (800260c <HAL_RCC_OscConfig+0x824>)
 8002382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002386:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b00      	cmp	r3, #0
 8002392:	d03c      	beq.n	800240e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800239c:	4b9b      	ldr	r3, [pc, #620]	; (800260c <HAL_RCC_OscConfig+0x824>)
 800239e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a2:	4a9a      	ldr	r2, [pc, #616]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ac:	f7fe fa52 	bl	8000854 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b4:	f7fe fa4e 	bl	8000854 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e130      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023c6:	4b91      	ldr	r3, [pc, #580]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80023c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0ef      	beq.n	80023b4 <HAL_RCC_OscConfig+0x5cc>
 80023d4:	e01b      	b.n	800240e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023d6:	4b8d      	ldr	r3, [pc, #564]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80023d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023dc:	4a8b      	ldr	r2, [pc, #556]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f7fe fa35 	bl	8000854 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ee:	f7fe fa31 	bl	8000854 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e113      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002400:	4b82      	ldr	r3, [pc, #520]	; (800260c <HAL_RCC_OscConfig+0x824>)
 8002402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1ef      	bne.n	80023ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8107 	beq.w	8002626 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	2b02      	cmp	r3, #2
 800241e:	f040 80cb 	bne.w	80025b8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002422:	4b7a      	ldr	r3, [pc, #488]	; (800260c <HAL_RCC_OscConfig+0x824>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0203 	and.w	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	429a      	cmp	r2, r3
 8002434:	d12c      	bne.n	8002490 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	3b01      	subs	r3, #1
 8002442:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d123      	bne.n	8002490 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002452:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d11b      	bne.n	8002490 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d113      	bne.n	8002490 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	085b      	lsrs	r3, r3, #1
 8002474:	3b01      	subs	r3, #1
 8002476:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d109      	bne.n	8002490 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	085b      	lsrs	r3, r3, #1
 8002488:	3b01      	subs	r3, #1
 800248a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d06d      	beq.n	800256c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d068      	beq.n	8002568 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002496:	4b5d      	ldr	r3, [pc, #372]	; (800260c <HAL_RCC_OscConfig+0x824>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024a2:	4b5a      	ldr	r3, [pc, #360]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0ba      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024b2:	4b56      	ldr	r3, [pc, #344]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a55      	ldr	r2, [pc, #340]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80024b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024be:	f7fe f9c9 	bl	8000854 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fe f9c5 	bl	8000854 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e0a7      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d8:	4b4c      	ldr	r3, [pc, #304]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e4:	4b49      	ldr	r3, [pc, #292]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	4b49      	ldr	r3, [pc, #292]	; (8002610 <HAL_RCC_OscConfig+0x828>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024f4:	3a01      	subs	r2, #1
 80024f6:	0112      	lsls	r2, r2, #4
 80024f8:	4311      	orrs	r1, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024fe:	0212      	lsls	r2, r2, #8
 8002500:	4311      	orrs	r1, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002506:	0852      	lsrs	r2, r2, #1
 8002508:	3a01      	subs	r2, #1
 800250a:	0552      	lsls	r2, r2, #21
 800250c:	4311      	orrs	r1, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002512:	0852      	lsrs	r2, r2, #1
 8002514:	3a01      	subs	r2, #1
 8002516:	0652      	lsls	r2, r2, #25
 8002518:	4311      	orrs	r1, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800251e:	06d2      	lsls	r2, r2, #27
 8002520:	430a      	orrs	r2, r1
 8002522:	493a      	ldr	r1, [pc, #232]	; (800260c <HAL_RCC_OscConfig+0x824>)
 8002524:	4313      	orrs	r3, r2
 8002526:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <HAL_RCC_OscConfig+0x824>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a37      	ldr	r2, [pc, #220]	; (800260c <HAL_RCC_OscConfig+0x824>)
 800252e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002532:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002534:	4b35      	ldr	r3, [pc, #212]	; (800260c <HAL_RCC_OscConfig+0x824>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a34      	ldr	r2, [pc, #208]	; (800260c <HAL_RCC_OscConfig+0x824>)
 800253a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800253e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002540:	f7fe f988 	bl	8000854 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe f984 	bl	8000854 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e066      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255a:	4b2c      	ldr	r3, [pc, #176]	; (800260c <HAL_RCC_OscConfig+0x824>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002566:	e05e      	b.n	8002626 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e05d      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <HAL_RCC_OscConfig+0x824>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d156      	bne.n	8002626 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_RCC_OscConfig+0x824>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a23      	ldr	r2, [pc, #140]	; (800260c <HAL_RCC_OscConfig+0x824>)
 800257e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002582:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002584:	4b21      	ldr	r3, [pc, #132]	; (800260c <HAL_RCC_OscConfig+0x824>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a20      	ldr	r2, [pc, #128]	; (800260c <HAL_RCC_OscConfig+0x824>)
 800258a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800258e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002590:	f7fe f960 	bl	8000854 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe f95c 	bl	8000854 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e03e      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025aa:	4b18      	ldr	r3, [pc, #96]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x7b0>
 80025b6:	e036      	b.n	8002626 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d031      	beq.n	8002622 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a12      	ldr	r2, [pc, #72]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80025c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	4a0c      	ldr	r2, [pc, #48]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80025dc:	f023 0303 	bic.w	r3, r3, #3
 80025e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_RCC_OscConfig+0x824>)
 80025e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80025ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe f92f 	bl	8000854 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f8:	e00c      	b.n	8002614 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe f92b 	bl	8000854 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d905      	bls.n	8002614 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e00d      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
 800260c:	40021000 	.word	0x40021000
 8002610:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_RCC_OscConfig+0x848>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ec      	bne.n	80025fa <HAL_RCC_OscConfig+0x812>
 8002620:	e001      	b.n	8002626 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e10f      	b.n	800286c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800264c:	4b89      	ldr	r3, [pc, #548]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d910      	bls.n	800267c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b86      	ldr	r3, [pc, #536]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 020f 	bic.w	r2, r3, #15
 8002662:	4984      	ldr	r1, [pc, #528]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b82      	ldr	r3, [pc, #520]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0f7      	b.n	800286c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8089 	beq.w	800279c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d133      	bne.n	80026fa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002692:	4b79      	ldr	r3, [pc, #484]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0e4      	b.n	800286c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80026a2:	f000 f9d7 	bl	8002a54 <RCC_GetSysClockFreqFromPLLSource>
 80026a6:	4602      	mov	r2, r0
 80026a8:	4b74      	ldr	r3, [pc, #464]	; (800287c <HAL_RCC_ClockConfig+0x248>)
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d955      	bls.n	800275a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80026ae:	4b72      	ldr	r3, [pc, #456]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10a      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026ba:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026c2:	4a6d      	ldr	r2, [pc, #436]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80026c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	e044      	b.n	800275a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d03e      	beq.n	800275a <HAL_RCC_ClockConfig+0x126>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d13a      	bne.n	800275a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026e4:	4b64      	ldr	r3, [pc, #400]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ec:	4a62      	ldr	r2, [pc, #392]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80026ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	e02f      	b.n	800275a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002702:	4b5d      	ldr	r3, [pc, #372]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d115      	bne.n	800273a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e0ac      	b.n	800286c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800271a:	4b57      	ldr	r3, [pc, #348]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0a0      	b.n	800286c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800272a:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e098      	b.n	800286c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800273a:	f000 f8a7 	bl	800288c <HAL_RCC_GetSysClockFreq>
 800273e:	4602      	mov	r2, r0
 8002740:	4b4e      	ldr	r3, [pc, #312]	; (800287c <HAL_RCC_ClockConfig+0x248>)
 8002742:	429a      	cmp	r2, r3
 8002744:	d909      	bls.n	800275a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002746:	4b4c      	ldr	r3, [pc, #304]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800274e:	4a4a      	ldr	r2, [pc, #296]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002754:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4944      	ldr	r1, [pc, #272]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276c:	f7fe f872 	bl	8000854 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	e00a      	b.n	800278a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7fe f86e 	bl	8000854 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e070      	b.n	800286c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 020c 	and.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d1eb      	bne.n	8002774 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d009      	beq.n	80027bc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a8:	4b33      	ldr	r3, [pc, #204]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4930      	ldr	r1, [pc, #192]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
 80027ba:	e008      	b.n	80027ce <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b80      	cmp	r3, #128	; 0x80
 80027c0:	d105      	bne.n	80027ce <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027c2:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80027c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027cc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ce:	4b29      	ldr	r3, [pc, #164]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d210      	bcs.n	80027fe <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027dc:	4b25      	ldr	r3, [pc, #148]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 020f 	bic.w	r2, r3, #15
 80027e4:	4923      	ldr	r1, [pc, #140]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ec:	4b21      	ldr	r3, [pc, #132]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e036      	b.n	800286c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280a:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	4918      	ldr	r1, [pc, #96]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002818:	4313      	orrs	r3, r2
 800281a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d009      	beq.n	800283c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4910      	ldr	r1, [pc, #64]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002838:	4313      	orrs	r3, r2
 800283a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800283c:	f000 f826 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8002840:	4601      	mov	r1, r0
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <HAL_RCC_ClockConfig+0x24c>)
 800284e:	5cd3      	ldrb	r3, [r2, r3]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	fa21 f303 	lsr.w	r3, r1, r3
 8002858:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <HAL_RCC_ClockConfig+0x250>)
 800285a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x254>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd ffab 	bl	80007bc <HAL_InitTick>
 8002866:	4603      	mov	r3, r0
 8002868:	73fb      	strb	r3, [r7, #15]

  return status;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40022000 	.word	0x40022000
 8002878:	40021000 	.word	0x40021000
 800287c:	04c4b400 	.word	0x04c4b400
 8002880:	080035a4 	.word	0x080035a4
 8002884:	20000000 	.word	0x20000000
 8002888:	20000004 	.word	0x20000004

0800288c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	; 0x24
 8002890:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289a:	4b3d      	ldr	r3, [pc, #244]	; (8002990 <HAL_RCC_GetSysClockFreq+0x104>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a4:	4b3a      	ldr	r3, [pc, #232]	; (8002990 <HAL_RCC_GetSysClockFreq+0x104>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x34>
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d121      	bne.n	80028fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d11e      	bne.n	80028fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028c0:	4b33      	ldr	r3, [pc, #204]	; (8002990 <HAL_RCC_GetSysClockFreq+0x104>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028cc:	4b30      	ldr	r3, [pc, #192]	; (8002990 <HAL_RCC_GetSysClockFreq+0x104>)
 80028ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	e005      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028dc:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <HAL_RCC_GetSysClockFreq+0x104>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028e8:	4a2a      	ldr	r2, [pc, #168]	; (8002994 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10d      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d102      	bne.n	800290a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	e004      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b08      	cmp	r3, #8
 800290e:	d101      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002910:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_RCC_GetSysClockFreq+0x110>)
 8002912:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2b0c      	cmp	r3, #12
 8002918:	d133      	bne.n	8002982 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_RCC_GetSysClockFreq+0x104>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d002      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0xa4>
 800292a:	2b03      	cmp	r3, #3
 800292c:	d003      	beq.n	8002936 <HAL_RCC_GetSysClockFreq+0xaa>
 800292e:	e005      	b.n	800293c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002932:	617b      	str	r3, [r7, #20]
      break;
 8002934:	e005      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002936:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_GetSysClockFreq+0x110>)
 8002938:	617b      	str	r3, [r7, #20]
      break;
 800293a:	e002      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	617b      	str	r3, [r7, #20]
      break;
 8002940:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <HAL_RCC_GetSysClockFreq+0x104>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	3301      	adds	r3, #1
 800294e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <HAL_RCC_GetSysClockFreq+0x104>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	fb02 f203 	mul.w	r2, r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_GetSysClockFreq+0x104>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0e5b      	lsrs	r3, r3, #25
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	3301      	adds	r3, #1
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002982:	69bb      	ldr	r3, [r7, #24]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3724      	adds	r7, #36	; 0x24
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40021000 	.word	0x40021000
 8002994:	080035b4 	.word	0x080035b4
 8002998:	00f42400 	.word	0x00f42400
 800299c:	007a1200 	.word	0x007a1200

080029a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029ac:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029b8:	f7ff f952 	bl	8001c60 <HAL_PWREx_GetVoltageRange>
 80029bc:	6178      	str	r0, [r7, #20]
 80029be:	e014      	b.n	80029ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029c0:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c4:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ca:	6593      	str	r3, [r2, #88]	; 0x58
 80029cc:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029d8:	f7ff f942 	bl	8001c60 <HAL_PWREx_GetVoltageRange>
 80029dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f0:	d10b      	bne.n	8002a0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d913      	bls.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2ba0      	cmp	r3, #160	; 0xa0
 80029fc:	d902      	bls.n	8002a04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029fe:	2302      	movs	r3, #2
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	e00d      	b.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a04:	2301      	movs	r3, #1
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	e00a      	b.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a0e:	d902      	bls.n	8002a16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002a10:	2302      	movs	r3, #2
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	e004      	b.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b70      	cmp	r3, #112	; 0x70
 8002a1a:	d101      	bne.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 020f 	bic.w	r2, r3, #15
 8002a28:	4909      	ldr	r1, [pc, #36]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40022000 	.word	0x40022000

08002a54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002a5e:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d118      	bne.n	8002a9c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a76:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e005      	b.n	8002a92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a92:	4a21      	ldr	r2, [pc, #132]	; (8002b18 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d002      	beq.n	8002ab2 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d003      	beq.n	8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002ab0:	e005      	b.n	8002abe <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002ab4:	613b      	str	r3, [r7, #16]
    break;
 8002ab6:	e005      	b.n	8002ac4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002aba:	613b      	str	r3, [r7, #16]
    break;
 8002abc:	e002      	b.n	8002ac4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	613b      	str	r3, [r7, #16]
    break;
 8002ac2:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	fb02 f203 	mul.w	r2, r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	0e5b      	lsrs	r3, r3, #25
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	3301      	adds	r3, #1
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b02:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002b04:	683b      	ldr	r3, [r7, #0]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	080035b4 	.word	0x080035b4
 8002b1c:	00f42400 	.word	0x00f42400
 8002b20:	007a1200 	.word	0x007a1200

08002b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b30:	2300      	movs	r3, #0
 8002b32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d03d      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d00b      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d804      	bhi.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d015      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b54:	e01d      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002b56:	2b60      	cmp	r3, #96	; 0x60
 8002b58:	d01e      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002b5a:	2b80      	cmp	r3, #128	; 0x80
 8002b5c:	d01c      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002b5e:	e018      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b60:	4b86      	ldr	r3, [pc, #536]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a85      	ldr	r2, [pc, #532]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b6c:	e015      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fafd 	bl	8003174 <RCCEx_PLLSAI1_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b7e:	e00c      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3320      	adds	r3, #32
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fbe4 	bl	8003354 <RCCEx_PLLSAI2_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b90:	e003      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	74fb      	strb	r3, [r7, #19]
      break;
 8002b96:	e000      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8002b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ba0:	4b76      	ldr	r3, [pc, #472]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ba6:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bae:	4973      	ldr	r1, [pc, #460]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002bb6:	e001      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d042      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd0:	d00f      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd6:	d805      	bhi.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d011      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be0:	d017      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002be2:	e01f      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002be8:	d01f      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bee:	d01c      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bf0:	e018      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bf2:	4b62      	ldr	r3, [pc, #392]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	4a61      	ldr	r2, [pc, #388]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bfe:	e015      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fab4 	bl	8003174 <RCCEx_PLLSAI1_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c10:	e00c      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3320      	adds	r3, #32
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fb9b 	bl	8003354 <RCCEx_PLLSAI2_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c22:	e003      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	74fb      	strb	r3, [r7, #19]
      break;
 8002c28:	e000      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8002c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10b      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c32:	4b52      	ldr	r3, [pc, #328]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	494e      	ldr	r1, [pc, #312]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002c48:	e001      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4a:	7cfb      	ldrb	r3, [r7, #19]
 8002c4c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 809f 	beq.w	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c60:	4b46      	ldr	r3, [pc, #280]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c70:	2300      	movs	r3, #0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	4a40      	ldr	r2, [pc, #256]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c80:	6593      	str	r3, [r2, #88]	; 0x58
 8002c82:	4b3e      	ldr	r3, [pc, #248]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c92:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a3a      	ldr	r2, [pc, #232]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c9e:	f7fd fdd9 	bl	8000854 <HAL_GetTick>
 8002ca2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ca4:	e009      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fd fdd5 	bl	8000854 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d902      	bls.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	74fb      	strb	r3, [r7, #19]
        break;
 8002cb8:	e005      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cba:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0ef      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d15b      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d01f      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d019      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cea:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cf6:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	4a1f      	ldr	r2, [pc, #124]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	4a1b      	ldr	r2, [pc, #108]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d16:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d016      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fd fd94 	bl	8000854 <HAL_GetTick>
 8002d2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fd fd90 	bl	8000854 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d902      	bls.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	74fb      	strb	r3, [r7, #19]
            break;
 8002d46:	e006      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0ec      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8002d56:	7cfb      	ldrb	r3, [r7, #19]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d5c:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	4903      	ldr	r1, [pc, #12]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d74:	e008      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	74bb      	strb	r3, [r7, #18]
 8002d7a:	e005      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d88:	7c7b      	ldrb	r3, [r7, #17]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d105      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8e:	4ba0      	ldr	r3, [pc, #640]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	4a9f      	ldr	r2, [pc, #636]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da6:	4b9a      	ldr	r3, [pc, #616]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	f023 0203 	bic.w	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	4996      	ldr	r1, [pc, #600]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dc8:	4b91      	ldr	r3, [pc, #580]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f023 020c 	bic.w	r2, r3, #12
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	498e      	ldr	r1, [pc, #568]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dea:	4b89      	ldr	r3, [pc, #548]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	4985      	ldr	r1, [pc, #532]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e0c:	4b80      	ldr	r3, [pc, #512]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1a:	497d      	ldr	r1, [pc, #500]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e2e:	4b78      	ldr	r3, [pc, #480]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3c:	4974      	ldr	r1, [pc, #464]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e50:	4b6f      	ldr	r3, [pc, #444]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5e:	496c      	ldr	r1, [pc, #432]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e72:	4b67      	ldr	r3, [pc, #412]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e80:	4963      	ldr	r1, [pc, #396]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e94:	4b5e      	ldr	r3, [pc, #376]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea2:	495b      	ldr	r1, [pc, #364]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eb6:	4b56      	ldr	r3, [pc, #344]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	4952      	ldr	r1, [pc, #328]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ed8:	4b4d      	ldr	r3, [pc, #308]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	494a      	ldr	r1, [pc, #296]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002efa:	4b45      	ldr	r3, [pc, #276]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	4941      	ldr	r1, [pc, #260]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f1c:	4b3c      	ldr	r3, [pc, #240]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f22:	f023 0203 	bic.w	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2a:	4939      	ldr	r1, [pc, #228]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d028      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f3e:	4b34      	ldr	r3, [pc, #208]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4c:	4930      	ldr	r1, [pc, #192]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f5c:	d106      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f5e:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	4a2b      	ldr	r2, [pc, #172]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f68:	60d3      	str	r3, [r2, #12]
 8002f6a:	e011      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f8f9 	bl	8003174 <RCCEx_PLLSAI1_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f86:	7cfb      	ldrb	r3, [r7, #19]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8002f8c:	7cfb      	ldrb	r3, [r7, #19]
 8002f8e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d04d      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa4:	d108      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fac:	4a18      	ldr	r2, [pc, #96]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002fb6:	e012      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002fb8:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fbe:	4a14      	ldr	r2, [pc, #80]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fc4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd6:	490e      	ldr	r1, [pc, #56]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fe6:	d106      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4a08      	ldr	r2, [pc, #32]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ff2:	60d3      	str	r3, [r2, #12]
 8002ff4:	e020      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ffe:	d109      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a02      	ldr	r2, [pc, #8]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300a:	60d3      	str	r3, [r2, #12]
 800300c:	e014      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800301c:	d10c      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	2101      	movs	r1, #1
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f8a5 	bl	8003174 <RCCEx_PLLSAI1_Config>
 800302a:	4603      	mov	r3, r0
 800302c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d028      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003044:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003052:	4947      	ldr	r1, [pc, #284]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800305e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003062:	d106      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003064:	4b42      	ldr	r3, [pc, #264]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a41      	ldr	r2, [pc, #260]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800306a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800306e:	60d3      	str	r3, [r2, #12]
 8003070:	e011      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003076:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800307a:	d10c      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	2101      	movs	r1, #1
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f876 	bl	8003174 <RCCEx_PLLSAI1_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003092:	7cfb      	ldrb	r3, [r7, #19]
 8003094:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01e      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030a2:	4b33      	ldr	r3, [pc, #204]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b2:	492f      	ldr	r1, [pc, #188]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3304      	adds	r3, #4
 80030ca:	2102      	movs	r1, #2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f851 	bl	8003174 <RCCEx_PLLSAI1_Config>
 80030d2:	4603      	mov	r3, r0
 80030d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030ec:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030f2:	f023 0204 	bic.w	r2, r3, #4
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fc:	491c      	ldr	r1, [pc, #112]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003110:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003112:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003116:	f023 0218 	bic.w	r2, r3, #24
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003120:	4913      	ldr	r1, [pc, #76]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d017      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003134:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800313a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003144:	490a      	ldr	r1, [pc, #40]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003156:	d105      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800315e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003162:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003164:	7cbb      	ldrb	r3, [r7, #18]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000

08003174 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003182:	4b70      	ldr	r3, [pc, #448]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00e      	beq.n	80031ac <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800318e:	4b6d      	ldr	r3, [pc, #436]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0203 	and.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d103      	bne.n	80031a6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
       ||
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d13f      	bne.n	8003226 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	e03c      	b.n	8003226 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d00c      	beq.n	80031ce <RCCEx_PLLSAI1_Config+0x5a>
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d013      	beq.n	80031e0 <RCCEx_PLLSAI1_Config+0x6c>
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d120      	bne.n	80031fe <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031bc:	4b61      	ldr	r3, [pc, #388]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d11d      	bne.n	8003204 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031cc:	e01a      	b.n	8003204 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031ce:	4b5d      	ldr	r3, [pc, #372]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031de:	e013      	b.n	8003208 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031e0:	4b58      	ldr	r3, [pc, #352]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10f      	bne.n	800320c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031ec:	4b55      	ldr	r3, [pc, #340]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031fc:	e006      	b.n	800320c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
      break;
 8003202:	e004      	b.n	800320e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003204:	bf00      	nop
 8003206:	e002      	b.n	800320e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003208:	bf00      	nop
 800320a:	e000      	b.n	800320e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800320c:	bf00      	nop
    }

    if(status == HAL_OK)
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d108      	bne.n	8003226 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003214:	4b4b      	ldr	r3, [pc, #300]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f023 0203 	bic.w	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4948      	ldr	r1, [pc, #288]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003222:	4313      	orrs	r3, r2
 8003224:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f040 8086 	bne.w	800333a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800322e:	4b45      	ldr	r3, [pc, #276]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a44      	ldr	r2, [pc, #272]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003234:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323a:	f7fd fb0b 	bl	8000854 <HAL_GetTick>
 800323e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003240:	e009      	b.n	8003256 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003242:	f7fd fb07 	bl	8000854 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d902      	bls.n	8003256 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	73fb      	strb	r3, [r7, #15]
        break;
 8003254:	e005      	b.n	8003262 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1ef      	bne.n	8003242 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d168      	bne.n	800333a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d113      	bne.n	8003296 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800326e:	4b35      	ldr	r3, [pc, #212]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	4b35      	ldr	r3, [pc, #212]	; (8003348 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003274:	4013      	ands	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6892      	ldr	r2, [r2, #8]
 800327a:	0211      	lsls	r1, r2, #8
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	68d2      	ldr	r2, [r2, #12]
 8003280:	06d2      	lsls	r2, r2, #27
 8003282:	4311      	orrs	r1, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6852      	ldr	r2, [r2, #4]
 8003288:	3a01      	subs	r2, #1
 800328a:	0112      	lsls	r2, r2, #4
 800328c:	430a      	orrs	r2, r1
 800328e:	492d      	ldr	r1, [pc, #180]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003290:	4313      	orrs	r3, r2
 8003292:	610b      	str	r3, [r1, #16]
 8003294:	e02d      	b.n	80032f2 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d115      	bne.n	80032c8 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800329c:	4b29      	ldr	r3, [pc, #164]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	4b2a      	ldr	r3, [pc, #168]	; (800334c <RCCEx_PLLSAI1_Config+0x1d8>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6892      	ldr	r2, [r2, #8]
 80032a8:	0211      	lsls	r1, r2, #8
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6912      	ldr	r2, [r2, #16]
 80032ae:	0852      	lsrs	r2, r2, #1
 80032b0:	3a01      	subs	r2, #1
 80032b2:	0552      	lsls	r2, r2, #21
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6852      	ldr	r2, [r2, #4]
 80032ba:	3a01      	subs	r2, #1
 80032bc:	0112      	lsls	r2, r2, #4
 80032be:	430a      	orrs	r2, r1
 80032c0:	4920      	ldr	r1, [pc, #128]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	610b      	str	r3, [r1, #16]
 80032c6:	e014      	b.n	80032f2 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032c8:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6892      	ldr	r2, [r2, #8]
 80032d4:	0211      	lsls	r1, r2, #8
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6952      	ldr	r2, [r2, #20]
 80032da:	0852      	lsrs	r2, r2, #1
 80032dc:	3a01      	subs	r2, #1
 80032de:	0652      	lsls	r2, r2, #25
 80032e0:	4311      	orrs	r1, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6852      	ldr	r2, [r2, #4]
 80032e6:	3a01      	subs	r2, #1
 80032e8:	0112      	lsls	r2, r2, #4
 80032ea:	430a      	orrs	r2, r1
 80032ec:	4915      	ldr	r1, [pc, #84]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032f2:	4b14      	ldr	r3, [pc, #80]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a13      	ldr	r2, [pc, #76]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 80032f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fe:	f7fd faa9 	bl	8000854 <HAL_GetTick>
 8003302:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003304:	e009      	b.n	800331a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003306:	f7fd faa5 	bl	8000854 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d902      	bls.n	800331a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	73fb      	strb	r3, [r7, #15]
          break;
 8003318:	e005      	b.n	8003326 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0ef      	beq.n	8003306 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d106      	bne.n	800333a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	4903      	ldr	r1, [pc, #12]	; (8003344 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003336:	4313      	orrs	r3, r2
 8003338:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800333a:	7bfb      	ldrb	r3, [r7, #15]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40021000 	.word	0x40021000
 8003348:	07ff800f 	.word	0x07ff800f
 800334c:	ff9f800f 	.word	0xff9f800f
 8003350:	f9ff800f 	.word	0xf9ff800f

08003354 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003362:	4b70      	ldr	r3, [pc, #448]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00e      	beq.n	800338c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800336e:	4b6d      	ldr	r3, [pc, #436]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0203 	and.w	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d103      	bne.n	8003386 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
       ||
 8003382:	2b00      	cmp	r3, #0
 8003384:	d13f      	bne.n	8003406 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
 800338a:	e03c      	b.n	8003406 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d00c      	beq.n	80033ae <RCCEx_PLLSAI2_Config+0x5a>
 8003394:	2b03      	cmp	r3, #3
 8003396:	d013      	beq.n	80033c0 <RCCEx_PLLSAI2_Config+0x6c>
 8003398:	2b01      	cmp	r3, #1
 800339a:	d120      	bne.n	80033de <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800339c:	4b61      	ldr	r3, [pc, #388]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d11d      	bne.n	80033e4 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ac:	e01a      	b.n	80033e4 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033ae:	4b5d      	ldr	r3, [pc, #372]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d116      	bne.n	80033e8 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033be:	e013      	b.n	80033e8 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033c0:	4b58      	ldr	r3, [pc, #352]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10f      	bne.n	80033ec <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033cc:	4b55      	ldr	r3, [pc, #340]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033dc:	e006      	b.n	80033ec <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
      break;
 80033e2:	e004      	b.n	80033ee <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80033e4:	bf00      	nop
 80033e6:	e002      	b.n	80033ee <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80033e8:	bf00      	nop
 80033ea:	e000      	b.n	80033ee <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80033ec:	bf00      	nop
    }

    if(status == HAL_OK)
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d108      	bne.n	8003406 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80033f4:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f023 0203 	bic.w	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4948      	ldr	r1, [pc, #288]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003402:	4313      	orrs	r3, r2
 8003404:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f040 8086 	bne.w	800351a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800340e:	4b45      	ldr	r3, [pc, #276]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a44      	ldr	r2, [pc, #272]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341a:	f7fd fa1b 	bl	8000854 <HAL_GetTick>
 800341e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003420:	e009      	b.n	8003436 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003422:	f7fd fa17 	bl	8000854 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d902      	bls.n	8003436 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	73fb      	strb	r3, [r7, #15]
        break;
 8003434:	e005      	b.n	8003442 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003436:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1ef      	bne.n	8003422 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d168      	bne.n	800351a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d113      	bne.n	8003476 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800344e:	4b35      	ldr	r3, [pc, #212]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	4b35      	ldr	r3, [pc, #212]	; (8003528 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003454:	4013      	ands	r3, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6892      	ldr	r2, [r2, #8]
 800345a:	0211      	lsls	r1, r2, #8
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	68d2      	ldr	r2, [r2, #12]
 8003460:	06d2      	lsls	r2, r2, #27
 8003462:	4311      	orrs	r1, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6852      	ldr	r2, [r2, #4]
 8003468:	3a01      	subs	r2, #1
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	430a      	orrs	r2, r1
 800346e:	492d      	ldr	r1, [pc, #180]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003470:	4313      	orrs	r3, r2
 8003472:	614b      	str	r3, [r1, #20]
 8003474:	e02d      	b.n	80034d2 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d115      	bne.n	80034a8 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800347c:	4b29      	ldr	r3, [pc, #164]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	4b2a      	ldr	r3, [pc, #168]	; (800352c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003482:	4013      	ands	r3, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6892      	ldr	r2, [r2, #8]
 8003488:	0211      	lsls	r1, r2, #8
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6912      	ldr	r2, [r2, #16]
 800348e:	0852      	lsrs	r2, r2, #1
 8003490:	3a01      	subs	r2, #1
 8003492:	0552      	lsls	r2, r2, #21
 8003494:	4311      	orrs	r1, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6852      	ldr	r2, [r2, #4]
 800349a:	3a01      	subs	r2, #1
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	430a      	orrs	r2, r1
 80034a0:	4920      	ldr	r1, [pc, #128]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	614b      	str	r3, [r1, #20]
 80034a6:	e014      	b.n	80034d2 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	4b20      	ldr	r3, [pc, #128]	; (8003530 <RCCEx_PLLSAI2_Config+0x1dc>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6892      	ldr	r2, [r2, #8]
 80034b4:	0211      	lsls	r1, r2, #8
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6952      	ldr	r2, [r2, #20]
 80034ba:	0852      	lsrs	r2, r2, #1
 80034bc:	3a01      	subs	r2, #1
 80034be:	0652      	lsls	r2, r2, #25
 80034c0:	4311      	orrs	r1, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6852      	ldr	r2, [r2, #4]
 80034c6:	3a01      	subs	r2, #1
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	430a      	orrs	r2, r1
 80034cc:	4915      	ldr	r1, [pc, #84]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034d2:	4b14      	ldr	r3, [pc, #80]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a13      	ldr	r2, [pc, #76]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034de:	f7fd f9b9 	bl	8000854 <HAL_GetTick>
 80034e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034e4:	e009      	b.n	80034fa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034e6:	f7fd f9b5 	bl	8000854 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d902      	bls.n	80034fa <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	73fb      	strb	r3, [r7, #15]
          break;
 80034f8:	e005      	b.n	8003506 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0ef      	beq.n	80034e6 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d106      	bne.n	800351a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	4903      	ldr	r1, [pc, #12]	; (8003524 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003516:	4313      	orrs	r3, r2
 8003518:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800351a:	7bfb      	ldrb	r3, [r7, #15]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	07ff800f 	.word	0x07ff800f
 800352c:	ff9f800f 	.word	0xff9f800f
 8003530:	f9ff800f 	.word	0xf9ff800f

08003534 <__libc_init_array>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	4e0d      	ldr	r6, [pc, #52]	; (800356c <__libc_init_array+0x38>)
 8003538:	4c0d      	ldr	r4, [pc, #52]	; (8003570 <__libc_init_array+0x3c>)
 800353a:	1ba4      	subs	r4, r4, r6
 800353c:	10a4      	asrs	r4, r4, #2
 800353e:	2500      	movs	r5, #0
 8003540:	42a5      	cmp	r5, r4
 8003542:	d109      	bne.n	8003558 <__libc_init_array+0x24>
 8003544:	4e0b      	ldr	r6, [pc, #44]	; (8003574 <__libc_init_array+0x40>)
 8003546:	4c0c      	ldr	r4, [pc, #48]	; (8003578 <__libc_init_array+0x44>)
 8003548:	f000 f820 	bl	800358c <_init>
 800354c:	1ba4      	subs	r4, r4, r6
 800354e:	10a4      	asrs	r4, r4, #2
 8003550:	2500      	movs	r5, #0
 8003552:	42a5      	cmp	r5, r4
 8003554:	d105      	bne.n	8003562 <__libc_init_array+0x2e>
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800355c:	4798      	blx	r3
 800355e:	3501      	adds	r5, #1
 8003560:	e7ee      	b.n	8003540 <__libc_init_array+0xc>
 8003562:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003566:	4798      	blx	r3
 8003568:	3501      	adds	r5, #1
 800356a:	e7f2      	b.n	8003552 <__libc_init_array+0x1e>
 800356c:	080035e4 	.word	0x080035e4
 8003570:	080035e4 	.word	0x080035e4
 8003574:	080035e4 	.word	0x080035e4
 8003578:	080035e8 	.word	0x080035e8

0800357c <memset>:
 800357c:	4402      	add	r2, r0
 800357e:	4603      	mov	r3, r0
 8003580:	4293      	cmp	r3, r2
 8003582:	d100      	bne.n	8003586 <memset+0xa>
 8003584:	4770      	bx	lr
 8003586:	f803 1b01 	strb.w	r1, [r3], #1
 800358a:	e7f9      	b.n	8003580 <memset+0x4>

0800358c <_init>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr

08003598 <_fini>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	bf00      	nop
 800359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359e:	bc08      	pop	{r3}
 80035a0:	469e      	mov	lr, r3
 80035a2:	4770      	bx	lr
