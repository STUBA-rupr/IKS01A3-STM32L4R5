
XnucleoSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d8  080051d8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080051d8  080051d8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051d8  080051d8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051d8  080051d8  000151d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080051e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bcc  20000010  080051f0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bdc  080051f0  00021bdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161ab  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c4d  00000000  00000000  000361eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a8  00000000  00000000  00038e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  0003a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002acf6  00000000  00000000  0003b430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001019f  00000000  00000000  00066126  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010ac08  00000000  00000000  000762c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00180ecd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005180  00000000  00000000  00180f48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005148 	.word	0x08005148

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08005148 	.word	0x08005148

08000200 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	4a07      	ldr	r2, [pc, #28]	; (800022c <vApplicationGetIdleTaskMemory+0x2c>)
 8000210:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <vApplicationGetIdleTaskMemory+0x30>)
 8000216:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2280      	movs	r2, #128	; 0x80
 800021c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800021e:	bf00      	nop
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	2000002c 	.word	0x2000002c
 8000230:	20000080 	.word	0x20000080

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b08a      	sub	sp, #40	; 0x28
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fbea 	bl	8000a12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f833 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f8e7 	bl	8000414 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000246:	f000 f8a5 	bl	8000394 <MX_I2C1_Init>
  HAL_StatusTypeDef ret;

  //HAL_I2C_IsDeviceReady(hi2c, DevAddress, Trials, Timeout)
  //hi2c1->Instance->CR1;

  ret = HAL_I2C_GetState(&hi2c1);
 800024a:	4814      	ldr	r0, [pc, #80]	; (800029c <main+0x68>)
 800024c:	f001 fb27 	bl	800189e <HAL_I2C_GetState>
 8000250:	4603      	mov	r3, r0
 8000252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(HAL_I2C_IsDeviceReady(&hi2c1, 0x95, 3, 3000)!=HAL_OK)
 8000256:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800025a:	2203      	movs	r2, #3
 800025c:	2195      	movs	r1, #149	; 0x95
 800025e:	480f      	ldr	r0, [pc, #60]	; (800029c <main+0x68>)
 8000260:	f001 fa16 	bl	8001690 <HAL_I2C_IsDeviceReady>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d003      	beq.n	8000272 <main+0x3e>
  {
	  err = HAL_I2C_GetError(&hi2c1);
 800026a:	480c      	ldr	r0, [pc, #48]	; (800029c <main+0x68>)
 800026c:	f001 fb25 	bl	80018ba <HAL_I2C_GetError>
 8000270:	6238      	str	r0, [r7, #32]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1000);
 8000272:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <main+0x6c>)
 8000274:	1d3c      	adds	r4, r7, #4
 8000276:	461d      	mov	r5, r3
 8000278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800027c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2100      	movs	r1, #0
 8000288:	4618      	mov	r0, r3
 800028a:	f003 fd2c 	bl	8003ce6 <osThreadCreate>
 800028e:	4602      	mov	r2, r0
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <main+0x70>)
 8000292:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000294:	f003 fd20 	bl	8003cd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000298:	e7fe      	b.n	8000298 <main+0x64>
 800029a:	bf00      	nop
 800029c:	20001b44 	.word	0x20001b44
 80002a0:	0800516c 	.word	0x0800516c
 80002a4:	20001b3c 	.word	0x20001b3c

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b0bc      	sub	sp, #240	; 0xf0
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80002b2:	2244      	movs	r2, #68	; 0x44
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f004 ff3e 	bl	8005138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2294      	movs	r2, #148	; 0x94
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f004 ff30 	bl	8005138 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002dc:	f001 fde6 	bl	8001eac <HAL_PWREx_ControlVoltageScaling>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x42>
  {
    Error_Handler();
 80002e6:	f000 fa4f 	bl	8000788 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ea:	2302      	movs	r3, #2
 80002ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f8:	2340      	movs	r3, #64	; 0x40
 80002fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000304:	2302      	movs	r3, #2
 8000306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 800030a:	2302      	movs	r3, #2
 800030c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000310:	2314      	movs	r3, #20
 8000312:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000316:	2302      	movs	r3, #2
 8000318:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800031c:	2302      	movs	r3, #2
 800031e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000322:	2302      	movs	r3, #2
 8000324:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000328:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800032c:	4618      	mov	r0, r3
 800032e:	f001 fe61 	bl	8001ff4 <HAL_RCC_OscConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000338:	f000 fa26 	bl	8000788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	230f      	movs	r3, #15
 800033e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000342:	2303      	movs	r3, #3
 8000344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800035a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800035e:	2103      	movs	r1, #3
 8000360:	4618      	mov	r0, r3
 8000362:	f002 fa6d 	bl	8002840 <HAL_RCC_ClockConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800036c:	f000 fa0c 	bl	8000788 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000370:	2340      	movs	r3, #64	; 0x40
 8000372:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000374:	2300      	movs	r3, #0
 8000376:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	4618      	mov	r0, r3
 800037c:	f002 fd2c 	bl	8002dd8 <HAL_RCCEx_PeriphCLKConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000386:	f000 f9ff 	bl	8000788 <Error_Handler>
  }
}
 800038a:	bf00      	nop
 800038c:	37f0      	adds	r7, #240	; 0xf0
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <MX_I2C1_Init+0x74>)
 800039a:	4a1c      	ldr	r2, [pc, #112]	; (800040c <MX_I2C1_Init+0x78>)
 800039c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_I2C1_Init+0x74>)
 80003a0:	4a1b      	ldr	r2, [pc, #108]	; (8000410 <MX_I2C1_Init+0x7c>)
 80003a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <MX_I2C1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <MX_I2C1_Init+0x74>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003b6:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_I2C1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <MX_I2C1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_I2C1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_I2C1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ce:	480e      	ldr	r0, [pc, #56]	; (8000408 <MX_I2C1_Init+0x74>)
 80003d0:	f000 fdca 	bl	8000f68 <HAL_I2C_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003da:	f000 f9d5 	bl	8000788 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003de:	2100      	movs	r1, #0
 80003e0:	4809      	ldr	r0, [pc, #36]	; (8000408 <MX_I2C1_Init+0x74>)
 80003e2:	f001 fcab 	bl	8001d3c <HAL_I2CEx_ConfigAnalogFilter>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003ec:	f000 f9cc 	bl	8000788 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003f0:	2100      	movs	r1, #0
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_I2C1_Init+0x74>)
 80003f4:	f001 fced 	bl	8001dd2 <HAL_I2CEx_ConfigDigitalFilter>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003fe:	f000 f9c3 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20001b44 	.word	0x20001b44
 800040c:	40005400 	.word	0x40005400
 8000410:	10909cec 	.word	0x10909cec

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_GPIO_Init+0x5c>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	4a14      	ldr	r2, [pc, #80]	; (8000470 <MX_GPIO_Init+0x5c>)
 8000420:	f043 0304 	orr.w	r3, r3, #4
 8000424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <MX_GPIO_Init+0x5c>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	f003 0304 	and.w	r3, r3, #4
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_GPIO_Init+0x5c>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <MX_GPIO_Init+0x5c>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_GPIO_Init+0x5c>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_GPIO_Init+0x5c>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	4a08      	ldr	r2, [pc, #32]	; (8000470 <MX_GPIO_Init+0x5c>)
 8000450:	f043 0302 	orr.w	r3, r3, #2
 8000454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_GPIO_Init+0x5c>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	f003 0302 	and.w	r3, r3, #2
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

}
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000

08000474 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b090      	sub	sp, #64	; 0x40
 8000478:	af04      	add	r7, sp, #16
 800047a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	float value_x0, value_x1, value_y0, value_y1;
	uint32_t err;
	int16_t val;
	uint8_t buf[3]={0,0,0};
 800047c:	2300      	movs	r3, #0
 800047e:	743b      	strb	r3, [r7, #16]
 8000480:	2300      	movs	r3, #0
 8000482:	747b      	strb	r3, [r7, #17]
 8000484:	2300      	movs	r3, #0
 8000486:	74bb      	strb	r3, [r7, #18]
	uint16_t temperature;
	uint8_t temperature_low;
	const uint8_t TMP102_ADDR = 0x95 ;
 8000488:	2395      	movs	r3, #149	; 0x95
 800048a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  // temperature
	  	buf[0] = 0x0; // hi bit
 800048e:	2300      	movs	r3, #0
 8000490:	743b      	strb	r3, [r7, #16]
	  	ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, 3000);
 8000492:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000496:	b299      	uxth	r1, r3
 8000498:	f107 0210 	add.w	r2, r7, #16
 800049c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	2301      	movs	r3, #1
 80004a4:	48a7      	ldr	r0, [pc, #668]	; (8000744 <StartDefaultTask+0x2d0>)
 80004a6:	f000 fdef 	bl	8001088 <HAL_I2C_Master_Transmit>
 80004aa:	4603      	mov	r3, r0
 80004ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  	ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, (uint8_t*)&temperature, 1, 3000);
 80004b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004b4:	b299      	uxth	r1, r3
 80004b6:	f107 020e 	add.w	r2, r7, #14
 80004ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2301      	movs	r3, #1
 80004c2:	48a0      	ldr	r0, [pc, #640]	; (8000744 <StartDefaultTask+0x2d0>)
 80004c4:	f000 fed4 	bl	8001270 <HAL_I2C_Master_Receive>
 80004c8:	4603      	mov	r3, r0
 80004ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	  	buf[0] = 0x2; // lo bit
 80004ce:	2302      	movs	r3, #2
 80004d0:	743b      	strb	r3, [r7, #16]
	  	ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, 3000);
 80004d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004d6:	b299      	uxth	r1, r3
 80004d8:	f107 0210 	add.w	r2, r7, #16
 80004dc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2301      	movs	r3, #1
 80004e4:	4897      	ldr	r0, [pc, #604]	; (8000744 <StartDefaultTask+0x2d0>)
 80004e6:	f000 fdcf 	bl	8001088 <HAL_I2C_Master_Transmit>
 80004ea:	4603      	mov	r3, r0
 80004ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  	ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, &temperature_low, 1, 3000);
 80004f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004f4:	b299      	uxth	r1, r3
 80004f6:	f107 020d 	add.w	r2, r7, #13
 80004fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2301      	movs	r3, #1
 8000502:	4890      	ldr	r0, [pc, #576]	; (8000744 <StartDefaultTask+0x2d0>)
 8000504:	f000 feb4 	bl	8001270 <HAL_I2C_Master_Receive>
 8000508:	4603      	mov	r3, r0
 800050a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	  	temperature  = (temperature << 8) + temperature_low;
 800050e:	89fb      	ldrh	r3, [r7, #14]
 8000510:	021b      	lsls	r3, r3, #8
 8000512:	b29a      	uxth	r2, r3
 8000514:	7b7b      	ldrb	r3, [r7, #13]
 8000516:	b29b      	uxth	r3, r3
 8000518:	4413      	add	r3, r2
 800051a:	b29b      	uxth	r3, r3
 800051c:	81fb      	strh	r3, [r7, #14]
	  	temp = ((float)temperature) / 256.0f;
 800051e:	89fb      	ldrh	r3, [r7, #14]
 8000520:	ee07 3a90 	vmov	s15, r3
 8000524:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000528:	eddf 6a87 	vldr	s13, [pc, #540]	; 8000748 <StartDefaultTask+0x2d4>
 800052c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000530:	4b86      	ldr	r3, [pc, #536]	; (800074c <StartDefaultTask+0x2d8>)
 8000532:	edc3 7a00 	vstr	s15, [r3]

	  	// humidity
	  	ret = HAL_I2C_Mem_Read(&hi2c1, 0xBF, 0x36 | 0x80U, I2C_MEMADD_SIZE_8BIT, buf, 2, 3000);
 8000536:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800053a:	9302      	str	r3, [sp, #8]
 800053c:	2302      	movs	r3, #2
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2301      	movs	r3, #1
 8000548:	22b6      	movs	r2, #182	; 0xb6
 800054a:	21bf      	movs	r1, #191	; 0xbf
 800054c:	487d      	ldr	r0, [pc, #500]	; (8000744 <StartDefaultTask+0x2d0>)
 800054e:	f000 ff85 	bl	800145c <HAL_I2C_Mem_Read>
 8000552:	4603      	mov	r3, r0
 8000554:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  	value_x0 = (int16_t)((buf[1] * 256) + buf[0]) * 1.0f;
 8000558:	7c7b      	ldrb	r3, [r7, #17]
 800055a:	b29b      	uxth	r3, r3
 800055c:	021b      	lsls	r3, r3, #8
 800055e:	b29a      	uxth	r2, r3
 8000560:	7c3b      	ldrb	r3, [r7, #16]
 8000562:	b29b      	uxth	r3, r3
 8000564:	4413      	add	r3, r2
 8000566:	b29b      	uxth	r3, r3
 8000568:	b21b      	sxth	r3, r3
 800056a:	ee07 3a90 	vmov	s15, r3
 800056e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000572:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	  	ret = HAL_I2C_Mem_Read(&hi2c1, 0xBF, 0x30 | 0x80U, I2C_MEMADD_SIZE_8BIT, buf, 1, 3000);
 8000576:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800057a:	9302      	str	r3, [sp, #8]
 800057c:	2301      	movs	r3, #1
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2301      	movs	r3, #1
 8000588:	22b0      	movs	r2, #176	; 0xb0
 800058a:	21bf      	movs	r1, #191	; 0xbf
 800058c:	486d      	ldr	r0, [pc, #436]	; (8000744 <StartDefaultTask+0x2d0>)
 800058e:	f000 ff65 	bl	800145c <HAL_I2C_Mem_Read>
 8000592:	4603      	mov	r3, r0
 8000594:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  	value_y0 = buf[0] / 2.0f;
 8000598:	7c3b      	ldrb	r3, [r7, #16]
 800059a:	ee07 3a90 	vmov	s15, r3
 800059e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005a2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80005a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	  	ret = HAL_I2C_Mem_Read(&hi2c1, 0xBF, 0x3A | 0x80U, I2C_MEMADD_SIZE_8BIT, buf, 2, 3000);
 80005ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005b2:	9302      	str	r3, [sp, #8]
 80005b4:	2302      	movs	r3, #2
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2301      	movs	r3, #1
 80005c0:	22ba      	movs	r2, #186	; 0xba
 80005c2:	21bf      	movs	r1, #191	; 0xbf
 80005c4:	485f      	ldr	r0, [pc, #380]	; (8000744 <StartDefaultTask+0x2d0>)
 80005c6:	f000 ff49 	bl	800145c <HAL_I2C_Mem_Read>
 80005ca:	4603      	mov	r3, r0
 80005cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  	value_x1 = (int16_t)((buf[1] * 256) + buf[0]) * 1.0f;
 80005d0:	7c7b      	ldrb	r3, [r7, #17]
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	021b      	lsls	r3, r3, #8
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	7c3b      	ldrb	r3, [r7, #16]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	4413      	add	r3, r2
 80005de:	b29b      	uxth	r3, r3
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	ee07 3a90 	vmov	s15, r3
 80005e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ea:	edc7 7a08 	vstr	s15, [r7, #32]

	  	ret = HAL_I2C_Mem_Read(&hi2c1, 0xBF, 0x31 | 0x80U, I2C_MEMADD_SIZE_8BIT, buf, 1, 3000);
 80005ee:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005f2:	9302      	str	r3, [sp, #8]
 80005f4:	2301      	movs	r3, #1
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2301      	movs	r3, #1
 8000600:	22b1      	movs	r2, #177	; 0xb1
 8000602:	21bf      	movs	r1, #191	; 0xbf
 8000604:	484f      	ldr	r0, [pc, #316]	; (8000744 <StartDefaultTask+0x2d0>)
 8000606:	f000 ff29 	bl	800145c <HAL_I2C_Mem_Read>
 800060a:	4603      	mov	r3, r0
 800060c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  	value_y1 = buf[0] / 2.0f;
 8000610:	7c3b      	ldrb	r3, [r7, #16]
 8000612:	ee07 3a90 	vmov	s15, r3
 8000616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800061a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800061e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000622:	edc7 7a07 	vstr	s15, [r7, #28]

	  	ret = HAL_I2C_Mem_Read(&hi2c1, 0xBF, 0x28 | 0x80, I2C_MEMADD_SIZE_8BIT, buf, 2, 3000);
 8000626:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800062a:	9302      	str	r3, [sp, #8]
 800062c:	2302      	movs	r3, #2
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2301      	movs	r3, #1
 8000638:	22a8      	movs	r2, #168	; 0xa8
 800063a:	21bf      	movs	r1, #191	; 0xbf
 800063c:	4841      	ldr	r0, [pc, #260]	; (8000744 <StartDefaultTask+0x2d0>)
 800063e:	f000 ff0d 	bl	800145c <HAL_I2C_Mem_Read>
 8000642:	4603      	mov	r3, r0
 8000644:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  	val = (int16_t)buf[1];
 8000648:	7c7b      	ldrb	r3, [r7, #17]
 800064a:	837b      	strh	r3, [r7, #26]
	  	val = (val * 256) +  (int16_t)buf[0];
 800064c:	8b7b      	ldrh	r3, [r7, #26]
 800064e:	021b      	lsls	r3, r3, #8
 8000650:	b29a      	uxth	r2, r3
 8000652:	7c3b      	ldrb	r3, [r7, #16]
 8000654:	b29b      	uxth	r3, r3
 8000656:	4413      	add	r3, r2
 8000658:	b29b      	uxth	r3, r3
 800065a:	837b      	strh	r3, [r7, #26]
	  	// interpolation
	  	humm = (((value_y1 - value_y0) * val) + ((value_x1 * value_y0) - (value_x0 * value_y1))) / (value_x1 - value_x0);
 800065c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000660:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000664:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000668:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800066c:	ee07 3a90 	vmov	s15, r3
 8000670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000678:	edd7 6a08 	vldr	s13, [r7, #32]
 800067c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000680:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000684:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8000688:	edd7 7a07 	vldr	s15, [r7, #28]
 800068c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000690:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000694:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000698:	ed97 7a08 	vldr	s14, [r7, #32]
 800069c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80006a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006a8:	4b29      	ldr	r3, [pc, #164]	; (8000750 <StartDefaultTask+0x2dc>)
 80006aa:	edc3 7a00 	vstr	s15, [r3]

	  	if (humm < 0.0f)
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <StartDefaultTask+0x2dc>)
 80006b0:	edd3 7a00 	vldr	s15, [r3]
 80006b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006bc:	d503      	bpl.n	80006c6 <StartDefaultTask+0x252>
	  		humm = 0.0f;
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <StartDefaultTask+0x2dc>)
 80006c0:	f04f 0200 	mov.w	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
	  	if (humm > 100.0f)
 80006c6:	4b22      	ldr	r3, [pc, #136]	; (8000750 <StartDefaultTask+0x2dc>)
 80006c8:	edd3 7a00 	vldr	s15, [r3]
 80006cc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000754 <StartDefaultTask+0x2e0>
 80006d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d8:	dd02      	ble.n	80006e0 <StartDefaultTask+0x26c>
	  		humm = 100.0f;
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <StartDefaultTask+0x2dc>)
 80006dc:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <StartDefaultTask+0x2e4>)
 80006de:	601a      	str	r2, [r3, #0]

	  	// presure
	  	ret = HAL_I2C_Mem_Read(&hi2c1, 0xBB, 0x28, I2C_MEMADD_SIZE_8BIT, buf, 3, 3000);
 80006e0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	2303      	movs	r3, #3
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	2228      	movs	r2, #40	; 0x28
 80006f4:	21bb      	movs	r1, #187	; 0xbb
 80006f6:	4813      	ldr	r0, [pc, #76]	; (8000744 <StartDefaultTask+0x2d0>)
 80006f8:	f000 feb0 	bl	800145c <HAL_I2C_Mem_Read>
 80006fc:	4603      	mov	r3, r0
 80006fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	  	uint32_t buff = buf[2];
 8000702:	7cbb      	ldrb	r3, [r7, #18]
 8000704:	617b      	str	r3, [r7, #20]
	  	buff = (buff * 256) + buf[1];
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	021b      	lsls	r3, r3, #8
 800070a:	7c7a      	ldrb	r2, [r7, #17]
 800070c:	4413      	add	r3, r2
 800070e:	617b      	str	r3, [r7, #20]
	  	buff = (buff * 256) + buf[0];
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	021b      	lsls	r3, r3, #8
 8000714:	7c3a      	ldrb	r2, [r7, #16]
 8000716:	4413      	add	r3, r2
 8000718:	617b      	str	r3, [r7, #20]
	  	buff *= 256;
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	617b      	str	r3, [r7, #20]
	  	pressure =  (float) buff / 1048576.0f ;
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	ee07 3a90 	vmov	s15, r3
 8000726:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800072a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800075c <StartDefaultTask+0x2e8>
 800072e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <StartDefaultTask+0x2ec>)
 8000734:	edc3 7a00 	vstr	s15, [r3]

	  	osDelay(5000);
 8000738:	f241 3088 	movw	r0, #5000	; 0x1388
 800073c:	f003 fb1f 	bl	8003d7e <osDelay>
  {
 8000740:	e6a5      	b.n	800048e <StartDefaultTask+0x1a>
 8000742:	bf00      	nop
 8000744:	20001b44 	.word	0x20001b44
 8000748:	43800000 	.word	0x43800000
 800074c:	20001b90 	.word	0x20001b90
 8000750:	20001b40 	.word	0x20001b40
 8000754:	42c80000 	.word	0x42c80000
 8000758:	42c80000 	.word	0x42c80000
 800075c:	49800000 	.word	0x49800000
 8000760:	20001b94 	.word	0x20001b94

08000764 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d101      	bne.n	800077a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000776:	f000 f965 	bl	8000a44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40012c00 	.word	0x40012c00

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078e:	e7fe      	b.n	800078e <Error_Handler+0x6>

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_MspInit+0x4c>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <HAL_MspInit+0x4c>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6613      	str	r3, [r2, #96]	; 0x60
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_MspInit+0x4c>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <HAL_MspInit+0x4c>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <HAL_MspInit+0x4c>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_MspInit+0x4c>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	210f      	movs	r1, #15
 80007ca:	f06f 0001 	mvn.w	r0, #1
 80007ce:	f000 fa0f 	bl	8000bf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a17      	ldr	r2, [pc, #92]	; (800085c <HAL_I2C_MspInit+0x7c>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d128      	bne.n	8000854 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_I2C_MspInit+0x80>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <HAL_I2C_MspInit+0x80>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_I2C_MspInit+0x80>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800081a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000820:	2312      	movs	r3, #18
 8000822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000824:	2301      	movs	r3, #1
 8000826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800082c:	2304      	movs	r3, #4
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480b      	ldr	r0, [pc, #44]	; (8000864 <HAL_I2C_MspInit+0x84>)
 8000838:	f000 fa04 	bl	8000c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_I2C_MspInit+0x80>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_I2C_MspInit+0x80>)
 8000842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000846:	6593      	str	r3, [r2, #88]	; 0x58
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_I2C_MspInit+0x80>)
 800084a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40005400 	.word	0x40005400
 8000860:	40021000 	.word	0x40021000
 8000864:	48000400 	.word	0x48000400

08000868 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	; 0x30
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	2019      	movs	r0, #25
 800087e:	f000 f9b7 	bl	8000bf0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000882:	2019      	movs	r0, #25
 8000884:	f000 f9d0 	bl	8000c28 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <HAL_InitTick+0x9c>)
 800088a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088c:	4a1d      	ldr	r2, [pc, #116]	; (8000904 <HAL_InitTick+0x9c>)
 800088e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000892:	6613      	str	r3, [r2, #96]	; 0x60
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <HAL_InitTick+0x9c>)
 8000896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a0:	f107 0210 	add.w	r2, r7, #16
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 f9a0 	bl	8002bf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008b0:	f002 f988 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 80008b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b8:	4a13      	ldr	r2, [pc, #76]	; (8000908 <HAL_InitTick+0xa0>)
 80008ba:	fba2 2303 	umull	r2, r3, r2, r3
 80008be:	0c9b      	lsrs	r3, r3, #18
 80008c0:	3b01      	subs	r3, #1
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_InitTick+0xa4>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <HAL_InitTick+0xa8>)
 80008c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_InitTick+0xa4>)
 80008cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_InitTick+0xa4>)
 80008d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_InitTick+0xa4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_InitTick+0xa4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008e4:	4809      	ldr	r0, [pc, #36]	; (800090c <HAL_InitTick+0xa4>)
 80008e6:	f002 ff7f 	bl	80037e8 <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d104      	bne.n	80008fa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <HAL_InitTick+0xa4>)
 80008f2:	f002 ffaf 	bl	8003854 <HAL_TIM_Base_Start_IT>
 80008f6:	4603      	mov	r3, r0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3730      	adds	r7, #48	; 0x30
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40021000 	.word	0x40021000
 8000908:	431bde83 	.word	0x431bde83
 800090c:	20001b98 	.word	0x20001b98
 8000910:	40012c00 	.word	0x40012c00

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000946:	f002 ffaf 	bl	80038a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20001b98 	.word	0x20001b98

08000954 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <SystemInit+0x64>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <SystemInit+0x64>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <SystemInit+0x68>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <SystemInit+0x68>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <SystemInit+0x68>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <SystemInit+0x68>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <SystemInit+0x68>)
 8000980:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000984:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000988:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <SystemInit+0x68>)
 800098c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000990:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <SystemInit+0x68>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a09      	ldr	r2, [pc, #36]	; (80009bc <SystemInit+0x68>)
 8000998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <SystemInit+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <SystemInit+0x64>)
 80009a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009aa:	609a      	str	r2, [r3, #8]
#endif
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00
 80009bc:	40021000 	.word	0x40021000

080009c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c4:	f7ff ffc6 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009ca:	e003      	b.n	80009d4 <LoopCopyDataInit>

080009cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009d2:	3104      	adds	r1, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009d4:	480a      	ldr	r0, [pc, #40]	; (8000a00 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <LoopForever+0xe>)
	adds	r2, r0, r1
 80009d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009dc:	d3f6      	bcc.n	80009cc <CopyDataInit>
	ldr	r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <LoopForever+0x12>)
	b	LoopFillZerobss
 80009e0:	e002      	b.n	80009e8 <LoopFillZerobss>

080009e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009e4:	f842 3b04 	str.w	r3, [r2], #4

080009e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <LoopForever+0x16>)
	cmp	r2, r3
 80009ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009ec:	d3f9      	bcc.n	80009e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ee:	f004 fb7f 	bl	80050f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009f2:	f7ff fc1f 	bl	8000234 <main>

080009f6 <LoopForever>:

LoopForever:
    b LoopForever
 80009f6:	e7fe      	b.n	80009f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009f8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80009fc:	080051e0 	.word	0x080051e0
	ldr	r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a04:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000a08:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000a0c:	20001bdc 	.word	0x20001bdc

08000a10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_IRQHandler>

08000a12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f8dc 	bl	8000bda <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff ff20 	bl	8000868 <HAL_InitTick>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	e001      	b.n	8000a38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a34:	f7ff feac 	bl	8000790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a38:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x1c>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x20>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a03      	ldr	r2, [pc, #12]	; (8000a60 <HAL_IncTick+0x1c>)
 8000a54:	6013      	str	r3, [r2, #0]
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	20001bd8 	.word	0x20001bd8
 8000a64:	20000008 	.word	0x20000008

08000a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_GetTick+0x14>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20001bd8 	.word	0x20001bd8

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db0b      	blt.n	8000b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 021f 	and.w	r2, r3, #31
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <__NVIC_EnableIRQ+0x38>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	095b      	lsrs	r3, r3, #5
 8000b04:	2001      	movs	r0, #1
 8000b06:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	; (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	; (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	; 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ff4c 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c02:	f7ff ff61 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	68b9      	ldr	r1, [r7, #8]
 8000c0c:	6978      	ldr	r0, [r7, #20]
 8000c0e:	f7ff ffb1 	bl	8000b74 <NVIC_EncodePriority>
 8000c12:	4602      	mov	r2, r0
 8000c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff80 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff54 	bl	8000ae4 <__NVIC_EnableIRQ>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	e166      	b.n	8000f22 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	2101      	movs	r1, #1
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	4013      	ands	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 8158 	beq.w	8000f1c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d00b      	beq.n	8000c8c <HAL_GPIO_Init+0x48>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d007      	beq.n	8000c8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c80:	2b11      	cmp	r3, #17
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b12      	cmp	r3, #18
 8000c8a:	d130      	bne.n	8000cee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	f003 0201 	and.w	r2, r3, #1
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0xea>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b12      	cmp	r3, #18
 8000d2c:	d123      	bne.n	8000d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	08da      	lsrs	r2, r3, #3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3208      	adds	r2, #8
 8000d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	220f      	movs	r2, #15
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	691a      	ldr	r2, [r3, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	08da      	lsrs	r2, r3, #3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3208      	adds	r2, #8
 8000d70:	6939      	ldr	r1, [r7, #16]
 8000d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0203 	and.w	r2, r3, #3
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 80b2 	beq.w	8000f1c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db8:	4b61      	ldr	r3, [pc, #388]	; (8000f40 <HAL_GPIO_Init+0x2fc>)
 8000dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbc:	4a60      	ldr	r2, [pc, #384]	; (8000f40 <HAL_GPIO_Init+0x2fc>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc4:	4b5e      	ldr	r3, [pc, #376]	; (8000f40 <HAL_GPIO_Init+0x2fc>)
 8000dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd0:	4a5c      	ldr	r2, [pc, #368]	; (8000f44 <HAL_GPIO_Init+0x300>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	220f      	movs	r2, #15
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dfa:	d02b      	beq.n	8000e54 <HAL_GPIO_Init+0x210>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a52      	ldr	r2, [pc, #328]	; (8000f48 <HAL_GPIO_Init+0x304>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d025      	beq.n	8000e50 <HAL_GPIO_Init+0x20c>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a51      	ldr	r2, [pc, #324]	; (8000f4c <HAL_GPIO_Init+0x308>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d01f      	beq.n	8000e4c <HAL_GPIO_Init+0x208>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a50      	ldr	r2, [pc, #320]	; (8000f50 <HAL_GPIO_Init+0x30c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d019      	beq.n	8000e48 <HAL_GPIO_Init+0x204>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a4f      	ldr	r2, [pc, #316]	; (8000f54 <HAL_GPIO_Init+0x310>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d013      	beq.n	8000e44 <HAL_GPIO_Init+0x200>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a4e      	ldr	r2, [pc, #312]	; (8000f58 <HAL_GPIO_Init+0x314>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d00d      	beq.n	8000e40 <HAL_GPIO_Init+0x1fc>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a4d      	ldr	r2, [pc, #308]	; (8000f5c <HAL_GPIO_Init+0x318>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x1f8>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a4c      	ldr	r2, [pc, #304]	; (8000f60 <HAL_GPIO_Init+0x31c>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d101      	bne.n	8000e38 <HAL_GPIO_Init+0x1f4>
 8000e34:	2307      	movs	r3, #7
 8000e36:	e00e      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e38:	2308      	movs	r3, #8
 8000e3a:	e00c      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e3c:	2306      	movs	r3, #6
 8000e3e:	e00a      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e40:	2305      	movs	r3, #5
 8000e42:	e008      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e44:	2304      	movs	r3, #4
 8000e46:	e006      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e004      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e002      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e54:	2300      	movs	r3, #0
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	f002 0203 	and.w	r2, r2, #3
 8000e5c:	0092      	lsls	r2, r2, #2
 8000e5e:	4093      	lsls	r3, r2
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e66:	4937      	ldr	r1, [pc, #220]	; (8000f44 <HAL_GPIO_Init+0x300>)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e74:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e98:	4a32      	ldr	r2, [pc, #200]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e9e:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ec2:	4a28      	ldr	r2, [pc, #160]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ec8:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eec:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f16:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <HAL_GPIO_Init+0x320>)
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f47f ae91 	bne.w	8000c54 <HAL_GPIO_Init+0x10>
  }
}
 8000f32:	bf00      	nop
 8000f34:	371c      	adds	r7, #28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000
 8000f48:	48000400 	.word	0x48000400
 8000f4c:	48000800 	.word	0x48000800
 8000f50:	48000c00 	.word	0x48000c00
 8000f54:	48001000 	.word	0x48001000
 8000f58:	48001400 	.word	0x48001400
 8000f5c:	48001800 	.word	0x48001800
 8000f60:	48001c00 	.word	0x48001c00
 8000f64:	40010400 	.word	0x40010400

08000f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e081      	b.n	800107e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d106      	bne.n	8000f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fc26 	bl	80007e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2224      	movs	r2, #36	; 0x24
 8000f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0201 	bic.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d107      	bne.n	8000fe2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	e006      	b.n	8000ff0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000fee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d104      	bne.n	8001002 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001000:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001014:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001024:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	ea42 0103 	orr.w	r1, r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	021a      	lsls	r2, r3, #8
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69d9      	ldr	r1, [r3, #28]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a1a      	ldr	r2, [r3, #32]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	430a      	orrs	r2, r1
 800104e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0201 	orr.w	r2, r2, #1
 800105e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2220      	movs	r2, #32
 800106a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af02      	add	r7, sp, #8
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	461a      	mov	r2, r3
 8001094:	460b      	mov	r3, r1
 8001096:	817b      	strh	r3, [r7, #10]
 8001098:	4613      	mov	r3, r2
 800109a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b20      	cmp	r3, #32
 80010a6:	f040 80da 	bne.w	800125e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <HAL_I2C_Master_Transmit+0x30>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e0d3      	b.n	8001260 <HAL_I2C_Master_Transmit+0x1d8>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010c0:	f7ff fcd2 	bl	8000a68 <HAL_GetTick>
 80010c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2319      	movs	r3, #25
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f000 fc76 	bl	80019c4 <I2C_WaitOnFlagUntilTimeout>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e0be      	b.n	8001260 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2221      	movs	r2, #33	; 0x21
 80010e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2210      	movs	r2, #16
 80010ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	893a      	ldrh	r2, [r7, #8]
 8001102:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2200      	movs	r2, #0
 8001108:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800110e:	b29b      	uxth	r3, r3
 8001110:	2bff      	cmp	r3, #255	; 0xff
 8001112:	d90e      	bls.n	8001132 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800111e:	b2da      	uxtb	r2, r3
 8001120:	8979      	ldrh	r1, [r7, #10]
 8001122:	4b51      	ldr	r3, [pc, #324]	; (8001268 <HAL_I2C_Master_Transmit+0x1e0>)
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 fdd8 	bl	8001ce0 <I2C_TransferConfig>
 8001130:	e06c      	b.n	800120c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001136:	b29a      	uxth	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001140:	b2da      	uxtb	r2, r3
 8001142:	8979      	ldrh	r1, [r7, #10]
 8001144:	4b48      	ldr	r3, [pc, #288]	; (8001268 <HAL_I2C_Master_Transmit+0x1e0>)
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 fdc7 	bl	8001ce0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001152:	e05b      	b.n	800120c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	6a39      	ldr	r1, [r7, #32]
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 fc73 	bl	8001a44 <I2C_WaitOnTXISFlagUntilTimeout>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e07b      	b.n	8001260 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001182:	b29b      	uxth	r3, r3
 8001184:	3b01      	subs	r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001190:	3b01      	subs	r3, #1
 8001192:	b29a      	uxth	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800119c:	b29b      	uxth	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d034      	beq.n	800120c <HAL_I2C_Master_Transmit+0x184>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d130      	bne.n	800120c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	2200      	movs	r2, #0
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 fc05 	bl	80019c4 <I2C_WaitOnFlagUntilTimeout>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e04d      	b.n	8001260 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	2bff      	cmp	r3, #255	; 0xff
 80011cc:	d90e      	bls.n	80011ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	22ff      	movs	r2, #255	; 0xff
 80011d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	8979      	ldrh	r1, [r7, #10]
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 fd7b 	bl	8001ce0 <I2C_TransferConfig>
 80011ea:	e00f      	b.n	800120c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	8979      	ldrh	r1, [r7, #10]
 80011fe:	2300      	movs	r3, #0
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f000 fd6a 	bl	8001ce0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001210:	b29b      	uxth	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d19e      	bne.n	8001154 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	6a39      	ldr	r1, [r7, #32]
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f000 fc52 	bl	8001ac4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e01a      	b.n	8001260 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2220      	movs	r2, #32
 8001230:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6859      	ldr	r1, [r3, #4]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_I2C_Master_Transmit+0x1e4>)
 800123e:	400b      	ands	r3, r1
 8001240:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2220      	movs	r2, #32
 8001246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800125e:	2302      	movs	r3, #2
  }
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	80002000 	.word	0x80002000
 800126c:	fe00e800 	.word	0xfe00e800

08001270 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af02      	add	r7, sp, #8
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	461a      	mov	r2, r3
 800127c:	460b      	mov	r3, r1
 800127e:	817b      	strh	r3, [r7, #10]
 8001280:	4613      	mov	r3, r2
 8001282:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b20      	cmp	r3, #32
 800128e:	f040 80db 	bne.w	8001448 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <HAL_I2C_Master_Receive+0x30>
 800129c:	2302      	movs	r3, #2
 800129e:	e0d4      	b.n	800144a <HAL_I2C_Master_Receive+0x1da>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012a8:	f7ff fbde 	bl	8000a68 <HAL_GetTick>
 80012ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2319      	movs	r3, #25
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f000 fb82 	bl	80019c4 <I2C_WaitOnFlagUntilTimeout>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e0bf      	b.n	800144a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2222      	movs	r2, #34	; 0x22
 80012ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2210      	movs	r2, #16
 80012d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	893a      	ldrh	r2, [r7, #8]
 80012ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	2bff      	cmp	r3, #255	; 0xff
 80012fa:	d90e      	bls.n	800131a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	22ff      	movs	r2, #255	; 0xff
 8001300:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001306:	b2da      	uxtb	r2, r3
 8001308:	8979      	ldrh	r1, [r7, #10]
 800130a:	4b52      	ldr	r3, [pc, #328]	; (8001454 <HAL_I2C_Master_Receive+0x1e4>)
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 fce4 	bl	8001ce0 <I2C_TransferConfig>
 8001318:	e06d      	b.n	80013f6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131e:	b29a      	uxth	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001328:	b2da      	uxtb	r2, r3
 800132a:	8979      	ldrh	r1, [r7, #10]
 800132c:	4b49      	ldr	r3, [pc, #292]	; (8001454 <HAL_I2C_Master_Receive+0x1e4>)
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f000 fcd3 	bl	8001ce0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800133a:	e05c      	b.n	80013f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	6a39      	ldr	r1, [r7, #32]
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 fbfb 	bl	8001b3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e07c      	b.n	800144a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136c:	3b01      	subs	r3, #1
 800136e:	b29a      	uxth	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001378:	b29b      	uxth	r3, r3
 800137a:	3b01      	subs	r3, #1
 800137c:	b29a      	uxth	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001386:	b29b      	uxth	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d034      	beq.n	80013f6 <HAL_I2C_Master_Receive+0x186>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001390:	2b00      	cmp	r3, #0
 8001392:	d130      	bne.n	80013f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	2200      	movs	r2, #0
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f000 fb10 	bl	80019c4 <I2C_WaitOnFlagUntilTimeout>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e04d      	b.n	800144a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	2bff      	cmp	r3, #255	; 0xff
 80013b6:	d90e      	bls.n	80013d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	22ff      	movs	r2, #255	; 0xff
 80013bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	8979      	ldrh	r1, [r7, #10]
 80013c6:	2300      	movs	r3, #0
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 fc86 	bl	8001ce0 <I2C_TransferConfig>
 80013d4:	e00f      	b.n	80013f6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013da:	b29a      	uxth	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	8979      	ldrh	r1, [r7, #10]
 80013e8:	2300      	movs	r3, #0
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f000 fc75 	bl	8001ce0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d19d      	bne.n	800133c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	6a39      	ldr	r1, [r7, #32]
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 fb5d 	bl	8001ac4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e01a      	b.n	800144a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2220      	movs	r2, #32
 800141a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6859      	ldr	r1, [r3, #4]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_I2C_Master_Receive+0x1e8>)
 8001428:	400b      	ands	r3, r1
 800142a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2220      	movs	r2, #32
 8001430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	e000      	b.n	800144a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001448:	2302      	movs	r3, #2
  }
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	80002400 	.word	0x80002400
 8001458:	fe00e800 	.word	0xfe00e800

0800145c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af02      	add	r7, sp, #8
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	4608      	mov	r0, r1
 8001466:	4611      	mov	r1, r2
 8001468:	461a      	mov	r2, r3
 800146a:	4603      	mov	r3, r0
 800146c:	817b      	strh	r3, [r7, #10]
 800146e:	460b      	mov	r3, r1
 8001470:	813b      	strh	r3, [r7, #8]
 8001472:	4613      	mov	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b20      	cmp	r3, #32
 8001480:	f040 80fd 	bne.w	800167e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <HAL_I2C_Mem_Read+0x34>
 800148a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800148c:	2b00      	cmp	r3, #0
 800148e:	d105      	bne.n	800149c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001496:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0f1      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_I2C_Mem_Read+0x4e>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e0ea      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014b2:	f7ff fad9 	bl	8000a68 <HAL_GetTick>
 80014b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2319      	movs	r3, #25
 80014be:	2201      	movs	r2, #1
 80014c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f000 fa7d 	bl	80019c4 <I2C_WaitOnFlagUntilTimeout>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0d5      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2222      	movs	r2, #34	; 0x22
 80014d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2240      	movs	r2, #64	; 0x40
 80014e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a3a      	ldr	r2, [r7, #32]
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014fc:	88f8      	ldrh	r0, [r7, #6]
 80014fe:	893a      	ldrh	r2, [r7, #8]
 8001500:	8979      	ldrh	r1, [r7, #10]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4603      	mov	r3, r0
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f000 f9e1 	bl	80018d4 <I2C_RequestMemoryRead>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0ad      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001528:	b29b      	uxth	r3, r3
 800152a:	2bff      	cmp	r3, #255	; 0xff
 800152c:	d90e      	bls.n	800154c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	22ff      	movs	r2, #255	; 0xff
 8001532:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001538:	b2da      	uxtb	r2, r3
 800153a:	8979      	ldrh	r1, [r7, #10]
 800153c:	4b52      	ldr	r3, [pc, #328]	; (8001688 <HAL_I2C_Mem_Read+0x22c>)
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 fbcb 	bl	8001ce0 <I2C_TransferConfig>
 800154a:	e00f      	b.n	800156c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155a:	b2da      	uxtb	r2, r3
 800155c:	8979      	ldrh	r1, [r7, #10]
 800155e:	4b4a      	ldr	r3, [pc, #296]	; (8001688 <HAL_I2C_Mem_Read+0x22c>)
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 fbba 	bl	8001ce0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001572:	2200      	movs	r2, #0
 8001574:	2104      	movs	r1, #4
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 fa24 	bl	80019c4 <I2C_WaitOnFlagUntilTimeout>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e07c      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d034      	beq.n	800162c <HAL_I2C_Mem_Read+0x1d0>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d130      	bne.n	800162c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	2200      	movs	r2, #0
 80015d2:	2180      	movs	r1, #128	; 0x80
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 f9f5 	bl	80019c4 <I2C_WaitOnFlagUntilTimeout>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e04d      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	2bff      	cmp	r3, #255	; 0xff
 80015ec:	d90e      	bls.n	800160c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	22ff      	movs	r2, #255	; 0xff
 80015f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	8979      	ldrh	r1, [r7, #10]
 80015fc:	2300      	movs	r3, #0
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 fb6b 	bl	8001ce0 <I2C_TransferConfig>
 800160a:	e00f      	b.n	800162c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161a:	b2da      	uxtb	r2, r3
 800161c:	8979      	ldrh	r1, [r7, #10]
 800161e:	2300      	movs	r3, #0
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 fb5a 	bl	8001ce0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001630:	b29b      	uxth	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d19a      	bne.n	800156c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 fa42 	bl	8001ac4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e01a      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2220      	movs	r2, #32
 8001650:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_I2C_Mem_Read+0x230>)
 800165e:	400b      	ands	r3, r1
 8001660:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2220      	movs	r2, #32
 8001666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800167e:	2302      	movs	r3, #2
  }
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	80002400 	.word	0x80002400
 800168c:	fe00e800 	.word	0xfe00e800

08001690 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af02      	add	r7, sp, #8
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	460b      	mov	r3, r1
 800169e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b20      	cmp	r3, #32
 80016ae:	f040 80f1 	bne.w	8001894 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016c0:	d101      	bne.n	80016c6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80016c2:	2302      	movs	r3, #2
 80016c4:	e0e7      	b.n	8001896 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <HAL_I2C_IsDeviceReady+0x44>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e0e0      	b.n	8001896 <HAL_I2C_IsDeviceReady+0x206>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2224      	movs	r2, #36	; 0x24
 80016e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d107      	bne.n	8001702 <HAL_I2C_IsDeviceReady+0x72>
 80016f2:	897b      	ldrh	r3, [r7, #10]
 80016f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001700:	e004      	b.n	800170c <HAL_I2C_IsDeviceReady+0x7c>
 8001702:	897b      	ldrh	r3, [r7, #10]
 8001704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001708:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001712:	f7ff f9a9 	bl	8000a68 <HAL_GetTick>
 8001716:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	2b20      	cmp	r3, #32
 8001724:	bf0c      	ite	eq
 8001726:	2301      	moveq	r3, #1
 8001728:	2300      	movne	r3, #0
 800172a:	b2db      	uxtb	r3, r3
 800172c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b10      	cmp	r3, #16
 800173a:	bf0c      	ite	eq
 800173c:	2301      	moveq	r3, #1
 800173e:	2300      	movne	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001744:	e034      	b.n	80017b0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d01a      	beq.n	8001784 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800174e:	f7ff f98b 	bl	8000a68 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d302      	bcc.n	8001764 <HAL_I2C_IsDeviceReady+0xd4>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10f      	bne.n	8001784 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2220      	movs	r2, #32
 8001768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	f043 0220 	orr.w	r2, r3, #32
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e088      	b.n	8001896 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f003 0320 	and.w	r3, r3, #32
 800178e:	2b20      	cmp	r3, #32
 8001790:	bf0c      	ite	eq
 8001792:	2301      	moveq	r3, #1
 8001794:	2300      	movne	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	2b10      	cmp	r3, #16
 80017a6:	bf0c      	ite	eq
 80017a8:	2301      	moveq	r3, #1
 80017aa:	2300      	movne	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80017b0:	7ffb      	ldrb	r3, [r7, #31]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <HAL_I2C_IsDeviceReady+0x12c>
 80017b6:	7fbb      	ldrb	r3, [r7, #30]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0c4      	beq.n	8001746 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b10      	cmp	r3, #16
 80017c8:	d01a      	beq.n	8001800 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	2120      	movs	r1, #32
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 f8f5 	bl	80019c4 <I2C_WaitOnFlagUntilTimeout>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e058      	b.n	8001896 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2220      	movs	r2, #32
 80017ea:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e04a      	b.n	8001896 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	2120      	movs	r1, #32
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f8da 	bl	80019c4 <I2C_WaitOnFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e03d      	b.n	8001896 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2210      	movs	r2, #16
 8001820:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2220      	movs	r2, #32
 8001828:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	429a      	cmp	r2, r3
 8001830:	d118      	bne.n	8001864 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001840:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	2120      	movs	r1, #32
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 f8b9 	bl	80019c4 <I2C_WaitOnFlagUntilTimeout>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e01c      	b.n	8001896 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2220      	movs	r2, #32
 8001862:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	f63f af3b 	bhi.w	80016ea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2220      	movs	r2, #32
 8001878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f043 0220 	orr.w	r2, r3, #32
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001894:	2302      	movs	r3, #2
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	3720      	adds	r7, #32
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ac:	b2db      	uxtb	r3, r3
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af02      	add	r7, sp, #8
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4603      	mov	r3, r0
 80018e4:	817b      	strh	r3, [r7, #10]
 80018e6:	460b      	mov	r3, r1
 80018e8:	813b      	strh	r3, [r7, #8]
 80018ea:	4613      	mov	r3, r2
 80018ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	8979      	ldrh	r1, [r7, #10]
 80018f4:	4b20      	ldr	r3, [pc, #128]	; (8001978 <I2C_RequestMemoryRead+0xa4>)
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2300      	movs	r3, #0
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 f9f0 	bl	8001ce0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	69b9      	ldr	r1, [r7, #24]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f89d 	bl	8001a44 <I2C_WaitOnTXISFlagUntilTimeout>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e02c      	b.n	800196e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d105      	bne.n	8001926 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800191a:	893b      	ldrh	r3, [r7, #8]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
 8001924:	e015      	b.n	8001952 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001926:	893b      	ldrh	r3, [r7, #8]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	b29b      	uxth	r3, r3
 800192c:	b2da      	uxtb	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	69b9      	ldr	r1, [r7, #24]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f883 	bl	8001a44 <I2C_WaitOnTXISFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e012      	b.n	800196e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001948:	893b      	ldrh	r3, [r7, #8]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2200      	movs	r2, #0
 800195a:	2140      	movs	r1, #64	; 0x40
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 f831 	bl	80019c4 <I2C_WaitOnFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	80002000 	.word	0x80002000

0800197c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b02      	cmp	r3, #2
 8001990:	d103      	bne.n	800199a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2200      	movs	r2, #0
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d007      	beq.n	80019b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	619a      	str	r2, [r3, #24]
  }
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	4613      	mov	r3, r2
 80019d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019d4:	e022      	b.n	8001a1c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d01e      	beq.n	8001a1c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019de:	f7ff f843 	bl	8000a68 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d302      	bcc.n	80019f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d113      	bne.n	8001a1c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	f043 0220 	orr.w	r2, r3, #32
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2220      	movs	r2, #32
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e00f      	b.n	8001a3c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699a      	ldr	r2, [r3, #24]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	4013      	ands	r3, r2
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d0cd      	beq.n	80019d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a50:	e02c      	b.n	8001aac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 f8dc 	bl	8001c14 <I2C_IsAcknowledgeFailed>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e02a      	b.n	8001abc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6c:	d01e      	beq.n	8001aac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a6e:	f7fe fffb 	bl	8000a68 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d302      	bcc.n	8001a84 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d113      	bne.n	8001aac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f043 0220 	orr.w	r2, r3, #32
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2220      	movs	r2, #32
 8001a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e007      	b.n	8001abc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d1cb      	bne.n	8001a52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ad0:	e028      	b.n	8001b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f89c 	bl	8001c14 <I2C_IsAcknowledgeFailed>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e026      	b.n	8001b34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae6:	f7fe ffbf 	bl	8000a68 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d302      	bcc.n	8001afc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d113      	bne.n	8001b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f043 0220 	orr.w	r2, r3, #32
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e007      	b.n	8001b34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	d1cf      	bne.n	8001ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b48:	e055      	b.n	8001bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 f860 	bl	8001c14 <I2C_IsAcknowledgeFailed>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e053      	b.n	8001c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d129      	bne.n	8001bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d105      	bne.n	8001b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e03f      	b.n	8001c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6859      	ldr	r1, [r3, #4]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001b9a:	400b      	ands	r3, r1
 8001b9c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e022      	b.n	8001c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc0:	f7fe ff52 	bl	8000a68 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d302      	bcc.n	8001bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f043 0220 	orr.w	r2, r3, #32
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e007      	b.n	8001c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d1a2      	bne.n	8001b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	fe00e800 	.word	0xfe00e800

08001c14 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d151      	bne.n	8001cd2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c2e:	e022      	b.n	8001c76 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c36:	d01e      	beq.n	8001c76 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c38:	f7fe ff16 	bl	8000a68 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d302      	bcc.n	8001c4e <I2C_IsAcknowledgeFailed+0x3a>
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d113      	bne.n	8001c76 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f043 0220 	orr.w	r2, r3, #32
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e02e      	b.n	8001cd4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d1d5      	bne.n	8001c30 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2210      	movs	r2, #16
 8001c8a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2220      	movs	r2, #32
 8001c92:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff fe71 	bl	800197c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <I2C_IsAcknowledgeFailed+0xc8>)
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f043 0204 	orr.w	r2, r3, #4
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	fe00e800 	.word	0xfe00e800

08001ce0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	817b      	strh	r3, [r7, #10]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	0d5b      	lsrs	r3, r3, #21
 8001cfc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <I2C_TransferConfig+0x58>)
 8001d02:	430b      	orrs	r3, r1
 8001d04:	43db      	mvns	r3, r3
 8001d06:	ea02 0103 	and.w	r1, r2, r3
 8001d0a:	897b      	ldrh	r3, [r7, #10]
 8001d0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d10:	7a7b      	ldrb	r3, [r7, #9]
 8001d12:	041b      	lsls	r3, r3, #16
 8001d14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	431a      	orrs	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	03ff63ff 	.word	0x03ff63ff

08001d3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	d138      	bne.n	8001dc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e032      	b.n	8001dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2224      	movs	r2, #36	; 0x24
 8001d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0201 	bic.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e000      	b.n	8001dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dc4:	2302      	movs	r3, #2
  }
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d139      	bne.n	8001e5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e033      	b.n	8001e5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2224      	movs	r2, #36	; 0x24
 8001e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e000      	b.n	8001e5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e5c:	2302      	movs	r3, #2
  }
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7c:	d102      	bne.n	8001e84 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e82:	e00b      	b.n	8001e9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e92:	d102      	bne.n	8001e9a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e98:	e000      	b.n	8001e9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001e9a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40007000 	.word	0x40007000

08001eac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d141      	bne.n	8001f3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eba:	4b4b      	ldr	r3, [pc, #300]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec6:	d131      	bne.n	8001f2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ec8:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ece:	4a46      	ldr	r2, [pc, #280]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed8:	4b43      	ldr	r3, [pc, #268]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ee0:	4a41      	ldr	r2, [pc, #260]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ee8:	4b40      	ldr	r3, [pc, #256]	; (8001fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2232      	movs	r2, #50	; 0x32
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	4a3f      	ldr	r2, [pc, #252]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	0c9b      	lsrs	r3, r3, #18
 8001efa:	3301      	adds	r3, #1
 8001efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001efe:	e002      	b.n	8001f06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f06:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f12:	d102      	bne.n	8001f1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f2      	bne.n	8001f00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f1a:	4b33      	ldr	r3, [pc, #204]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f26:	d158      	bne.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e057      	b.n	8001fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f2c:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f32:	4a2d      	ldr	r2, [pc, #180]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f3c:	e04d      	b.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f44:	d141      	bne.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f46:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f52:	d131      	bne.n	8001fb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f54:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f5a:	4a23      	ldr	r2, [pc, #140]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f64:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f6c:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2232      	movs	r2, #50	; 0x32
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	0c9b      	lsrs	r3, r3, #18
 8001f86:	3301      	adds	r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f8a:	e002      	b.n	8001f92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9e:	d102      	bne.n	8001fa6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f2      	bne.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb2:	d112      	bne.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e011      	b.n	8001fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fc8:	e007      	b.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	431bde83 	.word	0x431bde83

08001ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	f000 bc16 	b.w	8002834 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002008:	4ba0      	ldr	r3, [pc, #640]	; (800228c <HAL_RCC_OscConfig+0x298>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002012:	4b9e      	ldr	r3, [pc, #632]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80e4 	beq.w	80021f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_RCC_OscConfig+0x4c>
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b0c      	cmp	r3, #12
 8002034:	f040 808b 	bne.w	800214e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b01      	cmp	r3, #1
 800203c:	f040 8087 	bne.w	800214e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002040:	4b92      	ldr	r3, [pc, #584]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x64>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e3ed      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1a      	ldr	r2, [r3, #32]
 800205c:	4b8b      	ldr	r3, [pc, #556]	; (800228c <HAL_RCC_OscConfig+0x298>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <HAL_RCC_OscConfig+0x7e>
 8002068:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x298>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002070:	e005      	b.n	800207e <HAL_RCC_OscConfig+0x8a>
 8002072:	4b86      	ldr	r3, [pc, #536]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800207e:	4293      	cmp	r3, r2
 8002080:	d223      	bcs.n	80020ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fde4 	bl	8002c54 <RCC_SetFlashLatencyFromMSIRange>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e3ce      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002096:	4b7d      	ldr	r3, [pc, #500]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a7c      	ldr	r2, [pc, #496]	; (800228c <HAL_RCC_OscConfig+0x298>)
 800209c:	f043 0308 	orr.w	r3, r3, #8
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b7a      	ldr	r3, [pc, #488]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4977      	ldr	r1, [pc, #476]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b4:	4b75      	ldr	r3, [pc, #468]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	4972      	ldr	r1, [pc, #456]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
 80020c8:	e025      	b.n	8002116 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ca:	4b70      	ldr	r3, [pc, #448]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a6f      	ldr	r2, [pc, #444]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b6d      	ldr	r3, [pc, #436]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	496a      	ldr	r1, [pc, #424]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e8:	4b68      	ldr	r3, [pc, #416]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	4965      	ldr	r1, [pc, #404]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fda4 	bl	8002c54 <RCC_SetFlashLatencyFromMSIRange>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e38e      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002116:	f000 fcbf 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 800211a:	4601      	mov	r1, r0
 800211c:	4b5b      	ldr	r3, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x298>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	4a5a      	ldr	r2, [pc, #360]	; (8002290 <HAL_RCC_OscConfig+0x29c>)
 8002128:	5cd3      	ldrb	r3, [r2, r3]
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	fa21 f303 	lsr.w	r3, r1, r3
 8002132:	4a58      	ldr	r2, [pc, #352]	; (8002294 <HAL_RCC_OscConfig+0x2a0>)
 8002134:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002136:	4b58      	ldr	r3, [pc, #352]	; (8002298 <HAL_RCC_OscConfig+0x2a4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fb94 	bl	8000868 <HAL_InitTick>
 8002140:	4603      	mov	r3, r0
 8002142:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d052      	beq.n	80021f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	e372      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d032      	beq.n	80021bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002156:	4b4d      	ldr	r3, [pc, #308]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a4c      	ldr	r2, [pc, #304]	; (800228c <HAL_RCC_OscConfig+0x298>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002162:	f7fe fc81 	bl	8000a68 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800216a:	f7fe fc7d 	bl	8000a68 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e35b      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800217c:	4b43      	ldr	r3, [pc, #268]	; (800228c <HAL_RCC_OscConfig+0x298>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002188:	4b40      	ldr	r3, [pc, #256]	; (800228c <HAL_RCC_OscConfig+0x298>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3f      	ldr	r2, [pc, #252]	; (800228c <HAL_RCC_OscConfig+0x298>)
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	493a      	ldr	r1, [pc, #232]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a6:	4b39      	ldr	r3, [pc, #228]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	4935      	ldr	r1, [pc, #212]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
 80021ba:	e01a      	b.n	80021f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021bc:	4b33      	ldr	r3, [pc, #204]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a32      	ldr	r2, [pc, #200]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c8:	f7fe fc4e 	bl	8000a68 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d0:	f7fe fc4a 	bl	8000a68 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e328      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021e2:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_RCC_OscConfig+0x298>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x1dc>
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d073      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b08      	cmp	r3, #8
 8002202:	d005      	beq.n	8002210 <HAL_RCC_OscConfig+0x21c>
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2b0c      	cmp	r3, #12
 8002208:	d10e      	bne.n	8002228 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d10b      	bne.n	8002228 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	4b1e      	ldr	r3, [pc, #120]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d063      	beq.n	80022e4 <HAL_RCC_OscConfig+0x2f0>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d15f      	bne.n	80022e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e305      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002230:	d106      	bne.n	8002240 <HAL_RCC_OscConfig+0x24c>
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a15      	ldr	r2, [pc, #84]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e01d      	b.n	800227c <HAL_RCC_OscConfig+0x288>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x270>
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_RCC_OscConfig+0x298>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a0f      	ldr	r2, [pc, #60]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b0d      	ldr	r3, [pc, #52]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a0c      	ldr	r2, [pc, #48]	; (800228c <HAL_RCC_OscConfig+0x298>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0x288>
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a08      	ldr	r2, [pc, #32]	; (800228c <HAL_RCC_OscConfig+0x298>)
 800226a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a05      	ldr	r2, [pc, #20]	; (800228c <HAL_RCC_OscConfig+0x298>)
 8002276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fbf0 	bl	8000a68 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228a:	e010      	b.n	80022ae <HAL_RCC_OscConfig+0x2ba>
 800228c:	40021000 	.word	0x40021000
 8002290:	08005190 	.word	0x08005190
 8002294:	20000000 	.word	0x20000000
 8002298:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe fbe4 	bl	8000a68 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e2c2      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ae:	4baf      	ldr	r3, [pc, #700]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x2a8>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fbd4 	bl	8000a68 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe fbd0 	bl	8000a68 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e2ae      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d6:	4ba5      	ldr	r3, [pc, #660]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2d0>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d060      	beq.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_OscConfig+0x310>
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d119      	bne.n	8002332 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d116      	bne.n	8002332 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002304:	4b99      	ldr	r3, [pc, #612]	; (800256c <HAL_RCC_OscConfig+0x578>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_OscConfig+0x328>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e28b      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b93      	ldr	r3, [pc, #588]	; (800256c <HAL_RCC_OscConfig+0x578>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	4990      	ldr	r1, [pc, #576]	; (800256c <HAL_RCC_OscConfig+0x578>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002330:	e040      	b.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d023      	beq.n	8002382 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800233a:	4b8c      	ldr	r3, [pc, #560]	; (800256c <HAL_RCC_OscConfig+0x578>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a8b      	ldr	r2, [pc, #556]	; (800256c <HAL_RCC_OscConfig+0x578>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe fb8f 	bl	8000a68 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234e:	f7fe fb8b 	bl	8000a68 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e269      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002360:	4b82      	ldr	r3, [pc, #520]	; (800256c <HAL_RCC_OscConfig+0x578>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b7f      	ldr	r3, [pc, #508]	; (800256c <HAL_RCC_OscConfig+0x578>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	497c      	ldr	r1, [pc, #496]	; (800256c <HAL_RCC_OscConfig+0x578>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
 8002380:	e018      	b.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002382:	4b7a      	ldr	r3, [pc, #488]	; (800256c <HAL_RCC_OscConfig+0x578>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a79      	ldr	r2, [pc, #484]	; (800256c <HAL_RCC_OscConfig+0x578>)
 8002388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7fe fb6b 	bl	8000a68 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002396:	f7fe fb67 	bl	8000a68 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e245      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023a8:	4b70      	ldr	r3, [pc, #448]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d03c      	beq.n	800243a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01c      	beq.n	8002402 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c8:	4b68      	ldr	r3, [pc, #416]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80023ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ce:	4a67      	ldr	r2, [pc, #412]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7fe fb46 	bl	8000a68 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe fb42 	bl	8000a68 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e220      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023f2:	4b5e      	ldr	r3, [pc, #376]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80023f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ef      	beq.n	80023e0 <HAL_RCC_OscConfig+0x3ec>
 8002400:	e01b      	b.n	800243a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002402:	4b5a      	ldr	r3, [pc, #360]	; (800256c <HAL_RCC_OscConfig+0x578>)
 8002404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002408:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_RCC_OscConfig+0x578>)
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002412:	f7fe fb29 	bl	8000a68 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241a:	f7fe fb25 	bl	8000a68 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e203      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800242c:	4b4f      	ldr	r3, [pc, #316]	; (800256c <HAL_RCC_OscConfig+0x578>)
 800242e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1ef      	bne.n	800241a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80a6 	beq.w	8002594 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002448:	2300      	movs	r3, #0
 800244a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800244c:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_RCC_OscConfig+0x578>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10d      	bne.n	8002474 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002458:	4b44      	ldr	r3, [pc, #272]	; (800256c <HAL_RCC_OscConfig+0x578>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	4a43      	ldr	r2, [pc, #268]	; (800256c <HAL_RCC_OscConfig+0x578>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002462:	6593      	str	r3, [r2, #88]	; 0x58
 8002464:	4b41      	ldr	r3, [pc, #260]	; (800256c <HAL_RCC_OscConfig+0x578>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002470:	2301      	movs	r3, #1
 8002472:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002474:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <HAL_RCC_OscConfig+0x57c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d118      	bne.n	80024b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002480:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_RCC_OscConfig+0x57c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3a      	ldr	r2, [pc, #232]	; (8002570 <HAL_RCC_OscConfig+0x57c>)
 8002486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248c:	f7fe faec 	bl	8000a68 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002494:	f7fe fae8 	bl	8000a68 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e1c6      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a6:	4b32      	ldr	r3, [pc, #200]	; (8002570 <HAL_RCC_OscConfig+0x57c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d108      	bne.n	80024cc <HAL_RCC_OscConfig+0x4d8>
 80024ba:	4b2c      	ldr	r3, [pc, #176]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	4a2a      	ldr	r2, [pc, #168]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ca:	e024      	b.n	8002516 <HAL_RCC_OscConfig+0x522>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d110      	bne.n	80024f6 <HAL_RCC_OscConfig+0x502>
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	4a24      	ldr	r2, [pc, #144]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024e4:	4b21      	ldr	r3, [pc, #132]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	4a20      	ldr	r2, [pc, #128]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f4:	e00f      	b.n	8002516 <HAL_RCC_OscConfig+0x522>
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	4a1b      	ldr	r2, [pc, #108]	; (800256c <HAL_RCC_OscConfig+0x578>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002506:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCC_OscConfig+0x578>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	4a17      	ldr	r2, [pc, #92]	; (800256c <HAL_RCC_OscConfig+0x578>)
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d016      	beq.n	800254c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7fe faa3 	bl	8000a68 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fe fa9f 	bl	8000a68 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e17b      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCC_OscConfig+0x578>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0ed      	beq.n	8002526 <HAL_RCC_OscConfig+0x532>
 800254a:	e01a      	b.n	8002582 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7fe fa8c 	bl	8000a68 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002552:	e00f      	b.n	8002574 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7fe fa88 	bl	8000a68 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d906      	bls.n	8002574 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e164      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
 8002570:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002574:	4ba8      	ldr	r3, [pc, #672]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1e8      	bne.n	8002554 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002582:	7ffb      	ldrb	r3, [r7, #31]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	4ba3      	ldr	r3, [pc, #652]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	4aa2      	ldr	r2, [pc, #648]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 800258e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002592:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	2b00      	cmp	r3, #0
 800259e:	d03c      	beq.n	800261a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01c      	beq.n	80025e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025a8:	4b9b      	ldr	r3, [pc, #620]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80025aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ae:	4a9a      	ldr	r2, [pc, #616]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b8:	f7fe fa56 	bl	8000a68 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025c0:	f7fe fa52 	bl	8000a68 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e130      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025d2:	4b91      	ldr	r3, [pc, #580]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80025d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0ef      	beq.n	80025c0 <HAL_RCC_OscConfig+0x5cc>
 80025e0:	e01b      	b.n	800261a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025e2:	4b8d      	ldr	r3, [pc, #564]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80025e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e8:	4a8b      	ldr	r2, [pc, #556]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80025ea:	f023 0301 	bic.w	r3, r3, #1
 80025ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7fe fa39 	bl	8000a68 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025fa:	f7fe fa35 	bl	8000a68 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e113      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800260c:	4b82      	ldr	r3, [pc, #520]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 800260e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1ef      	bne.n	80025fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8107 	beq.w	8002832 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	2b02      	cmp	r3, #2
 800262a:	f040 80cb 	bne.w	80027c4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800262e:	4b7a      	ldr	r3, [pc, #488]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0203 	and.w	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	429a      	cmp	r2, r3
 8002640:	d12c      	bne.n	800269c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	3b01      	subs	r3, #1
 800264e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d123      	bne.n	800269c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d11b      	bne.n	800269c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d113      	bne.n	800269c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	3b01      	subs	r3, #1
 8002682:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d109      	bne.n	800269c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	085b      	lsrs	r3, r3, #1
 8002694:	3b01      	subs	r3, #1
 8002696:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d06d      	beq.n	8002778 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d068      	beq.n	8002774 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026a2:	4b5d      	ldr	r3, [pc, #372]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d105      	bne.n	80026ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026ae:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0ba      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026be:	4b56      	ldr	r3, [pc, #344]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a55      	ldr	r2, [pc, #340]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80026c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026ca:	f7fe f9cd 	bl	8000a68 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fe f9c9 	bl	8000a68 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0a7      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	4b4c      	ldr	r3, [pc, #304]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f0:	4b49      	ldr	r3, [pc, #292]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	4b49      	ldr	r3, [pc, #292]	; (800281c <HAL_RCC_OscConfig+0x828>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002700:	3a01      	subs	r2, #1
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	4311      	orrs	r1, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800270a:	0212      	lsls	r2, r2, #8
 800270c:	4311      	orrs	r1, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002712:	0852      	lsrs	r2, r2, #1
 8002714:	3a01      	subs	r2, #1
 8002716:	0552      	lsls	r2, r2, #21
 8002718:	4311      	orrs	r1, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800271e:	0852      	lsrs	r2, r2, #1
 8002720:	3a01      	subs	r2, #1
 8002722:	0652      	lsls	r2, r2, #25
 8002724:	4311      	orrs	r1, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800272a:	06d2      	lsls	r2, r2, #27
 800272c:	430a      	orrs	r2, r1
 800272e:	493a      	ldr	r1, [pc, #232]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 8002730:	4313      	orrs	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002734:	4b38      	ldr	r3, [pc, #224]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a37      	ldr	r2, [pc, #220]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 800273a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002740:	4b35      	ldr	r3, [pc, #212]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a34      	ldr	r2, [pc, #208]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 8002746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800274c:	f7fe f98c 	bl	8000a68 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe f988 	bl	8000a68 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e066      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002766:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002772:	e05e      	b.n	8002832 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e05d      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002778:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d156      	bne.n	8002832 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002784:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a23      	ldr	r2, [pc, #140]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 800278a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4a20      	ldr	r2, [pc, #128]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 8002796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800279a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800279c:	f7fe f964 	bl	8000a68 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe f960 	bl	8000a68 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e03e      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x7b0>
 80027c2:	e036      	b.n	8002832 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	d031      	beq.n	800282e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b13      	ldr	r3, [pc, #76]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a12      	ldr	r2, [pc, #72]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80027d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	4a0c      	ldr	r2, [pc, #48]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80027e8:	f023 0303 	bic.w	r3, r3, #3
 80027ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RCC_OscConfig+0x824>)
 80027f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe f933 	bl	8000a68 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002804:	e00c      	b.n	8002820 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002806:	f7fe f92f 	bl	8000a68 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d905      	bls.n	8002820 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e00d      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
 8002818:	40021000 	.word	0x40021000
 800281c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_RCC_OscConfig+0x848>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ec      	bne.n	8002806 <HAL_RCC_OscConfig+0x812>
 800282c:	e001      	b.n	8002832 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e10f      	b.n	8002a78 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b89      	ldr	r3, [pc, #548]	; (8002a80 <HAL_RCC_ClockConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d910      	bls.n	8002888 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b86      	ldr	r3, [pc, #536]	; (8002a80 <HAL_RCC_ClockConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 020f 	bic.w	r2, r3, #15
 800286e:	4984      	ldr	r1, [pc, #528]	; (8002a80 <HAL_RCC_ClockConfig+0x240>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b82      	ldr	r3, [pc, #520]	; (8002a80 <HAL_RCC_ClockConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0f7      	b.n	8002a78 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8089 	beq.w	80029a8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d133      	bne.n	8002906 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289e:	4b79      	ldr	r3, [pc, #484]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0e4      	b.n	8002a78 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80028ae:	f000 fa2b 	bl	8002d08 <RCC_GetSysClockFreqFromPLLSource>
 80028b2:	4602      	mov	r2, r0
 80028b4:	4b74      	ldr	r3, [pc, #464]	; (8002a88 <HAL_RCC_ClockConfig+0x248>)
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d955      	bls.n	8002966 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028ba:	4b72      	ldr	r3, [pc, #456]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10a      	bne.n	80028dc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028c6:	4b6f      	ldr	r3, [pc, #444]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ce:	4a6d      	ldr	r2, [pc, #436]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 80028d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	e044      	b.n	8002966 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d03e      	beq.n	8002966 <HAL_RCC_ClockConfig+0x126>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d13a      	bne.n	8002966 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028f0:	4b64      	ldr	r3, [pc, #400]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f8:	4a62      	ldr	r2, [pc, #392]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 80028fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	e02f      	b.n	8002966 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290e:	4b5d      	ldr	r3, [pc, #372]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d115      	bne.n	8002946 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0ac      	b.n	8002a78 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002926:	4b57      	ldr	r3, [pc, #348]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0a0      	b.n	8002a78 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002936:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e098      	b.n	8002a78 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002946:	f000 f8a7 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 800294a:	4602      	mov	r2, r0
 800294c:	4b4e      	ldr	r3, [pc, #312]	; (8002a88 <HAL_RCC_ClockConfig+0x248>)
 800294e:	429a      	cmp	r2, r3
 8002950:	d909      	bls.n	8002966 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002952:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800295a:	4a4a      	ldr	r2, [pc, #296]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 800295c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002960:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f023 0203 	bic.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4944      	ldr	r1, [pc, #272]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002978:	f7fe f876 	bl	8000a68 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	e00a      	b.n	8002996 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002980:	f7fe f872 	bl	8000a68 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	; 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e070      	b.n	8002a78 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 020c 	and.w	r2, r3, #12
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d1eb      	bne.n	8002980 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4930      	ldr	r1, [pc, #192]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
 80029c6:	e008      	b.n	80029da <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b80      	cmp	r3, #128	; 0x80
 80029cc:	d105      	bne.n	80029da <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029ce:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4a2c      	ldr	r2, [pc, #176]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 80029d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029d8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <HAL_RCC_ClockConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d210      	bcs.n	8002a0a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_RCC_ClockConfig+0x240>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 020f 	bic.w	r2, r3, #15
 80029f0:	4923      	ldr	r1, [pc, #140]	; (8002a80 <HAL_RCC_ClockConfig+0x240>)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f8:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <HAL_RCC_ClockConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e036      	b.n	8002a78 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	4918      	ldr	r1, [pc, #96]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4910      	ldr	r1, [pc, #64]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a48:	f000 f826 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8002a4c:	4601      	mov	r1, r0
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_RCC_ClockConfig+0x244>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <HAL_RCC_ClockConfig+0x24c>)
 8002a5a:	5cd3      	ldrb	r3, [r2, r3]
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	fa21 f303 	lsr.w	r3, r1, r3
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_RCC_ClockConfig+0x250>)
 8002a66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_RCC_ClockConfig+0x254>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fefb 	bl	8000868 <HAL_InitTick>
 8002a72:	4603      	mov	r3, r0
 8002a74:	73fb      	strb	r3, [r7, #15]

  return status;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40022000 	.word	0x40022000
 8002a84:	40021000 	.word	0x40021000
 8002a88:	04c4b400 	.word	0x04c4b400
 8002a8c:	08005190 	.word	0x08005190
 8002a90:	20000000 	.word	0x20000000
 8002a94:	20000004 	.word	0x20000004

08002a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x104>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab0:	4b3a      	ldr	r3, [pc, #232]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x104>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x34>
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d121      	bne.n	8002b0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d11e      	bne.n	8002b0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002acc:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x104>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ad8:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x104>)
 8002ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	e005      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x104>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002af4:	4a2a      	ldr	r2, [pc, #168]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10d      	bne.n	8002b20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d102      	bne.n	8002b16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b10:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	e004      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b1c:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d133      	bne.n	8002b8e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b26:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x104>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d002      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0xa4>
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0xaa>
 8002b3a:	e005      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b3e:	617b      	str	r3, [r7, #20]
      break;
 8002b40:	e005      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b44:	617b      	str	r3, [r7, #20]
      break;
 8002b46:	e002      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	617b      	str	r3, [r7, #20]
      break;
 8002b4c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b4e:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x104>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	3301      	adds	r3, #1
 8002b5a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x104>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	fb02 f203 	mul.w	r2, r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x104>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	0e5b      	lsrs	r3, r3, #25
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b8e:	69bb      	ldr	r3, [r7, #24]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3724      	adds	r7, #36	; 0x24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	080051a8 	.word	0x080051a8
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200

08002bac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bcc:	4601      	mov	r1, r0
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0adb      	lsrs	r3, r3, #11
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bda:	5cd3      	ldrb	r3, [r2, r3]
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	080051a0 	.word	0x080051a0

08002bf0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_RCC_GetClockConfig+0x5c>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0203 	and.w	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <HAL_RCC_GetClockConfig+0x5c>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <HAL_RCC_GetClockConfig+0x5c>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCC_GetClockConfig+0x5c>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	08db      	lsrs	r3, r3, #3
 8002c2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <HAL_RCC_GetClockConfig+0x60>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 020f 	and.w	r2, r3, #15
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	601a      	str	r2, [r3, #0]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40022000 	.word	0x40022000

08002c54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c6c:	f7ff f8fe 	bl	8001e6c <HAL_PWREx_GetVoltageRange>
 8002c70:	6178      	str	r0, [r7, #20]
 8002c72:	e014      	b.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c74:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	4a21      	ldr	r2, [pc, #132]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c80:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c8c:	f7ff f8ee 	bl	8001e6c <HAL_PWREx_GetVoltageRange>
 8002c90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	4a1a      	ldr	r2, [pc, #104]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca4:	d10b      	bne.n	8002cbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d913      	bls.n	8002cd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2ba0      	cmp	r3, #160	; 0xa0
 8002cb0:	d902      	bls.n	8002cb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	e00d      	b.n	8002cd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cb8:	2301      	movs	r3, #1
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	e00a      	b.n	8002cd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8002cc2:	d902      	bls.n	8002cca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	e004      	b.n	8002cd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b70      	cmp	r3, #112	; 0x70
 8002cce:	d101      	bne.n	8002cd4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 020f 	bic.w	r2, r3, #15
 8002cdc:	4909      	ldr	r1, [pc, #36]	; (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40022000 	.word	0x40022000

08002d08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002d12:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d118      	bne.n	8002d50 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d1e:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d107      	bne.n	8002d3a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d2a:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	e005      	b.n	8002d46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d3a:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d46:	4a21      	ldr	r2, [pc, #132]	; (8002dcc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d002      	beq.n	8002d66 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d003      	beq.n	8002d6c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002d64:	e005      	b.n	8002d72 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002d66:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002d68:	613b      	str	r3, [r7, #16]
    break;
 8002d6a:	e005      	b.n	8002d78 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002d6e:	613b      	str	r3, [r7, #16]
    break;
 8002d70:	e002      	b.n	8002d78 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	613b      	str	r3, [r7, #16]
    break;
 8002d76:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d78:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3301      	adds	r3, #1
 8002d84:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	fb02 f203 	mul.w	r2, r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	0e5b      	lsrs	r3, r3, #25
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	3301      	adds	r3, #1
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002db8:	683b      	ldr	r3, [r7, #0]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	080051a8 	.word	0x080051a8
 8002dd0:	00f42400 	.word	0x00f42400
 8002dd4:	007a1200 	.word	0x007a1200

08002dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002de0:	2300      	movs	r3, #0
 8002de2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002de4:	2300      	movs	r3, #0
 8002de6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d03d      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d00b      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d804      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00e      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d015      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002e08:	e01d      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002e0a:	2b60      	cmp	r3, #96	; 0x60
 8002e0c:	d01e      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e0e:	2b80      	cmp	r3, #128	; 0x80
 8002e10:	d01c      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e12:	e018      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e14:	4b86      	ldr	r3, [pc, #536]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a85      	ldr	r2, [pc, #532]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e20:	e015      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3304      	adds	r3, #4
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fafd 	bl	8003428 <RCCEx_PLLSAI1_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e32:	e00c      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3320      	adds	r3, #32
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fbe4 	bl	8003608 <RCCEx_PLLSAI2_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e44:	e003      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	74fb      	strb	r3, [r7, #19]
      break;
 8002e4a:	e000      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8002e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e4e:	7cfb      	ldrb	r3, [r7, #19]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10b      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e54:	4b76      	ldr	r3, [pc, #472]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e5a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e62:	4973      	ldr	r1, [pc, #460]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e6a:	e001      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6c:	7cfb      	ldrb	r3, [r7, #19]
 8002e6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d042      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e84:	d00f      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e8a:	d805      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d011      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e94:	d017      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002e96:	e01f      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e9c:	d01f      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea2:	d01c      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ea4:	e018      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ea6:	4b62      	ldr	r3, [pc, #392]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	4a61      	ldr	r2, [pc, #388]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eb2:	e015      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fab4 	bl	8003428 <RCCEx_PLLSAI1_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ec4:	e00c      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3320      	adds	r3, #32
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fb9b 	bl	8003608 <RCCEx_PLLSAI2_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ed6:	e003      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	74fb      	strb	r3, [r7, #19]
      break;
 8002edc:	e000      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8002ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10b      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ee6:	4b52      	ldr	r3, [pc, #328]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ee8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	494e      	ldr	r1, [pc, #312]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002efc:	e001      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efe:	7cfb      	ldrb	r3, [r7, #19]
 8002f00:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 809f 	beq.w	800304e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f10:	2300      	movs	r3, #0
 8002f12:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f14:	4b46      	ldr	r3, [pc, #280]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002f24:	2300      	movs	r3, #0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2a:	4b41      	ldr	r3, [pc, #260]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	4a40      	ldr	r2, [pc, #256]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6593      	str	r3, [r2, #88]	; 0x58
 8002f36:	4b3e      	ldr	r3, [pc, #248]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f42:	2301      	movs	r3, #1
 8002f44:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f46:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a3a      	ldr	r2, [pc, #232]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f52:	f7fd fd89 	bl	8000a68 <HAL_GetTick>
 8002f56:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f58:	e009      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fd fd85 	bl	8000a68 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d902      	bls.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	74fb      	strb	r3, [r7, #19]
        break;
 8002f6c:	e005      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f6e:	4b31      	ldr	r3, [pc, #196]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0ef      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8002f7a:	7cfb      	ldrb	r3, [r7, #19]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d15b      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f80:	4b2b      	ldr	r3, [pc, #172]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01f      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d019      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f9e:	4b24      	ldr	r3, [pc, #144]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb0:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fba:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	4a1b      	ldr	r2, [pc, #108]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fca:	4a19      	ldr	r2, [pc, #100]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d016      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fd fd44 	bl	8000a68 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe2:	e00b      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fd fd40 	bl	8000a68 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d902      	bls.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	74fb      	strb	r3, [r7, #19]
            break;
 8002ffa:	e006      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0ec      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800300a:	7cfb      	ldrb	r3, [r7, #19]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10c      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	4903      	ldr	r1, [pc, #12]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003028:	e008      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800302a:	7cfb      	ldrb	r3, [r7, #19]
 800302c:	74bb      	strb	r3, [r7, #18]
 800302e:	e005      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003030:	40021000 	.word	0x40021000
 8003034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003038:	7cfb      	ldrb	r3, [r7, #19]
 800303a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800303c:	7c7b      	ldrb	r3, [r7, #17]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d105      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003042:	4ba0      	ldr	r3, [pc, #640]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	4a9f      	ldr	r2, [pc, #636]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800305a:	4b9a      	ldr	r3, [pc, #616]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	f023 0203 	bic.w	r2, r3, #3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	4996      	ldr	r1, [pc, #600]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800307c:	4b91      	ldr	r3, [pc, #580]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003082:	f023 020c 	bic.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	498e      	ldr	r1, [pc, #568]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800309e:	4b89      	ldr	r3, [pc, #548]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	4985      	ldr	r1, [pc, #532]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030c0:	4b80      	ldr	r3, [pc, #512]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ce:	497d      	ldr	r1, [pc, #500]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030e2:	4b78      	ldr	r3, [pc, #480]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f0:	4974      	ldr	r1, [pc, #464]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003104:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003112:	496c      	ldr	r1, [pc, #432]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003126:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003134:	4963      	ldr	r1, [pc, #396]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003148:	4b5e      	ldr	r3, [pc, #376]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003156:	495b      	ldr	r1, [pc, #364]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800316a:	4b56      	ldr	r3, [pc, #344]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003178:	4952      	ldr	r1, [pc, #328]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800318c:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	494a      	ldr	r1, [pc, #296]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ae:	4b45      	ldr	r3, [pc, #276]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031bc:	4941      	ldr	r1, [pc, #260]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031d0:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031de:	4939      	ldr	r1, [pc, #228]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d028      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f2:	4b34      	ldr	r3, [pc, #208]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003200:	4930      	ldr	r1, [pc, #192]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003210:	d106      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003212:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003218:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800321c:	60d3      	str	r3, [r2, #12]
 800321e:	e011      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003228:	d10c      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3304      	adds	r3, #4
 800322e:	2101      	movs	r1, #1
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f8f9 	bl	8003428 <RCCEx_PLLSAI1_Config>
 8003236:	4603      	mov	r3, r0
 8003238:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800323a:	7cfb      	ldrb	r3, [r7, #19]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d04d      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003258:	d108      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x494>
 800325a:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003260:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003266:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800326a:	e012      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800326c:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003272:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003278:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800328a:	490e      	ldr	r1, [pc, #56]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800329a:	d106      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800329c:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a6:	60d3      	str	r3, [r2, #12]
 80032a8:	e020      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032b2:	d109      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a02      	ldr	r2, [pc, #8]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032be:	60d3      	str	r3, [r2, #12]
 80032c0:	e014      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032d0:	d10c      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 f8a5 	bl	8003428 <RCCEx_PLLSAI1_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d028      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032f8:	4b4a      	ldr	r3, [pc, #296]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003306:	4947      	ldr	r1, [pc, #284]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003316:	d106      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003318:	4b42      	ldr	r3, [pc, #264]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4a41      	ldr	r2, [pc, #260]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800331e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003322:	60d3      	str	r3, [r2, #12]
 8003324:	e011      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800332a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800332e:	d10c      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	2101      	movs	r1, #1
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f876 	bl	8003428 <RCCEx_PLLSAI1_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003346:	7cfb      	ldrb	r3, [r7, #19]
 8003348:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d01e      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003356:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003366:	492f      	ldr	r1, [pc, #188]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003378:	d10c      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3304      	adds	r3, #4
 800337e:	2102      	movs	r1, #2
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f851 	bl	8003428 <RCCEx_PLLSAI1_Config>
 8003386:	4603      	mov	r3, r0
 8003388:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800338a:	7cfb      	ldrb	r3, [r7, #19]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00b      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033a6:	f023 0204 	bic.w	r2, r3, #4
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b0:	491c      	ldr	r1, [pc, #112]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00b      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80033c4:	4b17      	ldr	r3, [pc, #92]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033ca:	f023 0218 	bic.w	r2, r3, #24
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	4913      	ldr	r1, [pc, #76]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d017      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f8:	490a      	ldr	r1, [pc, #40]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003406:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800340a:	d105      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a04      	ldr	r2, [pc, #16]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003416:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003418:	7cbb      	ldrb	r3, [r7, #18]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000

08003428 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003436:	4b70      	ldr	r3, [pc, #448]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00e      	beq.n	8003460 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003442:	4b6d      	ldr	r3, [pc, #436]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0203 	and.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d103      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
       ||
 8003456:	2b00      	cmp	r3, #0
 8003458:	d13f      	bne.n	80034da <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	e03c      	b.n	80034da <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d00c      	beq.n	8003482 <RCCEx_PLLSAI1_Config+0x5a>
 8003468:	2b03      	cmp	r3, #3
 800346a:	d013      	beq.n	8003494 <RCCEx_PLLSAI1_Config+0x6c>
 800346c:	2b01      	cmp	r3, #1
 800346e:	d120      	bne.n	80034b2 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003470:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d11d      	bne.n	80034b8 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003480:	e01a      	b.n	80034b8 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003482:	4b5d      	ldr	r3, [pc, #372]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	2b00      	cmp	r3, #0
 800348c:	d116      	bne.n	80034bc <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003492:	e013      	b.n	80034bc <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003494:	4b58      	ldr	r3, [pc, #352]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10f      	bne.n	80034c0 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034a0:	4b55      	ldr	r3, [pc, #340]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034b0:	e006      	b.n	80034c0 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
      break;
 80034b6:	e004      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80034b8:	bf00      	nop
 80034ba:	e002      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80034bc:	bf00      	nop
 80034be:	e000      	b.n	80034c2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80034c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d108      	bne.n	80034da <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80034c8:	4b4b      	ldr	r3, [pc, #300]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f023 0203 	bic.w	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4948      	ldr	r1, [pc, #288]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f040 8086 	bne.w	80035ee <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034e2:	4b45      	ldr	r3, [pc, #276]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a44      	ldr	r2, [pc, #272]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80034e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ee:	f7fd fabb 	bl	8000a68 <HAL_GetTick>
 80034f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034f4:	e009      	b.n	800350a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034f6:	f7fd fab7 	bl	8000a68 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d902      	bls.n	800350a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	73fb      	strb	r3, [r7, #15]
        break;
 8003508:	e005      	b.n	8003516 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800350a:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ef      	bne.n	80034f6 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d168      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d113      	bne.n	800354a <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003522:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	4b35      	ldr	r3, [pc, #212]	; (80035fc <RCCEx_PLLSAI1_Config+0x1d4>)
 8003528:	4013      	ands	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6892      	ldr	r2, [r2, #8]
 800352e:	0211      	lsls	r1, r2, #8
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	68d2      	ldr	r2, [r2, #12]
 8003534:	06d2      	lsls	r2, r2, #27
 8003536:	4311      	orrs	r1, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6852      	ldr	r2, [r2, #4]
 800353c:	3a01      	subs	r2, #1
 800353e:	0112      	lsls	r2, r2, #4
 8003540:	430a      	orrs	r2, r1
 8003542:	492d      	ldr	r1, [pc, #180]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003544:	4313      	orrs	r3, r2
 8003546:	610b      	str	r3, [r1, #16]
 8003548:	e02d      	b.n	80035a6 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d115      	bne.n	800357c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003550:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003556:	4013      	ands	r3, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6892      	ldr	r2, [r2, #8]
 800355c:	0211      	lsls	r1, r2, #8
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6912      	ldr	r2, [r2, #16]
 8003562:	0852      	lsrs	r2, r2, #1
 8003564:	3a01      	subs	r2, #1
 8003566:	0552      	lsls	r2, r2, #21
 8003568:	4311      	orrs	r1, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6852      	ldr	r2, [r2, #4]
 800356e:	3a01      	subs	r2, #1
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	430a      	orrs	r2, r1
 8003574:	4920      	ldr	r1, [pc, #128]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003576:	4313      	orrs	r3, r2
 8003578:	610b      	str	r3, [r1, #16]
 800357a:	e014      	b.n	80035a6 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800357c:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	4b20      	ldr	r3, [pc, #128]	; (8003604 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003582:	4013      	ands	r3, r2
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6892      	ldr	r2, [r2, #8]
 8003588:	0211      	lsls	r1, r2, #8
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6952      	ldr	r2, [r2, #20]
 800358e:	0852      	lsrs	r2, r2, #1
 8003590:	3a01      	subs	r2, #1
 8003592:	0652      	lsls	r2, r2, #25
 8003594:	4311      	orrs	r1, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6852      	ldr	r2, [r2, #4]
 800359a:	3a01      	subs	r2, #1
 800359c:	0112      	lsls	r2, r2, #4
 800359e:	430a      	orrs	r2, r1
 80035a0:	4915      	ldr	r1, [pc, #84]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035a6:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a13      	ldr	r2, [pc, #76]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80035ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b2:	f7fd fa59 	bl	8000a68 <HAL_GetTick>
 80035b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035b8:	e009      	b.n	80035ce <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035ba:	f7fd fa55 	bl	8000a68 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d902      	bls.n	80035ce <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	73fb      	strb	r3, [r7, #15]
          break;
 80035cc:	e005      	b.n	80035da <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0ef      	beq.n	80035ba <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d106      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	4903      	ldr	r1, [pc, #12]	; (80035f8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000
 80035fc:	07ff800f 	.word	0x07ff800f
 8003600:	ff9f800f 	.word	0xff9f800f
 8003604:	f9ff800f 	.word	0xf9ff800f

08003608 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003616:	4b70      	ldr	r3, [pc, #448]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00e      	beq.n	8003640 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003622:	4b6d      	ldr	r3, [pc, #436]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f003 0203 	and.w	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d103      	bne.n	800363a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
       ||
 8003636:	2b00      	cmp	r3, #0
 8003638:	d13f      	bne.n	80036ba <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	e03c      	b.n	80036ba <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d00c      	beq.n	8003662 <RCCEx_PLLSAI2_Config+0x5a>
 8003648:	2b03      	cmp	r3, #3
 800364a:	d013      	beq.n	8003674 <RCCEx_PLLSAI2_Config+0x6c>
 800364c:	2b01      	cmp	r3, #1
 800364e:	d120      	bne.n	8003692 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003650:	4b61      	ldr	r3, [pc, #388]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d11d      	bne.n	8003698 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003660:	e01a      	b.n	8003698 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003662:	4b5d      	ldr	r3, [pc, #372]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	2b00      	cmp	r3, #0
 800366c:	d116      	bne.n	800369c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003672:	e013      	b.n	800369c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003674:	4b58      	ldr	r3, [pc, #352]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10f      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003680:	4b55      	ldr	r3, [pc, #340]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003690:	e006      	b.n	80036a0 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      break;
 8003696:	e004      	b.n	80036a2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003698:	bf00      	nop
 800369a:	e002      	b.n	80036a2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800369c:	bf00      	nop
 800369e:	e000      	b.n	80036a2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80036a0:	bf00      	nop
    }

    if(status == HAL_OK)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d108      	bne.n	80036ba <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80036a8:	4b4b      	ldr	r3, [pc, #300]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f023 0203 	bic.w	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4948      	ldr	r1, [pc, #288]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f040 8086 	bne.w	80037ce <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036c2:	4b45      	ldr	r3, [pc, #276]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a44      	ldr	r2, [pc, #272]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80036c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ce:	f7fd f9cb 	bl	8000a68 <HAL_GetTick>
 80036d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036d4:	e009      	b.n	80036ea <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036d6:	f7fd f9c7 	bl	8000a68 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d902      	bls.n	80036ea <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	73fb      	strb	r3, [r7, #15]
        break;
 80036e8:	e005      	b.n	80036f6 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036ea:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ef      	bne.n	80036d6 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d168      	bne.n	80037ce <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d113      	bne.n	800372a <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003702:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	4b35      	ldr	r3, [pc, #212]	; (80037dc <RCCEx_PLLSAI2_Config+0x1d4>)
 8003708:	4013      	ands	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6892      	ldr	r2, [r2, #8]
 800370e:	0211      	lsls	r1, r2, #8
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	68d2      	ldr	r2, [r2, #12]
 8003714:	06d2      	lsls	r2, r2, #27
 8003716:	4311      	orrs	r1, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6852      	ldr	r2, [r2, #4]
 800371c:	3a01      	subs	r2, #1
 800371e:	0112      	lsls	r2, r2, #4
 8003720:	430a      	orrs	r2, r1
 8003722:	492d      	ldr	r1, [pc, #180]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	614b      	str	r3, [r1, #20]
 8003728:	e02d      	b.n	8003786 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d115      	bne.n	800375c <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003730:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003736:	4013      	ands	r3, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6892      	ldr	r2, [r2, #8]
 800373c:	0211      	lsls	r1, r2, #8
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6912      	ldr	r2, [r2, #16]
 8003742:	0852      	lsrs	r2, r2, #1
 8003744:	3a01      	subs	r2, #1
 8003746:	0552      	lsls	r2, r2, #21
 8003748:	4311      	orrs	r1, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6852      	ldr	r2, [r2, #4]
 800374e:	3a01      	subs	r2, #1
 8003750:	0112      	lsls	r2, r2, #4
 8003752:	430a      	orrs	r2, r1
 8003754:	4920      	ldr	r1, [pc, #128]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003756:	4313      	orrs	r3, r2
 8003758:	614b      	str	r3, [r1, #20]
 800375a:	e014      	b.n	8003786 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800375c:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003762:	4013      	ands	r3, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6892      	ldr	r2, [r2, #8]
 8003768:	0211      	lsls	r1, r2, #8
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6952      	ldr	r2, [r2, #20]
 800376e:	0852      	lsrs	r2, r2, #1
 8003770:	3a01      	subs	r2, #1
 8003772:	0652      	lsls	r2, r2, #25
 8003774:	4311      	orrs	r1, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6852      	ldr	r2, [r2, #4]
 800377a:	3a01      	subs	r2, #1
 800377c:	0112      	lsls	r2, r2, #4
 800377e:	430a      	orrs	r2, r1
 8003780:	4915      	ldr	r1, [pc, #84]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003782:	4313      	orrs	r3, r2
 8003784:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003786:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003792:	f7fd f969 	bl	8000a68 <HAL_GetTick>
 8003796:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003798:	e009      	b.n	80037ae <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800379a:	f7fd f965 	bl	8000a68 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d902      	bls.n	80037ae <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	73fb      	strb	r3, [r7, #15]
          break;
 80037ac:	e005      	b.n	80037ba <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0ef      	beq.n	800379a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d106      	bne.n	80037ce <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	4903      	ldr	r1, [pc, #12]	; (80037d8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000
 80037dc:	07ff800f 	.word	0x07ff800f
 80037e0:	ff9f800f 	.word	0xff9f800f
 80037e4:	f9ff800f 	.word	0xf9ff800f

080037e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e01d      	b.n	8003836 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f815 	bl	800383e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f000 f986 	bl	8003b38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <HAL_TIM_Base_Start_IT+0x50>)
 8003874:	4013      	ands	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b06      	cmp	r3, #6
 800387c:	d00b      	beq.n	8003896 <HAL_TIM_Base_Start_IT+0x42>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003884:	d007      	beq.n	8003896 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	00010007 	.word	0x00010007

080038a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0202 	mvn.w	r2, #2
 80038d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f905 	bl	8003afa <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8f7 	bl	8003ae6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f908 	bl	8003b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b04      	cmp	r3, #4
 8003910:	d122      	bne.n	8003958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b04      	cmp	r3, #4
 800391e:	d11b      	bne.n	8003958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0204 	mvn.w	r2, #4
 8003928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8db 	bl	8003afa <HAL_TIM_IC_CaptureCallback>
 8003944:	e005      	b.n	8003952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8cd 	bl	8003ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f8de 	bl	8003b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b08      	cmp	r3, #8
 8003964:	d122      	bne.n	80039ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b08      	cmp	r3, #8
 8003972:	d11b      	bne.n	80039ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0208 	mvn.w	r2, #8
 800397c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2204      	movs	r2, #4
 8003982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f8b1 	bl	8003afa <HAL_TIM_IC_CaptureCallback>
 8003998:	e005      	b.n	80039a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8a3 	bl	8003ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f8b4 	bl	8003b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d122      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d11b      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0210 	mvn.w	r2, #16
 80039d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2208      	movs	r2, #8
 80039d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f887 	bl	8003afa <HAL_TIM_IC_CaptureCallback>
 80039ec:	e005      	b.n	80039fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f879 	bl	8003ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f88a 	bl	8003b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0201 	mvn.w	r2, #1
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fc fe9c 	bl	8000764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b80      	cmp	r3, #128	; 0x80
 8003a38:	d10e      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b80      	cmp	r3, #128	; 0x80
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f914 	bl	8003c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a66:	d10e      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a72:	2b80      	cmp	r3, #128	; 0x80
 8003a74:	d107      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f907 	bl	8003c94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d10e      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d107      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f838 	bl	8003b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d10e      	bne.n	8003ade <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d107      	bne.n	8003ade <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f06f 0220 	mvn.w	r2, #32
 8003ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f8c7 	bl	8003c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a40      	ldr	r2, [pc, #256]	; (8003c4c <TIM_Base_SetConfig+0x114>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <TIM_Base_SetConfig+0x40>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b56:	d00f      	beq.n	8003b78 <TIM_Base_SetConfig+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a3d      	ldr	r2, [pc, #244]	; (8003c50 <TIM_Base_SetConfig+0x118>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00b      	beq.n	8003b78 <TIM_Base_SetConfig+0x40>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a3c      	ldr	r2, [pc, #240]	; (8003c54 <TIM_Base_SetConfig+0x11c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d007      	beq.n	8003b78 <TIM_Base_SetConfig+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a3b      	ldr	r2, [pc, #236]	; (8003c58 <TIM_Base_SetConfig+0x120>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <TIM_Base_SetConfig+0x40>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a3a      	ldr	r2, [pc, #232]	; (8003c5c <TIM_Base_SetConfig+0x124>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d108      	bne.n	8003b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a2f      	ldr	r2, [pc, #188]	; (8003c4c <TIM_Base_SetConfig+0x114>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01f      	beq.n	8003bd2 <TIM_Base_SetConfig+0x9a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b98:	d01b      	beq.n	8003bd2 <TIM_Base_SetConfig+0x9a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a2c      	ldr	r2, [pc, #176]	; (8003c50 <TIM_Base_SetConfig+0x118>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d017      	beq.n	8003bd2 <TIM_Base_SetConfig+0x9a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a2b      	ldr	r2, [pc, #172]	; (8003c54 <TIM_Base_SetConfig+0x11c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <TIM_Base_SetConfig+0x9a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a2a      	ldr	r2, [pc, #168]	; (8003c58 <TIM_Base_SetConfig+0x120>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00f      	beq.n	8003bd2 <TIM_Base_SetConfig+0x9a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a29      	ldr	r2, [pc, #164]	; (8003c5c <TIM_Base_SetConfig+0x124>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00b      	beq.n	8003bd2 <TIM_Base_SetConfig+0x9a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a28      	ldr	r2, [pc, #160]	; (8003c60 <TIM_Base_SetConfig+0x128>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <TIM_Base_SetConfig+0x9a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a27      	ldr	r2, [pc, #156]	; (8003c64 <TIM_Base_SetConfig+0x12c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d003      	beq.n	8003bd2 <TIM_Base_SetConfig+0x9a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a26      	ldr	r2, [pc, #152]	; (8003c68 <TIM_Base_SetConfig+0x130>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d108      	bne.n	8003be4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a10      	ldr	r2, [pc, #64]	; (8003c4c <TIM_Base_SetConfig+0x114>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00f      	beq.n	8003c30 <TIM_Base_SetConfig+0xf8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a12      	ldr	r2, [pc, #72]	; (8003c5c <TIM_Base_SetConfig+0x124>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <TIM_Base_SetConfig+0xf8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <TIM_Base_SetConfig+0x128>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_Base_SetConfig+0xf8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a10      	ldr	r2, [pc, #64]	; (8003c64 <TIM_Base_SetConfig+0x12c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_Base_SetConfig+0xf8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a0f      	ldr	r2, [pc, #60]	; (8003c68 <TIM_Base_SetConfig+0x130>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d103      	bne.n	8003c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	615a      	str	r2, [r3, #20]
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40000400 	.word	0x40000400
 8003c54:	40000800 	.word	0x40000800
 8003c58:	40000c00 	.word	0x40000c00
 8003c5c:	40013400 	.word	0x40013400
 8003c60:	40014000 	.word	0x40014000
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800

08003c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cba:	2b84      	cmp	r3, #132	; 0x84
 8003cbc:	d005      	beq.n	8003cca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003cbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3303      	adds	r3, #3
 8003cc8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003cca:	68fb      	ldr	r3, [r7, #12]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cdc:	f000 feb6 	bl	8004a4c <vTaskStartScheduler>
  
  return osOK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce8:	b089      	sub	sp, #36	; 0x24
 8003cea:	af04      	add	r7, sp, #16
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <osThreadCreate+0x54>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01c      	beq.n	8003d3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685c      	ldr	r4, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681d      	ldr	r5, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691e      	ldr	r6, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ffc8 	bl	8003ca8 <makeFreeRtosPriority>
 8003d18:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d22:	9202      	str	r2, [sp, #8]
 8003d24:	9301      	str	r3, [sp, #4]
 8003d26:	9100      	str	r1, [sp, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	4632      	mov	r2, r6
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f000 fcc8 	bl	80046c4 <xTaskCreateStatic>
 8003d34:	4603      	mov	r3, r0
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e01c      	b.n	8003d74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685c      	ldr	r4, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d46:	b29e      	uxth	r6, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ffaa 	bl	8003ca8 <makeFreeRtosPriority>
 8003d54:	4602      	mov	r2, r0
 8003d56:	f107 030c 	add.w	r3, r7, #12
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	9200      	str	r2, [sp, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	4632      	mov	r2, r6
 8003d62:	4629      	mov	r1, r5
 8003d64:	4620      	mov	r0, r4
 8003d66:	f000 fd07 	bl	8004778 <xTaskCreate>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d001      	beq.n	8003d74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e000      	b.n	8003d76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d74:	68fb      	ldr	r3, [r7, #12]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <osDelay+0x16>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	e000      	b.n	8003d96 <osDelay+0x18>
 8003d94:	2301      	movs	r3, #1
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fe24 	bl	80049e4 <vTaskDelay>
  
  return osOK;
 8003d9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003db4:	f000 fea8 	bl	8004b08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003db8:	4b57      	ldr	r3, [pc, #348]	; (8003f18 <pvPortMalloc+0x170>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003dc0:	f000 f90c 	bl	8003fdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003dc4:	4b55      	ldr	r3, [pc, #340]	; (8003f1c <pvPortMalloc+0x174>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f040 808c 	bne.w	8003eea <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01c      	beq.n	8003e12 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003dd8:	2208      	movs	r2, #8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d013      	beq.n	8003e12 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f023 0307 	bic.w	r3, r3, #7
 8003df0:	3308      	adds	r3, #8
 8003df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	e7fe      	b.n	8003e10 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d068      	beq.n	8003eea <pvPortMalloc+0x142>
 8003e18:	4b41      	ldr	r3, [pc, #260]	; (8003f20 <pvPortMalloc+0x178>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d863      	bhi.n	8003eea <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e22:	4b40      	ldr	r3, [pc, #256]	; (8003f24 <pvPortMalloc+0x17c>)
 8003e24:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e26:	4b3f      	ldr	r3, [pc, #252]	; (8003f24 <pvPortMalloc+0x17c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e2c:	e004      	b.n	8003e38 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d903      	bls.n	8003e4a <pvPortMalloc+0xa2>
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f1      	bne.n	8003e2e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e4a:	4b33      	ldr	r3, [pc, #204]	; (8003f18 <pvPortMalloc+0x170>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d04a      	beq.n	8003eea <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2208      	movs	r2, #8
 8003e5a:	4413      	add	r3, r2
 8003e5c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	1ad2      	subs	r2, r2, r3
 8003e6e:	2308      	movs	r3, #8
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d91e      	bls.n	8003eb4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d009      	beq.n	8003e9c <pvPortMalloc+0xf4>
 8003e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	e7fe      	b.n	8003e9a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	1ad2      	subs	r2, r2, r3
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003eae:	69b8      	ldr	r0, [r7, #24]
 8003eb0:	f000 f8f6 	bl	80040a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003eb4:	4b1a      	ldr	r3, [pc, #104]	; (8003f20 <pvPortMalloc+0x178>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <pvPortMalloc+0x178>)
 8003ec0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ec2:	4b17      	ldr	r3, [pc, #92]	; (8003f20 <pvPortMalloc+0x178>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <pvPortMalloc+0x180>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d203      	bcs.n	8003ed6 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ece:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <pvPortMalloc+0x178>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a15      	ldr	r2, [pc, #84]	; (8003f28 <pvPortMalloc+0x180>)
 8003ed4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <pvPortMalloc+0x174>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003eea:	f000 fe1b 	bl	8004b24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <pvPortMalloc+0x164>
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	e7fe      	b.n	8003f0a <pvPortMalloc+0x162>
	return pvReturn;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3728      	adds	r7, #40	; 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	200019f8 	.word	0x200019f8
 8003f1c:	20001a04 	.word	0x20001a04
 8003f20:	200019fc 	.word	0x200019fc
 8003f24:	200019f0 	.word	0x200019f0
 8003f28:	20001a00 	.word	0x20001a00

08003f2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d046      	beq.n	8003fcc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f3e:	2308      	movs	r3, #8
 8003f40:	425b      	negs	r3, r3
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4413      	add	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <vPortFree+0xa8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <vPortFree+0x42>
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e7fe      	b.n	8003f6c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <vPortFree+0x5e>
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	e7fe      	b.n	8003f88 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <vPortFree+0xa8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d019      	beq.n	8003fcc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d115      	bne.n	8003fcc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <vPortFree+0xa8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	401a      	ands	r2, r3
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003fb0:	f000 fdaa 	bl	8004b08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <vPortFree+0xac>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	4a06      	ldr	r2, [pc, #24]	; (8003fd8 <vPortFree+0xac>)
 8003fc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003fc2:	6938      	ldr	r0, [r7, #16]
 8003fc4:	f000 f86c 	bl	80040a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003fc8:	f000 fdac 	bl	8004b24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003fcc:	bf00      	nop
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20001a04 	.word	0x20001a04
 8003fd8:	200019fc 	.word	0x200019fc

08003fdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fe2:	f241 7370 	movw	r3, #6000	; 0x1770
 8003fe6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003fe8:	4b27      	ldr	r3, [pc, #156]	; (8004088 <prvHeapInit+0xac>)
 8003fea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00c      	beq.n	8004010 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3307      	adds	r3, #7
 8003ffa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0307 	bic.w	r3, r3, #7
 8004002:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <prvHeapInit+0xac>)
 800400c:	4413      	add	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004014:	4a1d      	ldr	r2, [pc, #116]	; (800408c <prvHeapInit+0xb0>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800401a:	4b1c      	ldr	r3, [pc, #112]	; (800408c <prvHeapInit+0xb0>)
 800401c:	2200      	movs	r2, #0
 800401e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	4413      	add	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004028:	2208      	movs	r2, #8
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0307 	bic.w	r3, r3, #7
 8004036:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a15      	ldr	r2, [pc, #84]	; (8004090 <prvHeapInit+0xb4>)
 800403c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800403e:	4b14      	ldr	r3, [pc, #80]	; (8004090 <prvHeapInit+0xb4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <prvHeapInit+0xb4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	1ad2      	subs	r2, r2, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <prvHeapInit+0xb4>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <prvHeapInit+0xb8>)
 800406a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4a09      	ldr	r2, [pc, #36]	; (8004098 <prvHeapInit+0xbc>)
 8004072:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <prvHeapInit+0xc0>)
 8004076:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800407a:	601a      	str	r2, [r3, #0]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	20000280 	.word	0x20000280
 800408c:	200019f0 	.word	0x200019f0
 8004090:	200019f8 	.word	0x200019f8
 8004094:	20001a00 	.word	0x20001a00
 8004098:	200019fc 	.word	0x200019fc
 800409c:	20001a04 	.word	0x20001a04

080040a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040a8:	4b28      	ldr	r3, [pc, #160]	; (800414c <prvInsertBlockIntoFreeList+0xac>)
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e002      	b.n	80040b4 <prvInsertBlockIntoFreeList+0x14>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d8f7      	bhi.n	80040ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	4413      	add	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d108      	bne.n	80040e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	441a      	add	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	441a      	add	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d118      	bne.n	8004128 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4b15      	ldr	r3, [pc, #84]	; (8004150 <prvInsertBlockIntoFreeList+0xb0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d00d      	beq.n	800411e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	441a      	add	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e008      	b.n	8004130 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800411e:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <prvInsertBlockIntoFreeList+0xb0>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	e003      	b.n	8004130 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	429a      	cmp	r2, r3
 8004136:	d002      	beq.n	800413e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	200019f0 	.word	0x200019f0
 8004150:	200019f8 	.word	0x200019f8

08004154 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f103 0208 	add.w	r2, r3, #8
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f04f 32ff 	mov.w	r2, #4294967295
 800416c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f103 0208 	add.w	r2, r3, #8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f103 0208 	add.w	r2, r3, #8
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	601a      	str	r2, [r3, #0]
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041f6:	b480      	push	{r7}
 80041f8:	b085      	sub	sp, #20
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d103      	bne.n	8004216 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e00c      	b.n	8004230 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3308      	adds	r3, #8
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e002      	b.n	8004224 <vListInsert+0x2e>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	429a      	cmp	r2, r3
 800422e:	d2f6      	bcs.n	800421e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	601a      	str	r2, [r3, #0]
}
 800425c:	bf00      	nop
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6892      	ldr	r2, [r2, #8]
 800427e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6852      	ldr	r2, [r2, #4]
 8004288:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d103      	bne.n	800429c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	1e5a      	subs	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3b04      	subs	r3, #4
 80042cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	3b04      	subs	r3, #4
 80042da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f023 0201 	bic.w	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3b04      	subs	r3, #4
 80042ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80042ec:	4a0c      	ldr	r2, [pc, #48]	; (8004320 <pxPortInitialiseStack+0x64>)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3b14      	subs	r3, #20
 80042f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3b04      	subs	r3, #4
 8004302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f06f 0202 	mvn.w	r2, #2
 800430a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3b20      	subs	r3, #32
 8004310:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004312:	68fb      	ldr	r3, [r7, #12]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	08004325 	.word	0x08004325

08004324 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800432a:	2300      	movs	r3, #0
 800432c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800432e:	4b11      	ldr	r3, [pc, #68]	; (8004374 <prvTaskExitError+0x50>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004336:	d009      	beq.n	800434c <prvTaskExitError+0x28>
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	e7fe      	b.n	800434a <prvTaskExitError+0x26>
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800435e:	bf00      	nop
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0fc      	beq.n	8004360 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	2000000c 	.word	0x2000000c
	...

08004380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <pxCurrentTCBConst2>)
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	6808      	ldr	r0, [r1, #0]
 8004386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438a:	f380 8809 	msr	PSP, r0
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f380 8811 	msr	BASEPRI, r0
 800439a:	4770      	bx	lr
 800439c:	f3af 8000 	nop.w

080043a0 <pxCurrentTCBConst2>:
 80043a0:	20001a10 	.word	0x20001a10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop

080043a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80043a8:	4808      	ldr	r0, [pc, #32]	; (80043cc <prvPortStartFirstTask+0x24>)
 80043aa:	6800      	ldr	r0, [r0, #0]
 80043ac:	6800      	ldr	r0, [r0, #0]
 80043ae:	f380 8808 	msr	MSP, r0
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f380 8814 	msr	CONTROL, r0
 80043ba:	b662      	cpsie	i
 80043bc:	b661      	cpsie	f
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	df00      	svc	0
 80043c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043ca:	bf00      	nop
 80043cc:	e000ed08 	.word	0xe000ed08

080043d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043d6:	4b44      	ldr	r3, [pc, #272]	; (80044e8 <xPortStartScheduler+0x118>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a44      	ldr	r2, [pc, #272]	; (80044ec <xPortStartScheduler+0x11c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d109      	bne.n	80043f4 <xPortStartScheduler+0x24>
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	e7fe      	b.n	80043f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043f4:	4b3c      	ldr	r3, [pc, #240]	; (80044e8 <xPortStartScheduler+0x118>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a3d      	ldr	r2, [pc, #244]	; (80044f0 <xPortStartScheduler+0x120>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d109      	bne.n	8004412 <xPortStartScheduler+0x42>
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	e7fe      	b.n	8004410 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004412:	4b38      	ldr	r3, [pc, #224]	; (80044f4 <xPortStartScheduler+0x124>)
 8004414:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	22ff      	movs	r2, #255	; 0xff
 8004422:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004434:	b2da      	uxtb	r2, r3
 8004436:	4b30      	ldr	r3, [pc, #192]	; (80044f8 <xPortStartScheduler+0x128>)
 8004438:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800443a:	4b30      	ldr	r3, [pc, #192]	; (80044fc <xPortStartScheduler+0x12c>)
 800443c:	2207      	movs	r2, #7
 800443e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004440:	e009      	b.n	8004456 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004442:	4b2e      	ldr	r3, [pc, #184]	; (80044fc <xPortStartScheduler+0x12c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3b01      	subs	r3, #1
 8004448:	4a2c      	ldr	r2, [pc, #176]	; (80044fc <xPortStartScheduler+0x12c>)
 800444a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	b2db      	uxtb	r3, r3
 8004454:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	2b80      	cmp	r3, #128	; 0x80
 8004460:	d0ef      	beq.n	8004442 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004462:	4b26      	ldr	r3, [pc, #152]	; (80044fc <xPortStartScheduler+0x12c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f1c3 0307 	rsb	r3, r3, #7
 800446a:	2b04      	cmp	r3, #4
 800446c:	d009      	beq.n	8004482 <xPortStartScheduler+0xb2>
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	e7fe      	b.n	8004480 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004482:	4b1e      	ldr	r3, [pc, #120]	; (80044fc <xPortStartScheduler+0x12c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <xPortStartScheduler+0x12c>)
 800448a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800448c:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <xPortStartScheduler+0x12c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004494:	4a19      	ldr	r2, [pc, #100]	; (80044fc <xPortStartScheduler+0x12c>)
 8004496:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	b2da      	uxtb	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044a0:	4b17      	ldr	r3, [pc, #92]	; (8004500 <xPortStartScheduler+0x130>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a16      	ldr	r2, [pc, #88]	; (8004500 <xPortStartScheduler+0x130>)
 80044a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044ac:	4b14      	ldr	r3, [pc, #80]	; (8004500 <xPortStartScheduler+0x130>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a13      	ldr	r2, [pc, #76]	; (8004500 <xPortStartScheduler+0x130>)
 80044b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044b8:	f000 f8d6 	bl	8004668 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044bc:	4b11      	ldr	r3, [pc, #68]	; (8004504 <xPortStartScheduler+0x134>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80044c2:	f000 f8f5 	bl	80046b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <xPortStartScheduler+0x138>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a0f      	ldr	r2, [pc, #60]	; (8004508 <xPortStartScheduler+0x138>)
 80044cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044d2:	f7ff ff69 	bl	80043a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044d6:	f000 fc79 	bl	8004dcc <vTaskSwitchContext>
	prvTaskExitError();
 80044da:	f7ff ff23 	bl	8004324 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	e000ed00 	.word	0xe000ed00
 80044ec:	410fc271 	.word	0x410fc271
 80044f0:	410fc270 	.word	0x410fc270
 80044f4:	e000e400 	.word	0xe000e400
 80044f8:	20001a08 	.word	0x20001a08
 80044fc:	20001a0c 	.word	0x20001a0c
 8004500:	e000ed20 	.word	0xe000ed20
 8004504:	2000000c 	.word	0x2000000c
 8004508:	e000ef34 	.word	0xe000ef34

0800450c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <vPortEnterCritical+0x54>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3301      	adds	r3, #1
 800452a:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <vPortEnterCritical+0x54>)
 800452c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <vPortEnterCritical+0x54>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d10e      	bne.n	8004554 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <vPortEnterCritical+0x58>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d009      	beq.n	8004554 <vPortEnterCritical+0x48>
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	e7fe      	b.n	8004552 <vPortEnterCritical+0x46>
	}
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	2000000c 	.word	0x2000000c
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800456e:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <vPortExitCritical+0x4c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <vPortExitCritical+0x22>
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	e7fe      	b.n	8004588 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800458a:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <vPortExitCritical+0x4c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3b01      	subs	r3, #1
 8004590:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <vPortExitCritical+0x4c>)
 8004592:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <vPortExitCritical+0x4c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d104      	bne.n	80045a6 <vPortExitCritical+0x3e>
 800459c:	2300      	movs	r3, #0
 800459e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	2000000c 	.word	0x2000000c
	...

080045c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045c0:	f3ef 8009 	mrs	r0, PSP
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	4b15      	ldr	r3, [pc, #84]	; (8004620 <pxCurrentTCBConst>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	f01e 0f10 	tst.w	lr, #16
 80045d0:	bf08      	it	eq
 80045d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045da:	6010      	str	r0, [r2, #0]
 80045dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045e4:	f380 8811 	msr	BASEPRI, r0
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f000 fbec 	bl	8004dcc <vTaskSwitchContext>
 80045f4:	f04f 0000 	mov.w	r0, #0
 80045f8:	f380 8811 	msr	BASEPRI, r0
 80045fc:	bc09      	pop	{r0, r3}
 80045fe:	6819      	ldr	r1, [r3, #0]
 8004600:	6808      	ldr	r0, [r1, #0]
 8004602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004606:	f01e 0f10 	tst.w	lr, #16
 800460a:	bf08      	it	eq
 800460c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004610:	f380 8809 	msr	PSP, r0
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	f3af 8000 	nop.w

08004620 <pxCurrentTCBConst>:
 8004620:	20001a10 	.word	0x20001a10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop

08004628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004640:	f000 fb0c 	bl	8004c5c <xTaskIncrementTick>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <SysTick_Handler+0x3c>)
 800464c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	2300      	movs	r3, #0
 8004654:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	e000ed04 	.word	0xe000ed04

08004668 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <vPortSetupTimerInterrupt+0x34>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <vPortSetupTimerInterrupt+0x38>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004678:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <vPortSetupTimerInterrupt+0x3c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <vPortSetupTimerInterrupt+0x40>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	099b      	lsrs	r3, r3, #6
 8004684:	4a09      	ldr	r2, [pc, #36]	; (80046ac <vPortSetupTimerInterrupt+0x44>)
 8004686:	3b01      	subs	r3, #1
 8004688:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800468a:	4b04      	ldr	r3, [pc, #16]	; (800469c <vPortSetupTimerInterrupt+0x34>)
 800468c:	2207      	movs	r2, #7
 800468e:	601a      	str	r2, [r3, #0]
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000e010 	.word	0xe000e010
 80046a0:	e000e018 	.word	0xe000e018
 80046a4:	20000000 	.word	0x20000000
 80046a8:	10624dd3 	.word	0x10624dd3
 80046ac:	e000e014 	.word	0xe000e014

080046b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046c0 <vPortEnableVFP+0x10>
 80046b4:	6801      	ldr	r1, [r0, #0]
 80046b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046ba:	6001      	str	r1, [r0, #0]
 80046bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80046be:	bf00      	nop
 80046c0:	e000ed88 	.word	0xe000ed88

080046c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08e      	sub	sp, #56	; 0x38
 80046c8:	af04      	add	r7, sp, #16
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <xTaskCreateStatic+0x28>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	e7fe      	b.n	80046ea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80046ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <xTaskCreateStatic+0x42>
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	e7fe      	b.n	8004704 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004706:	2354      	movs	r3, #84	; 0x54
 8004708:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b54      	cmp	r3, #84	; 0x54
 800470e:	d009      	beq.n	8004724 <xTaskCreateStatic+0x60>
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	e7fe      	b.n	8004722 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004724:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01e      	beq.n	800476a <xTaskCreateStatic+0xa6>
 800472c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01b      	beq.n	800476a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800473a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004744:	2300      	movs	r3, #0
 8004746:	9303      	str	r3, [sp, #12]
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	9302      	str	r3, [sp, #8]
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f850 	bl	8004802 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004764:	f000 f8d4 	bl	8004910 <prvAddNewTaskToReadyList>
 8004768:	e001      	b.n	800476e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800476e:	697b      	ldr	r3, [r7, #20]
	}
 8004770:	4618      	mov	r0, r3
 8004772:	3728      	adds	r7, #40	; 0x28
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08c      	sub	sp, #48	; 0x30
 800477c:	af04      	add	r7, sp, #16
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004788:	88fb      	ldrh	r3, [r7, #6]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fb0b 	bl	8003da8 <pvPortMalloc>
 8004792:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00e      	beq.n	80047b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800479a:	2054      	movs	r0, #84	; 0x54
 800479c:	f7ff fb04 	bl	8003da8 <pvPortMalloc>
 80047a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30
 80047ae:	e005      	b.n	80047bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047b0:	6978      	ldr	r0, [r7, #20]
 80047b2:	f7ff fbbb 	bl	8003f2c <vPortFree>
 80047b6:	e001      	b.n	80047bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d017      	beq.n	80047f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047ca:	88fa      	ldrh	r2, [r7, #6]
 80047cc:	2300      	movs	r3, #0
 80047ce:	9303      	str	r3, [sp, #12]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	9302      	str	r3, [sp, #8]
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f80e 	bl	8004802 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047e6:	69f8      	ldr	r0, [r7, #28]
 80047e8:	f000 f892 	bl	8004910 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047ec:	2301      	movs	r3, #1
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	e002      	b.n	80047f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047f2:	f04f 33ff 	mov.w	r3, #4294967295
 80047f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047f8:	69bb      	ldr	r3, [r7, #24]
	}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b088      	sub	sp, #32
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800481a:	3b01      	subs	r3, #1
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	f023 0307 	bic.w	r3, r3, #7
 8004828:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <prvInitialiseNewTask+0x46>
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	e7fe      	b.n	8004846 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d01f      	beq.n	800488e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e012      	b.n	800487a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	4413      	add	r3, r2
 800485a:	7819      	ldrb	r1, [r3, #0]
 800485c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	4413      	add	r3, r2
 8004862:	3334      	adds	r3, #52	; 0x34
 8004864:	460a      	mov	r2, r1
 8004866:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	4413      	add	r3, r2
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d006      	beq.n	8004882 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	3301      	adds	r3, #1
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2b0f      	cmp	r3, #15
 800487e:	d9e9      	bls.n	8004854 <prvInitialiseNewTask+0x52>
 8004880:	e000      	b.n	8004884 <prvInitialiseNewTask+0x82>
			{
				break;
 8004882:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800488c:	e003      	b.n	8004896 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	2b06      	cmp	r3, #6
 800489a:	d901      	bls.n	80048a0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800489c:	2306      	movs	r3, #6
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	2200      	movs	r2, #0
 80048b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	3304      	adds	r3, #4
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fc6c 	bl	8004194 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	3318      	adds	r3, #24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fc67 	bl	8004194 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	f1c3 0207 	rsb	r2, r3, #7
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	2200      	movs	r2, #0
 80048e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	68f9      	ldr	r1, [r7, #12]
 80048ee:	69b8      	ldr	r0, [r7, #24]
 80048f0:	f7ff fce4 	bl	80042bc <pxPortInitialiseStack>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004906:	bf00      	nop
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004918:	f7ff fdf8 	bl	800450c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800491c:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <prvAddNewTaskToReadyList+0xb8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3301      	adds	r3, #1
 8004922:	4a29      	ldr	r2, [pc, #164]	; (80049c8 <prvAddNewTaskToReadyList+0xb8>)
 8004924:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004926:	4b29      	ldr	r3, [pc, #164]	; (80049cc <prvAddNewTaskToReadyList+0xbc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800492e:	4a27      	ldr	r2, [pc, #156]	; (80049cc <prvAddNewTaskToReadyList+0xbc>)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004934:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <prvAddNewTaskToReadyList+0xb8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d110      	bne.n	800495e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800493c:	f000 fab8 	bl	8004eb0 <prvInitialiseTaskLists>
 8004940:	e00d      	b.n	800495e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004942:	4b23      	ldr	r3, [pc, #140]	; (80049d0 <prvAddNewTaskToReadyList+0xc0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <prvAddNewTaskToReadyList+0xbc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	429a      	cmp	r2, r3
 8004956:	d802      	bhi.n	800495e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004958:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <prvAddNewTaskToReadyList+0xbc>)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800495e:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <prvAddNewTaskToReadyList+0xc4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3301      	adds	r3, #1
 8004964:	4a1b      	ldr	r2, [pc, #108]	; (80049d4 <prvAddNewTaskToReadyList+0xc4>)
 8004966:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	2201      	movs	r2, #1
 800496e:	409a      	lsls	r2, r3
 8004970:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <prvAddNewTaskToReadyList+0xc8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4313      	orrs	r3, r2
 8004976:	4a18      	ldr	r2, [pc, #96]	; (80049d8 <prvAddNewTaskToReadyList+0xc8>)
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4a15      	ldr	r2, [pc, #84]	; (80049dc <prvAddNewTaskToReadyList+0xcc>)
 8004988:	441a      	add	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	4619      	mov	r1, r3
 8004990:	4610      	mov	r0, r2
 8004992:	f7ff fc0c 	bl	80041ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004996:	f7ff fde7 	bl	8004568 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800499a:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <prvAddNewTaskToReadyList+0xc0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00e      	beq.n	80049c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049a2:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <prvAddNewTaskToReadyList+0xbc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d207      	bcs.n	80049c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <prvAddNewTaskToReadyList+0xd0>)
 80049b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20001b10 	.word	0x20001b10
 80049cc:	20001a10 	.word	0x20001a10
 80049d0:	20001b1c 	.word	0x20001b1c
 80049d4:	20001b2c 	.word	0x20001b2c
 80049d8:	20001b18 	.word	0x20001b18
 80049dc:	20001a14 	.word	0x20001a14
 80049e0:	e000ed04 	.word	0xe000ed04

080049e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d016      	beq.n	8004a24 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049f6:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <vTaskDelay+0x60>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <vTaskDelay+0x2e>
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	e7fe      	b.n	8004a10 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004a12:	f000 f879 	bl	8004b08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a16:	2100      	movs	r1, #0
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fb03 	bl	8005024 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a1e:	f000 f881 	bl	8004b24 <xTaskResumeAll>
 8004a22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d107      	bne.n	8004a3a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004a2a:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <vTaskDelay+0x64>)
 8004a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20001b38 	.word	0x20001b38
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	; 0x28
 8004a50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a5a:	463a      	mov	r2, r7
 8004a5c:	1d39      	adds	r1, r7, #4
 8004a5e:	f107 0308 	add.w	r3, r7, #8
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fb fbcc 	bl	8000200 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a68:	6839      	ldr	r1, [r7, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	9202      	str	r2, [sp, #8]
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	2300      	movs	r3, #0
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	2300      	movs	r3, #0
 8004a78:	460a      	mov	r2, r1
 8004a7a:	491d      	ldr	r1, [pc, #116]	; (8004af0 <vTaskStartScheduler+0xa4>)
 8004a7c:	481d      	ldr	r0, [pc, #116]	; (8004af4 <vTaskStartScheduler+0xa8>)
 8004a7e:	f7ff fe21 	bl	80046c4 <xTaskCreateStatic>
 8004a82:	4602      	mov	r2, r0
 8004a84:	4b1c      	ldr	r3, [pc, #112]	; (8004af8 <vTaskStartScheduler+0xac>)
 8004a86:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <vTaskStartScheduler+0xac>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a90:	2301      	movs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e001      	b.n	8004a9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d115      	bne.n	8004acc <vTaskStartScheduler+0x80>
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ab2:	4b12      	ldr	r3, [pc, #72]	; (8004afc <vTaskStartScheduler+0xb0>)
 8004ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004aba:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <vTaskStartScheduler+0xb4>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ac0:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <vTaskStartScheduler+0xb8>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ac6:	f7ff fc83 	bl	80043d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004aca:	e00d      	b.n	8004ae8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad2:	d109      	bne.n	8004ae8 <vTaskStartScheduler+0x9c>
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e7fe      	b.n	8004ae6 <vTaskStartScheduler+0x9a>
}
 8004ae8:	bf00      	nop
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	08005188 	.word	0x08005188
 8004af4:	08004e81 	.word	0x08004e81
 8004af8:	20001b34 	.word	0x20001b34
 8004afc:	20001b30 	.word	0x20001b30
 8004b00:	20001b1c 	.word	0x20001b1c
 8004b04:	20001b14 	.word	0x20001b14

08004b08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <vTaskSuspendAll+0x18>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3301      	adds	r3, #1
 8004b12:	4a03      	ldr	r2, [pc, #12]	; (8004b20 <vTaskSuspendAll+0x18>)
 8004b14:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004b16:	bf00      	nop
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	20001b38 	.word	0x20001b38

08004b24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b32:	4b41      	ldr	r3, [pc, #260]	; (8004c38 <xTaskResumeAll+0x114>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <xTaskResumeAll+0x2a>
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	e7fe      	b.n	8004b4c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b4e:	f7ff fcdd 	bl	800450c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b52:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <xTaskResumeAll+0x114>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	4a37      	ldr	r2, [pc, #220]	; (8004c38 <xTaskResumeAll+0x114>)
 8004b5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b5c:	4b36      	ldr	r3, [pc, #216]	; (8004c38 <xTaskResumeAll+0x114>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d161      	bne.n	8004c28 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b64:	4b35      	ldr	r3, [pc, #212]	; (8004c3c <xTaskResumeAll+0x118>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d05d      	beq.n	8004c28 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b6c:	e02e      	b.n	8004bcc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b6e:	4b34      	ldr	r3, [pc, #208]	; (8004c40 <xTaskResumeAll+0x11c>)
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3318      	adds	r3, #24
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fb74 	bl	8004268 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3304      	adds	r3, #4
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff fb6f 	bl	8004268 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	2201      	movs	r2, #1
 8004b90:	409a      	lsls	r2, r3
 8004b92:	4b2c      	ldr	r3, [pc, #176]	; (8004c44 <xTaskResumeAll+0x120>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	4a2a      	ldr	r2, [pc, #168]	; (8004c44 <xTaskResumeAll+0x120>)
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4a27      	ldr	r2, [pc, #156]	; (8004c48 <xTaskResumeAll+0x124>)
 8004baa:	441a      	add	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f7ff fafb 	bl	80041ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbc:	4b23      	ldr	r3, [pc, #140]	; (8004c4c <xTaskResumeAll+0x128>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004bc6:	4b22      	ldr	r3, [pc, #136]	; (8004c50 <xTaskResumeAll+0x12c>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bcc:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <xTaskResumeAll+0x11c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1cc      	bne.n	8004b6e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bda:	f000 fa03 	bl	8004fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004bde:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <xTaskResumeAll+0x130>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d010      	beq.n	8004c0c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bea:	f000 f837 	bl	8004c5c <xTaskIncrementTick>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004bf4:	4b16      	ldr	r3, [pc, #88]	; (8004c50 <xTaskResumeAll+0x12c>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f1      	bne.n	8004bea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <xTaskResumeAll+0x130>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c0c:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <xTaskResumeAll+0x12c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d009      	beq.n	8004c28 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c14:	2301      	movs	r3, #1
 8004c16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c18:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <xTaskResumeAll+0x134>)
 8004c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c28:	f7ff fc9e 	bl	8004568 <vPortExitCritical>

	return xAlreadyYielded;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20001b38 	.word	0x20001b38
 8004c3c:	20001b10 	.word	0x20001b10
 8004c40:	20001ad0 	.word	0x20001ad0
 8004c44:	20001b18 	.word	0x20001b18
 8004c48:	20001a14 	.word	0x20001a14
 8004c4c:	20001a10 	.word	0x20001a10
 8004c50:	20001b24 	.word	0x20001b24
 8004c54:	20001b20 	.word	0x20001b20
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c66:	4b4e      	ldr	r3, [pc, #312]	; (8004da0 <xTaskIncrementTick+0x144>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f040 8087 	bne.w	8004d7e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c70:	4b4c      	ldr	r3, [pc, #304]	; (8004da4 <xTaskIncrementTick+0x148>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3301      	adds	r3, #1
 8004c76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c78:	4a4a      	ldr	r2, [pc, #296]	; (8004da4 <xTaskIncrementTick+0x148>)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d11f      	bne.n	8004cc4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c84:	4b48      	ldr	r3, [pc, #288]	; (8004da8 <xTaskIncrementTick+0x14c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <xTaskIncrementTick+0x46>
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	e7fe      	b.n	8004ca0 <xTaskIncrementTick+0x44>
 8004ca2:	4b41      	ldr	r3, [pc, #260]	; (8004da8 <xTaskIncrementTick+0x14c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	4b40      	ldr	r3, [pc, #256]	; (8004dac <xTaskIncrementTick+0x150>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a3e      	ldr	r2, [pc, #248]	; (8004da8 <xTaskIncrementTick+0x14c>)
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	4a3e      	ldr	r2, [pc, #248]	; (8004dac <xTaskIncrementTick+0x150>)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <xTaskIncrementTick+0x154>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	4a3c      	ldr	r2, [pc, #240]	; (8004db0 <xTaskIncrementTick+0x154>)
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	f000 f990 	bl	8004fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cc4:	4b3b      	ldr	r3, [pc, #236]	; (8004db4 <xTaskIncrementTick+0x158>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d348      	bcc.n	8004d60 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cce:	4b36      	ldr	r3, [pc, #216]	; (8004da8 <xTaskIncrementTick+0x14c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d104      	bne.n	8004ce2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd8:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <xTaskIncrementTick+0x158>)
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
 8004cde:	601a      	str	r2, [r3, #0]
					break;
 8004ce0:	e03e      	b.n	8004d60 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce2:	4b31      	ldr	r3, [pc, #196]	; (8004da8 <xTaskIncrementTick+0x14c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d203      	bcs.n	8004d02 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004cfa:	4a2e      	ldr	r2, [pc, #184]	; (8004db4 <xTaskIncrementTick+0x158>)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d00:	e02e      	b.n	8004d60 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff faae 	bl	8004268 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d004      	beq.n	8004d1e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	3318      	adds	r3, #24
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff faa5 	bl	8004268 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	2201      	movs	r2, #1
 8004d24:	409a      	lsls	r2, r3
 8004d26:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <xTaskIncrementTick+0x15c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	4a22      	ldr	r2, [pc, #136]	; (8004db8 <xTaskIncrementTick+0x15c>)
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <xTaskIncrementTick+0x160>)
 8004d3e:	441a      	add	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f7ff fa31 	bl	80041ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	4b1b      	ldr	r3, [pc, #108]	; (8004dc0 <xTaskIncrementTick+0x164>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d3b9      	bcc.n	8004cce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d5e:	e7b6      	b.n	8004cce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d60:	4b17      	ldr	r3, [pc, #92]	; (8004dc0 <xTaskIncrementTick+0x164>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d66:	4915      	ldr	r1, [pc, #84]	; (8004dbc <xTaskIncrementTick+0x160>)
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d907      	bls.n	8004d88 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	e004      	b.n	8004d88 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <xTaskIncrementTick+0x168>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	4a0f      	ldr	r2, [pc, #60]	; (8004dc4 <xTaskIncrementTick+0x168>)
 8004d86:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <xTaskIncrementTick+0x16c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004d94:	697b      	ldr	r3, [r7, #20]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20001b38 	.word	0x20001b38
 8004da4:	20001b14 	.word	0x20001b14
 8004da8:	20001ac8 	.word	0x20001ac8
 8004dac:	20001acc 	.word	0x20001acc
 8004db0:	20001b28 	.word	0x20001b28
 8004db4:	20001b30 	.word	0x20001b30
 8004db8:	20001b18 	.word	0x20001b18
 8004dbc:	20001a14 	.word	0x20001a14
 8004dc0:	20001a10 	.word	0x20001a10
 8004dc4:	20001b20 	.word	0x20001b20
 8004dc8:	20001b24 	.word	0x20001b24

08004dcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dd2:	4b26      	ldr	r3, [pc, #152]	; (8004e6c <vTaskSwitchContext+0xa0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004dda:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <vTaskSwitchContext+0xa4>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004de0:	e03e      	b.n	8004e60 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004de2:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <vTaskSwitchContext+0xa4>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de8:	4b22      	ldr	r3, [pc, #136]	; (8004e74 <vTaskSwitchContext+0xa8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	fab3 f383 	clz	r3, r3
 8004df4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004df6:	7afb      	ldrb	r3, [r7, #11]
 8004df8:	f1c3 031f 	rsb	r3, r3, #31
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	491e      	ldr	r1, [pc, #120]	; (8004e78 <vTaskSwitchContext+0xac>)
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	607b      	str	r3, [r7, #4]
 8004e24:	e7fe      	b.n	8004e24 <vTaskSwitchContext+0x58>
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4a11      	ldr	r2, [pc, #68]	; (8004e78 <vTaskSwitchContext+0xac>)
 8004e32:	4413      	add	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	605a      	str	r2, [r3, #4]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	3308      	adds	r3, #8
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d104      	bne.n	8004e56 <vTaskSwitchContext+0x8a>
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	605a      	str	r2, [r3, #4]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <vTaskSwitchContext+0xb0>)
 8004e5e:	6013      	str	r3, [r2, #0]
}
 8004e60:	bf00      	nop
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	20001b38 	.word	0x20001b38
 8004e70:	20001b24 	.word	0x20001b24
 8004e74:	20001b18 	.word	0x20001b18
 8004e78:	20001a14 	.word	0x20001a14
 8004e7c:	20001a10 	.word	0x20001a10

08004e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e88:	f000 f852 	bl	8004f30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <prvIdleTask+0x28>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d9f9      	bls.n	8004e88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <prvIdleTask+0x2c>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ea4:	e7f0      	b.n	8004e88 <prvIdleTask+0x8>
 8004ea6:	bf00      	nop
 8004ea8:	20001a14 	.word	0x20001a14
 8004eac:	e000ed04 	.word	0xe000ed04

08004eb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	e00c      	b.n	8004ed6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <prvInitialiseTaskLists+0x60>)
 8004ec8:	4413      	add	r3, r2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff f942 	bl	8004154 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	607b      	str	r3, [r7, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b06      	cmp	r3, #6
 8004eda:	d9ef      	bls.n	8004ebc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004edc:	480d      	ldr	r0, [pc, #52]	; (8004f14 <prvInitialiseTaskLists+0x64>)
 8004ede:	f7ff f939 	bl	8004154 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ee2:	480d      	ldr	r0, [pc, #52]	; (8004f18 <prvInitialiseTaskLists+0x68>)
 8004ee4:	f7ff f936 	bl	8004154 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ee8:	480c      	ldr	r0, [pc, #48]	; (8004f1c <prvInitialiseTaskLists+0x6c>)
 8004eea:	f7ff f933 	bl	8004154 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004eee:	480c      	ldr	r0, [pc, #48]	; (8004f20 <prvInitialiseTaskLists+0x70>)
 8004ef0:	f7ff f930 	bl	8004154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ef4:	480b      	ldr	r0, [pc, #44]	; (8004f24 <prvInitialiseTaskLists+0x74>)
 8004ef6:	f7ff f92d 	bl	8004154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004efa:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <prvInitialiseTaskLists+0x78>)
 8004efc:	4a05      	ldr	r2, [pc, #20]	; (8004f14 <prvInitialiseTaskLists+0x64>)
 8004efe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f00:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <prvInitialiseTaskLists+0x7c>)
 8004f02:	4a05      	ldr	r2, [pc, #20]	; (8004f18 <prvInitialiseTaskLists+0x68>)
 8004f04:	601a      	str	r2, [r3, #0]
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20001a14 	.word	0x20001a14
 8004f14:	20001aa0 	.word	0x20001aa0
 8004f18:	20001ab4 	.word	0x20001ab4
 8004f1c:	20001ad0 	.word	0x20001ad0
 8004f20:	20001ae4 	.word	0x20001ae4
 8004f24:	20001afc 	.word	0x20001afc
 8004f28:	20001ac8 	.word	0x20001ac8
 8004f2c:	20001acc 	.word	0x20001acc

08004f30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f36:	e019      	b.n	8004f6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f38:	f7ff fae8 	bl	800450c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <prvCheckTasksWaitingTermination+0x4c>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff f98d 	bl	8004268 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <prvCheckTasksWaitingTermination+0x50>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	4a0a      	ldr	r2, [pc, #40]	; (8004f80 <prvCheckTasksWaitingTermination+0x50>)
 8004f56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <prvCheckTasksWaitingTermination+0x54>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	4a09      	ldr	r2, [pc, #36]	; (8004f84 <prvCheckTasksWaitingTermination+0x54>)
 8004f60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f62:	f7ff fb01 	bl	8004568 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f80e 	bl	8004f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f6c:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <prvCheckTasksWaitingTermination+0x54>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e1      	bne.n	8004f38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20001ae4 	.word	0x20001ae4
 8004f80:	20001b10 	.word	0x20001b10
 8004f84:	20001af8 	.word	0x20001af8

08004f88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d108      	bne.n	8004fac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fe ffc4 	bl	8003f2c <vPortFree>
				vPortFree( pxTCB );
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fe ffc1 	bl	8003f2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004faa:	e017      	b.n	8004fdc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d103      	bne.n	8004fbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fe ffb8 	bl	8003f2c <vPortFree>
	}
 8004fbc:	e00e      	b.n	8004fdc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d009      	beq.n	8004fdc <prvDeleteTCB+0x54>
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	e7fe      	b.n	8004fda <prvDeleteTCB+0x52>
	}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fea:	4b0c      	ldr	r3, [pc, #48]	; (800501c <prvResetNextTaskUnblockTime+0x38>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d104      	bne.n	8004ffe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <prvResetNextTaskUnblockTime+0x3c>)
 8004ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ffc:	e008      	b.n	8005010 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ffe:	4b07      	ldr	r3, [pc, #28]	; (800501c <prvResetNextTaskUnblockTime+0x38>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	4a04      	ldr	r2, [pc, #16]	; (8005020 <prvResetNextTaskUnblockTime+0x3c>)
 800500e:	6013      	str	r3, [r2, #0]
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	20001ac8 	.word	0x20001ac8
 8005020:	20001b30 	.word	0x20001b30

08005024 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800502e:	4b29      	ldr	r3, [pc, #164]	; (80050d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005034:	4b28      	ldr	r3, [pc, #160]	; (80050d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3304      	adds	r3, #4
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff f914 	bl	8004268 <uxListRemove>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10b      	bne.n	800505e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005046:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	2201      	movs	r2, #1
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	43da      	mvns	r2, r3
 8005054:	4b21      	ldr	r3, [pc, #132]	; (80050dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4013      	ands	r3, r2
 800505a:	4a20      	ldr	r2, [pc, #128]	; (80050dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800505c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d10a      	bne.n	800507c <prvAddCurrentTaskToDelayedList+0x58>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800506c:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3304      	adds	r3, #4
 8005072:	4619      	mov	r1, r3
 8005074:	481a      	ldr	r0, [pc, #104]	; (80050e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005076:	f7ff f89a 	bl	80041ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800507a:	e026      	b.n	80050ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005084:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	429a      	cmp	r2, r3
 8005092:	d209      	bcs.n	80050a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005094:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3304      	adds	r3, #4
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f7ff f8a8 	bl	80041f6 <vListInsert>
}
 80050a6:	e010      	b.n	80050ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050a8:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4619      	mov	r1, r3
 80050b4:	4610      	mov	r0, r2
 80050b6:	f7ff f89e 	bl	80041f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050ba:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d202      	bcs.n	80050ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80050c4:	4a09      	ldr	r2, [pc, #36]	; (80050ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6013      	str	r3, [r2, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20001b14 	.word	0x20001b14
 80050d8:	20001a10 	.word	0x20001a10
 80050dc:	20001b18 	.word	0x20001b18
 80050e0:	20001afc 	.word	0x20001afc
 80050e4:	20001acc 	.word	0x20001acc
 80050e8:	20001ac8 	.word	0x20001ac8
 80050ec:	20001b30 	.word	0x20001b30

080050f0 <__libc_init_array>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4e0d      	ldr	r6, [pc, #52]	; (8005128 <__libc_init_array+0x38>)
 80050f4:	4c0d      	ldr	r4, [pc, #52]	; (800512c <__libc_init_array+0x3c>)
 80050f6:	1ba4      	subs	r4, r4, r6
 80050f8:	10a4      	asrs	r4, r4, #2
 80050fa:	2500      	movs	r5, #0
 80050fc:	42a5      	cmp	r5, r4
 80050fe:	d109      	bne.n	8005114 <__libc_init_array+0x24>
 8005100:	4e0b      	ldr	r6, [pc, #44]	; (8005130 <__libc_init_array+0x40>)
 8005102:	4c0c      	ldr	r4, [pc, #48]	; (8005134 <__libc_init_array+0x44>)
 8005104:	f000 f820 	bl	8005148 <_init>
 8005108:	1ba4      	subs	r4, r4, r6
 800510a:	10a4      	asrs	r4, r4, #2
 800510c:	2500      	movs	r5, #0
 800510e:	42a5      	cmp	r5, r4
 8005110:	d105      	bne.n	800511e <__libc_init_array+0x2e>
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005118:	4798      	blx	r3
 800511a:	3501      	adds	r5, #1
 800511c:	e7ee      	b.n	80050fc <__libc_init_array+0xc>
 800511e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005122:	4798      	blx	r3
 8005124:	3501      	adds	r5, #1
 8005126:	e7f2      	b.n	800510e <__libc_init_array+0x1e>
 8005128:	080051d8 	.word	0x080051d8
 800512c:	080051d8 	.word	0x080051d8
 8005130:	080051d8 	.word	0x080051d8
 8005134:	080051dc 	.word	0x080051dc

08005138 <memset>:
 8005138:	4402      	add	r2, r0
 800513a:	4603      	mov	r3, r0
 800513c:	4293      	cmp	r3, r2
 800513e:	d100      	bne.n	8005142 <memset+0xa>
 8005140:	4770      	bx	lr
 8005142:	f803 1b01 	strb.w	r1, [r3], #1
 8005146:	e7f9      	b.n	800513c <memset+0x4>

08005148 <_init>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr

08005154 <_fini>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	bf00      	nop
 8005158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515a:	bc08      	pop	{r3}
 800515c:	469e      	mov	lr, r3
 800515e:	4770      	bx	lr
